
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20200624

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WITH
    | WHILE_LWT
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23 "src/ocaml/preprocess/parser_raw.ml"
  )
    | TYPE
    | TRY_LWT
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 765 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 36 "src/ocaml/preprocess/parser_raw.ml"
  )
    | STAR
    | SNAPSHOT
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTED_STRING_ITEM of (
# 770 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 50 "src/ocaml/preprocess/parser_raw.ml"
  )
    | QUOTED_STRING_EXPR of (
# 767 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 55 "src/ocaml/preprocess/parser_raw.ml"
  )
    | QUOTE
    | QUESTIONQUESTION
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 751 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 64 "src/ocaml/preprocess/parser_raw.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 744 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 74 "src/ocaml/preprocess/parser_raw.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH_LWT
    | MATCH
    | LPAREN
    | LIDENT of (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 93 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET_LWT
    | LETOP of (
# 709 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 99 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 119 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INT of (
# 713 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 124 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 707 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 131 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP3 of (
# 706 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 136 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP2 of (
# 705 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 141 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP1 of (
# 704 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 146 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP0 of (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 151 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 762 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 159 "src/ocaml/preprocess/parser_raw.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATERDOT
    | GREATER
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR_LWT
    | FOR
    | FLOAT of (
# 692 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 174 "src/ocaml/preprocess/parser_raw.ml"
  )
    | FINALLY_LWT
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTTILDE
    | DOTOP of (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 190 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DOTLESS
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 199 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 206 "src/ocaml/preprocess/parser_raw.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 672 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 217 "src/ocaml/preprocess/parser_raw.ml"
  )
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of (
# 710 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 230 "src/ocaml/preprocess/parser_raw.ml"
  )
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 18 "src/ocaml/preprocess/parser_raw.mly"
  

[@@@ocaml.warning "-9"]

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir
open Msupport_parsing

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}

let mktyp ~loc d = Typ.mk ~loc:(make_loc loc) d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let pstr_typext (te, ext) =
  (Pstr_typext te, ext)
let pstr_primitive (vd, ext) =
  (Pstr_primitive vd, ext)
let pstr_type ((nr, ext), tys) =
  (Pstr_type (nr, tys), ext)
let pstr_exception (te, ext) =
  (Pstr_exception te, ext)
let pstr_include (body, ext) =
  (Pstr_include body, ext)
let pstr_recmodule (ext, bindings) =
  (Pstr_recmodule bindings, ext)

let psig_typext (te, ext) =
  (Psig_typext te, ext)
let psig_value (vd, ext) =
  (Psig_value vd, ext)
let psig_type ((nr, ext), tys) =
  (Psig_type (nr, tys), ext)
let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive); (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)
let psig_exception (te, ext) =
  (Psig_exception te, ext)
let psig_include (body, ext) =
  (Psig_include body, ext)

let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc

let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;

let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))

let mkoperator =
  mkexpvar

let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)

let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc

let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))

(*
let syntax_error () =
  raise Syntaxerr.Escape_error
*)

let not_expecting loc nonterm =
  raise_error Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))

(*
let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))

let expecting loc nonterm =
    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))
*)

let dotop ~left ~right ~assign ~ext ~multi =
  let assign = if assign then "<-" else "" in
  let mid = if multi then ";.." else "" in
  String.concat "" ["."; ext; left; mid; right; assign]
let paren = "(",")"
let brace = "{", "}"
let bracket = "[", "]"
let lident x =  Lident x
let ldot x y = Ldot(x,y)
let dotop_fun ~loc dotop =
  (* We could use ghexp here, but sticking to mkexp for parser.mly
     compatibility. TODO improve parser.mly *)
  mkexp ~loc (Pexp_ident (ghloc ~loc dotop))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.fast then "unsafe_" ^ name else name)))

let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))

let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))

let multi_indices ~loc = function
  | [a] -> false, a
  | l -> true, mkexp ~loc (Pexp_array l)

let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))

let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))

let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc path (left,right) ext array index =
  let multi, index = multi_indices ~loc index in
  index_get ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:false))
    array index

let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc path (left,right) ext array index value=
  let multi, index = multi_indices ~loc index in
  index_set ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:true))
    array index value


let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.fast then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.fast then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))

let exp_of_longident ~loc lid =
  mkexp ~loc (Pexp_ident {lid with txt = Lident(Longident.last lid.txt)})

(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }

let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id

let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id

let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident (loc_lident lbl))

let pat_of_label ~loc lbl =
  mkpat ~loc (Ppat_var (loc_last lbl))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ attrs body =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ attrs body =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let wrap_mkstr_ext ~loc (item, ext) =
  wrap_str_ext ~loc (mkstr ~loc item) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let wrap_mksig_ext ~loc (item, ext) =
  wrap_sig_ext ~loc (mksig ~loc item) ext

let mk_quotedext ~loc (id, idloc, str, strloc, delim) =
  let exp_id = mkloc id idloc in
  let e = ghexp ~loc (Pexp_constant (Pconst_string (str, strloc, delim))) in
  (exp_id, PStr [mkstrexp e []])

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos = [Ptop_def (Str.text (rhs_text pos))]

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
let extra_def p1 p2 items =
  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

(*
type let_binding =
  { lb_pattern: pattern;
    lb_expression: expression;
    lb_attributes: attributes;
    lb_docs: docs Lazy.t;
    lb_text: text Lazy.t;
    lb_loc: Location.t; }

type let_bindings =
  { lbs_bindings: let_binding list;
    lbs_rec: rec_flag;
    lbs_extension: string Asttypes.loc option;
    lbs_loc: Location.t }
*)

let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    (* Our use of let_bindings(no_ext) guarantees the following: *)
    assert (lbs.lbs_extension = None);
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise_error (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        (* assert (ptyp.ptype_kind = Ptype_abstract); *)
        (* assert (ptyp.ptype_attributes = []); *)
        begin match ptyp.ptype_manifest with
        | Some ty -> Some (lid, ty)
        | None -> None
        end
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported";
        None
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [])
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.filter_map map_cstr cstrs)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"
      ; (Location.mkloc (Lident "_") pmty.pmty_loc, [])

let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }

let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }

let merloc startpos ?endpos x =
  let endpos = match endpos with
    | None -> x.pexp_loc.Location.loc_end
    | Some endpos -> endpos
  in
  let loc = make_loc (startpos, endpos) in
  let str = mkloc "merlin.loc" loc in
  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
  { x with pexp_attributes = attr :: x.pexp_attributes }

let val_of_lwt_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_lwt_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  Fake.app Fake.Lwt.in_lwt
    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
       (lbs.lbs_extension, []))


# 850 "src/ocaml/preprocess/parser_raw.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          134
      | AMPERSAND ->
          133
      | AND ->
          132
      | ANDOP _ ->
          131
      | AS ->
          130
      | ASSERT ->
          129
      | BACKQUOTE ->
          128
      | BANG ->
          127
      | BAR ->
          126
      | BARBAR ->
          125
      | BARRBRACKET ->
          124
      | BEGIN ->
          123
      | CHAR _ ->
          122
      | CLASS ->
          121
      | COLON ->
          120
      | COLONCOLON ->
          119
      | COLONEQUAL ->
          118
      | COLONGREATER ->
          117
      | COMMA ->
          116
      | COMMENT _ ->
          115
      | CONSTRAINT ->
          114
      | DO ->
          113
      | DOCSTRING _ ->
          112
      | DONE ->
          111
      | DOT ->
          110
      | DOTDOT ->
          109
      | DOTLESS ->
          108
      | DOTOP _ ->
          107
      | DOTTILDE ->
          106
      | DOWNTO ->
          105
      | ELSE ->
          104
      | END ->
          103
      | EOF ->
          102
      | EOL ->
          101
      | EQUAL ->
          100
      | EXCEPTION ->
          99
      | EXTERNAL ->
          98
      | FALSE ->
          97
      | FINALLY_LWT ->
          96
      | FLOAT _ ->
          95
      | FOR ->
          94
      | FOR_LWT ->
          93
      | FUN ->
          92
      | FUNCTION ->
          91
      | FUNCTOR ->
          90
      | GREATER ->
          89
      | GREATERDOT ->
          88
      | GREATERRBRACE ->
          87
      | GREATERRBRACKET ->
          86
      | HASH ->
          85
      | HASHOP _ ->
          84
      | IF ->
          83
      | IN ->
          82
      | INCLUDE ->
          81
      | INFIXOP0 _ ->
          80
      | INFIXOP1 _ ->
          79
      | INFIXOP2 _ ->
          78
      | INFIXOP3 _ ->
          77
      | INFIXOP4 _ ->
          76
      | INHERIT ->
          75
      | INITIALIZER ->
          74
      | INT _ ->
          73
      | LABEL _ ->
          72
      | LAZY ->
          71
      | LBRACE ->
          70
      | LBRACELESS ->
          69
      | LBRACKET ->
          68
      | LBRACKETAT ->
          67
      | LBRACKETATAT ->
          66
      | LBRACKETATATAT ->
          65
      | LBRACKETBAR ->
          64
      | LBRACKETGREATER ->
          63
      | LBRACKETLESS ->
          62
      | LBRACKETPERCENT ->
          61
      | LBRACKETPERCENTPERCENT ->
          60
      | LESS ->
          59
      | LESSMINUS ->
          58
      | LET ->
          57
      | LETOP _ ->
          56
      | LET_LWT ->
          55
      | LIDENT _ ->
          54
      | LPAREN ->
          53
      | MATCH ->
          52
      | MATCH_LWT ->
          51
      | METHOD ->
          50
      | MINUS ->
          49
      | MINUSDOT ->
          48
      | MINUSGREATER ->
          47
      | MODULE ->
          46
      | MUTABLE ->
          45
      | NEW ->
          44
      | NONREC ->
          43
      | OBJECT ->
          42
      | OF ->
          41
      | OPEN ->
          40
      | OPTLABEL _ ->
          39
      | OR ->
          38
      | PERCENT ->
          37
      | PLUS ->
          36
      | PLUSDOT ->
          35
      | PLUSEQ ->
          34
      | PREFIXOP _ ->
          33
      | PRIVATE ->
          32
      | QUESTION ->
          31
      | QUESTIONQUESTION ->
          30
      | QUOTE ->
          29
      | QUOTED_STRING_EXPR _ ->
          28
      | QUOTED_STRING_ITEM _ ->
          27
      | RBRACE ->
          26
      | RBRACKET ->
          25
      | REC ->
          24
      | RPAREN ->
          23
      | SEMI ->
          22
      | SEMISEMI ->
          21
      | SIG ->
          20
      | SNAPSHOT ->
          19
      | STAR ->
          18
      | STRING _ ->
          17
      | STRUCT ->
          16
      | THEN ->
          15
      | TILDE ->
          14
      | TO ->
          13
      | TRUE ->
          12
      | TRY ->
          11
      | TRY_LWT ->
          10
      | TYPE ->
          9
      | UIDENT _ ->
          8
      | UNDERSCORE ->
          7
      | VAL ->
          6
      | VIRTUAL ->
          5
      | WHEN ->
          4
      | WHILE ->
          3
      | WHILE_LWT ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | ANDOP _v ->
          Obj.repr _v
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTLESS ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOTTILDE ->
          Obj.repr ()
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FINALLY_LWT ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FOR_LWT ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERDOT ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LETOP _v ->
          Obj.repr _v
      | LET_LWT ->
          Obj.repr ()
      | LIDENT _v ->
          Obj.repr _v
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | MATCH_LWT ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUESTIONQUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | QUOTED_STRING_EXPR _v ->
          Obj.repr _v
      | QUOTED_STRING_ITEM _v ->
          Obj.repr _v
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | SNAPSHOT ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TRY_LWT ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WHILE_LWT ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
f\000a\000\190\002\127\000\000\000\000\000\000\000\000\001R\000\000\000\000\001U\001S\001Z\000A\002n\000\000\001\021\000\000\001\169\000d\000\000\003\011\000\000\000\000\000\000\000\000\000\000\000\000\001\148\001\166\001\165\001\164\001\170\001\174\001\168\001\167\001\149\001\172\001\163\001\162\001\161\001\160\001\159\001\157\001\173\001\171\000\000\000\000\000\000\000\223\000\000\000\000\001\152\000\000\000\000\000\000\001\154\000\000\000\000\000\000\001\156\001\178\001\175\001\158\001\150\001\176\001\177\000\000\003\n\000\000\000\000\000\024\001H\000\000\000\219\000\220\000\023\000\000\000\000\001\200\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\006\000\000\003\007\000\000\000\000\003\004\000\000\003\003\002\255\002&\000\000\003\002\000\000\002'\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000%\000\000\000\000\000\000\000\000\000\000\000\000\001Y\000\000\001I\001X\000\000\001G\000^\000\030\000\000\000\000\001}\000\025\000\000\000\000\000\000\000\000\002\254\000(\000\000\000\000\000\031\000\026\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000\205\0020\002\"\000\000\000\"\000\000\002#\000\000\000\000\001\179\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\002\234\000\000\002\235\000\000\000u\000\000\000\000\000!\000\000\000\000\000\000\000#\000\000\000$\000\000\000&\000\000\000\000\000'\002\024\002\023\000\000\000\000\002\026\000\000\000\000\000\000\000\000\000\000\000\000\001>\0018\000\000\000\000\0019\000\000\000\029\000\000\000\028\000\000\000\000\000\204\000\000\000h\000\000\000\000\000\000\000 \000\027\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000c\000\000\001w\000\000\000\000\000\000\000\000\000\000\000\000\000\228\000\000\001\141\000\000\000\231\000\229\000e\001\137\000\000\000g\000\000\000\000\000\000\000\000\000\000\000\000\000q\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\213\000i\000\000\000\000\002\007\002\005\002\006\000\000\001\133\000\000\000\000\000\214\000\000\000\000\001\140\001\136\002\253\000\000\000\000\000\000\000\000\000\000\001\143\001\139\001\135\000\000\000\000\001\142\001\138\001\134\001\132\000\000\002\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000\000\000\000\000\000\000\000\000\000\000\000\001\027\000\218\000\000\000\000\001\251\000\000\000\000\000\000\000\000\000\000\000\000\000l\000\000\000\000\000\000\000\000\000k\000\000\000\191\000m\000\000\002\223\002\012\002\r\002\b\002\n\002\t\002\011\000\000\000\000\000\000\000\192\003\001\000\000\000\000\002\017\000\000\000\217\000\000\000\000\000\000\000\000\002\222\000\000\000\226\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002Y\002Z\000\000\002W\002X\000\000\000\000\000\000\000\000\000\000\001i\001h\000\000\002\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\000\000\000\000\000\000\000\000\000\234\000\000\002[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000_\000\000\002\150\000b\000`\002\139\003\012\002\140\001\230\002\142\000\000\000\000\002\147\002V\002\149\000\000\000\000\000\000\002\153\000\000\000\000\000\000\001\227\001\218\000\000\000\000\000\000\000\000\000\000\001\217\000\000\001\229\002\156\000\000\001\228\001\222\000\000\002\154\000\000\000\000\000\000\000\000\000\000\001\219\000\000\002\152\000\000\002\\\000\000\000\000\002:\002\151\002\148\000\000\000\000\000\000\000\000\001\184\0010\0011\002^\000\000\002]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\238\000\000\000\000\000\000\000\000\000\000\000\000\000\242\001\237\000\243\000\000\000\000\000\000\001\127\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\000\000\000\000\000\000\000\000\000\000\000\000\002\020\000\000\000\000\001p\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\002!\000\000\000\000\001o\000\000\000\000\000\000\001Q\001u\001P\001s\002\019\000\000\001n\000\000\000\207\000\000\000\000\001b\000\000\000\000\001f\000\000\001\202\000\000\000\000\001\201\001e\001c\000\000\001g\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002q\001V\002v\002t\000\000\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\237\000\000\000\238\000\000\000\000\000\000\002|\000\000\000\000\000\000\002c\000\000\000\000\000\000\000\000\003\r\002~\002s\002r\000\000\000\000\000xd\000\000\000\000\002k\000\000\000\000\000\000\000\000\002i\000\000\000\000\0024\000\000\000\000\002h\000\000\000\000\002j\002y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\022\002\021\000\170\000\000\002f\000\000\000\000\002e\000\000\000\000\002g\001\006\000\000\000\000\001\007\000\000\000\000\000\173\000\000\001\t\001\b\000\000\000\000\002z\000\000\002\134\000\000\002\133\000\000\002\137\000\000\002\136\000\000\000\000\002{\000\000\000\000\000\000\002\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\198\000\000\000\000\000\000\002=\002\003\000\000\002\130\000\000\000\000\000\000\001W\000\000\000v\000w\000\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\199\000\247\000\000\000\200\000\201\000\000\000\000\002\141\000\000\000\000\002\155\000\136\000\000\000\135\000\000\000\000\0016\000\000\0017\0015\002\028\000\000\000\000\002\029\002\027\000\000\000\000\000\000\000\000\000\000\002m\000\000\002l\000\000\000\000\002_\000\000\000\000\002\129\000\000\000\000\000\000\0027\002x\000\000\002wtj\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\019\002P\000\000\000\000\000\000\002N\000\000\000\000\000\000\002M\000\000\001_\000\000\000\000\000\000\000\000\002S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\021\000\000\000\000\000\000\000\195\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000\000\000\000\000\000\000\000\001|\000\000\001{r`\000\000\001\145\000\000\000\000\000\000\001\144\000\000\000\000\001!\001 \000\000\001\248\000\216\000\000\000\000\000\000\000\000\002K\002\016\002\014\002\015\000\000\000\000\000\000\002\017\000\000\000\215\000\000\000\000\000\000\000\000\002J\000\000\001k\000\000\000\022\000\000\003\019\000\000\000\189\002u\000\000\000\000\000\000\000\000\002o\000\000\000\000\002p\000\000\002a\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000}\000\000\000|\000\000\000\000\000\000\000\141\000\000\000+\000\000\000\000\000\000\000\000\000~\000\000\000\221\000\001\000\000\000\000\000\224\000\002\000\000\000\000\000\000\001K\001L\000\003\000\000\000\000\000\000\000\000\001N\001O\001M\000\019\001J\000\020\000\000\001\207\000\000\000\004\000\000\001\208\000\000\000\005\000\000\001\209\000\000\000\000\001\210\000\006\000\000\000\007\000\000\001\211\000\000\000\b\000\000\001\212\000\000\000\t\000\000\001\213\000\000\000\000\001\214\000\n\000\000\000\000\001\215\000\011\000\000\000\000\000\000\000\000\000\000\002\242\002\237\002\238\002\241\002\239\000\000\002\246\000\012\000\000\002\245\000\000\001(\000\000\000\000\002\243\000\000\002\244\000\000\000\000\000\000\000\000\001,\001-\000\000\000\000\001+\001*\000\r\000\000\000\000\000\000\003\t\000\000\003\b")
  
  and error =
    (135, "2\248D\026X\170\223\204\207@P\031r(\000q\192ap\128\020\184Q\191\137>\128 >\128P\000c\129{vr\254\1797\214n\191\2437\252\021\015\220J\136<\240/n\196@A\127\021 \000\1528\0298\224\176(4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\225\000)`\163\127\018}\000@}\000\160\000\199\002\246\236D\004\023\241R\000\t\131\129\211\142\011\002\131C/\132E\181\138\173\252\204\244\005\001\247\002\128\015\028\006\023\b\001K\133\027\248\147\232\002\003\232\005\000\0068\012.\016\002\150\n7\241'\208\004\007\208\n\000\012p\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ap\128\020\184Q\191\137>\128 >\128P\000c\128\194\225\000)`\163\127\018}\000@}\000\160\000\199\001\133\194\000R\193F\254$z\000\128\250\001@\001\142\003\011\132\000\165\194\141\252I\244\001\001\244\002\128\003\028\006\023\b\001K\005\027\248\147\232\002\003\232\005\000\0068\012.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004B\000R\000@0$r\000\000\n\001@\001\140\000\bg\127\236\223\127\239\255\248:?\185\150\0169\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ap\194\020\252U\191\169\030\1590\190\144p\006k\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\016\164\000\128`H\228\000\000\020\002\128\003\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\183b  \191\138\144\000L\028\014\156pX\020\026\025|\"-\172Uo\230g\160(\015\184\020\000x\224\000\000\000\000\004\000\006\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\001\000\003\240\006\004\128\000|bbb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000`b\000\000\000\000\000\000\002\000  \016\b\024\016@\000\000\128\000\000\000\000\000\004\000@@\000\0160 \128\000\001\000\000\000\000\000\000\b\000\128\128\000 `@\000\000\002\000\000\000\000\000\bH\000\170\000\016`\169\014\000\b\128\007`@\136\001\000\144\001\004\000 \128\002\020\000\016\000\012@\000\016\000\001 \002\b\000A\000\004 \000 \000\024\128\000 \000\001\128\000\004\012\016F\000\016\000\000\000\000\000\000\000\000\003\000\000\b\016 \140\000 \000\000\000\000\000\000\000\000\006\000\000\016 A\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000@\128\004`t\000\017@\130\b\000!\128\001\000\000\236\000\137\000 \012@\000l\b\0000\184P\000 \002\000 \000\016\000$\000E\000\012 T\135\000\004@\0030\"\012 \1281\000\001\160 \000\194\225@\000\128\b\000\128\000@\000`\000C@@\129\133\194\000\001\000\000\000\000@\000!`\019\184\000A\145\1648\024\" \029\128\022a\022\001\128\000\012\000\000\006\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\0000\000\000\024\\ \000\017\000\000\016\000\000\000\004\000\016\000\000\000\016\000\000\000\"\000\000\000\004\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\000\000\016\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\160\b\141\000\000H\130\028\012\001\016\002@\137\000\b\000\192\000\006\128\128\003\011\132\000\002\000\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\001\000\006\000\0014\004\000\024\\ \000\016\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\b\0000\000\001\160 \000\194\225\000\000\128\000\000\000\000P\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\bp\000\131!Hp0D@;\000,B,\003\000\000\024\000\000\012.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\002w\000\b24\135\003\004D\003\176\002\196\"\192\016\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\012\000\000\006\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\006\000\0004\004\000\024\\ \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\002w\000\b24\135\003\004D\003\176\002\196\"\1920\000\001\128\000\000\194\225\000\000\128\000\000\000\000\000\016\176\t\220\000 \200\210\028\012\017\016\014\192\011\016\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\000\004\000\000\016\000\000\000\000\128\000\192\000\006\128\128\003\011\132\000\002\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\001\000\000\000\000\b\016\012\000\000h\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\002\000\000\b\000\000\000\000D\128\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\001\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000 \000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\000\000\b\128\000\000\000\000@\000\001\000\000\000\000\000\128\000\000\016\000\000\000\000\000\128\000\002\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\0000\000\001\128\000\000\194\227\000\000\136\000\000\128\000\000\000`\000\003\000\000\001\133\194\000\001\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\004\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\128\000\000\000\000\000@\000\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000\000\000\000\004\000\000\001\128\000M\001\000\006\023\b\000\004\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\001\016\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\bb\021!\160\001\016\001\204\000\129\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\020\0000\128R\028\000\017\000\012\192\b0\130\000\192\000\006\000\000\003\011\133\000\002\000\000\000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\192\000\000ap\128\000@\000\000\000\000\000\000X\004\138\000\016`i\014\000\012\128\006`\004\bA\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001`\018(\000A\001\1648\0002\000\025\128\016!\004\001\128\000\012\000\000\006\023\n\000\004\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\006\000\0000\000\000\024\\ \000\016\000\000\000\000\000\000\022\000\"\128\004\016\026C\128\003 \001\152\001\002\016@,\002E\000\b04\135\000\006@\0030\002\004 \128H\000\138\000\016@)\014\000\b\128\006`\004\bA\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\004P\000\130\001H`\000D\0003\000 B\b\001\016\000\000\000\000\b\000\016\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\138\000\016@)\014\000\b\128\006`\004\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \002(\000a\000\1648\000\"\000\025\128\016a\004\002@\004P\000\130\001Hp\000D\0003\000 B\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \002(\000A\000\1648\000\"\000\029\128\016 \004\000\136\000\000\128\000\004\000\n\000\000\000@\004\000\002\000\001\016\000\000\000\000\b\000\020\000\000\000\128\b\000\004\000\000\000\000\000\000\016\bb\000\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \002(\000A\000\0040\000 \000\025\128\016 \004^\221\136\128\130\254*@\0010p:q\193`Phe\240\136\182\177U\191\153\158\128\160>\224P\001\227\128\006\000\000\0160A\024\000@\000\000\000\000\000\000\000\000\012\000\000 @\1300\000\128\000\000\000\000\000\000\000\000\024\000\000@\129\004`\000\000\000\000\000\000\000\000\000\0000\000\000\129\000\b\192\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001 \002(\016A\000\1640\000\"\000\029\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\b\160\001\004\002\144\192\000\136\000f\000@\128\016\006\000\0004\004\000\024\\ \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\000\bH\000\170\000\016`)\014\000\b\128\007`\004\136\001\000\144\001\020\000 \136R\024\012\025\000\012\192\b\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\002\000\000\016\000 \000\000\001\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\000@\000\128\000\000\004\000\000\000 \000\017\000\000\000\000\000\128\001\000\000\000\b\000\000\000\000\000\144\001\020\0000\128R\028\000\017\000\014\192\0000\128\000D\000\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\nC\128\002 \001\152\016\002\016\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\004P\000\130\001Hp\000D\0003\000\000B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\nnC\128\002 \001\216\000\006\016\000\b\128\000\000\000\000@\000\128\000\000\004\000\000\000\000\000H\000\138\000\016@)\014\000\b\128\006`\000\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\004\128\b\160A\004\002\144\192\000\136\000v\000@\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\nC\000\002 \001\152\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000 \000\001\000\002\000\000\000\016\000\000\000\128\000D\000\000\000\000\002\000\004\000\000\000 \000\000\001\000\002@\004P\000\130\001H`\000D\0003\000\000B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\225\017ib\171\1273=\001@}\204\160\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000  \002\001\000\001\001\004\000\000\b\000\000\000\000@\000@@\004\002\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\b\000\000\004\004\016\000\000 \000\000\000\000\000\001\001\000\016\000\000\b\b\000\000\000@\000\000\000\000\000\203\225\016ib\171\1273}\001@}\196\160\001\199\001\151\194 \210\197V\254fz\002\128\251\137@\003\142\000 \000\001\000@\002@\133\003\000\000\000\016\002\000\000\000@\000\002\000\000\004\129\n\006\000\000\000 \004\000\000\000\128\000\004\000\000\t\002\016\012\000\000\000@\bcJE\167\198 \172\b\001\146\203\000\000\001\000\000\000\000\000\000@\000\001\000\000\000\000\000\003\000\000\000\b\000\000\000 \000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\b\b\000\002\006\004\000\000\000 \000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000@\000\000  \128\000\001\000\000\000\000\000\000\b\b\000\128\000\000@@\000\000\002\000\000\000\000\000\000P\016\001\000\000\000\128\128\000\000\004\000\000\000\000\000\012.\016\002\150\n7\241'\208\004\007\208\n\000\012p\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\225\000)p\163\127\018}\000@}\000\160\000\199\001\133\194\000R\193F\254$\250\000\128\250\001@\001\142\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\006\023\b\001K\133\027\248\147\232\002\003\232\005\000\0068\012.\016\002\150\n7\241'\208\004\007\208\n\000\012p\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224B\207g{\127\139\231|\254\255\237\193\251\251o\255\158ap\128\020\176Q\191\137\030\128 >\128P\000c\128\006!\002 0\001\024\018m\000\016\005\000\000\000\130\000\012B\004@@\0020$\218\000 \n\000\000\001\004\000\024\132\b\128\128\004`H\180\000@\020\000\000\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\002\002\000\017\129\"\208\001\000P\000\000\b \000\196 \004\004\000#\002E\160\002\000\168\000\000\020@\001\136@H\b\000F\004\139@\004\001P\000\000 \128\001\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\001\000\000\016\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\001\016\000\000\000\000\b\000\000\000\004\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\b\000\000\000\000\003\016\128\016\016\000\140\t\022\128\b\002\160\000\000A\000\006!\000 0\001\024\018i\000\016\005\000\000\000\130\000\012B\000@@\0020$\210\000 \n\000\000\001\004\000\024\132\000\128\128\004`H\164\000@\020\000\000\002\b`\018\000\165\002\006\213P\000\000@\000\b\000@\000\000@\000\001\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\1646\144\144\020`I\188\002@\021\160 \218\170\000\016\000\000\000\000\000\128\017@\000\000\000\000\000\000\000\000b\016B\002\000\017\129\"\208\001\000T\000\000H \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\b\012\000F\004\155@\004\001P\000\000 \128\003\016\128\016\016\000\140\t6\128\b\002\160\000\000A\000\006!\000  \001\024\018-\000\016\005@\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000l\000\000 \000\002\000\004\000\001@\0011D\000b\016\002\002\000\017\129\"\208\001\000T\000\000\b \004\000\001\176\000\000\128\000\b\000\016\000\005\000\004\197\016\001\136@\b\b\000F\004\139@\004\001P\000\000 \128\016\000\006\192\000\002\000\000 \000@\000\020\000\019\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000LB\027@@\n0$\218\001 \n\208\000MU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002b\016\218\002\000Q\129&\208\t\000V\128\002j\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000 \000\000\000\000\000\018\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012B\000@@\0020$Z\000 \n\128\000\001\004\000\128\0006\000\000\016\000\001\000\002\000\000\160\000\152\162\0001\b\001\001\000\b\192\145h\000\128*\000\000\004\016\002\000\000\216\000\000@\000\004\000\b\000\002\128\002b\136\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\128\144\016\000\140\t\022\128\b\002\160\000\000A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\002\000\000\000\000\000\001!D\000b\016\018\002\000\017\129\"\208\001\000T\000\000\n \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\000@\000\000\000\000\000$\b`I\172\000@\020\128\000\218*\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\004\000\000@\000\001\128\000\r\001\000\006\023\bnX(\223\196\143@\016\031@(\0001\192\003\016\128\016\016\000\140\t\022\128\b\002\128\000\000A\000\006)\000$$\001\024\018k\000\016\005 \000&\138\128\b\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\b\001\001\000\b\192\145h\000\128*\000\000\004\016\000\000\000@\000\000\000\000\004\000\000\000\002\000\002`\136\000\192\000\006\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\001\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\024B\031\128\177\165\"\211\227\016V\004\000\201e\128\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012R\000HH\0020$V\000 \n@\000%\004\000\024\132\000\128\128\004`H\164\000@\020\000\000\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\196 D\006A#\002M\160\002\000\168\000\000\016@\000\128\128\b\004\000\004\004\016\000\000 \000\000\000\001\000\001\001\000\016\b\000\b\b \000\000@\000\000\000\000\000\002\002\000 \000\000\016\016@\000\000\128\000\000\000\000\000\004\004\000@\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000`\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\001\000\016\016\000\004\012\b\000\000\000@\000\000\000\000\000\002\000  \000\b\024\016\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\128\b\b\000\002\006\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\t\000\021@\002\012\005!\192\001\016\000\236\000\017\000 \002\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\024\000\000@\128\004`\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\128\000\000\192\000\006\192\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\001\t\000\021@\002\012\005!\192\001\016\000\236\000\017\000\160\012\000\000h\b\0000\184@\000 \000\000\000\000\000\004$\000U\000\b0\020\135\000\004@\003\176\002D\002\136H\000\170\000\016`)\014\000\b\128\007`\004\136\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\001\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\n\160\001\006\n\144\224\000\136\000v\004\b\128\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000U\000\b0T\135\000\004@\003\176 D\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\144\001T\000 \192R\028\000\017\000\014\192\001\016\002\000 \000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\016\000\004\012\b\000\000\000@\000\000\000\000\001\tb\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\018\000*\128\004\024*C\128\003 \001\216\000&\000@(\b\016\128\000\000@@\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\004\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\b\b\000\002\006\004\000\000\000 \000\000\000\000\000\128\000\002\000\000\002\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\000\170\000\016`\169\014\000\012\128\007`@\152\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000\016\000\000\000\000\000\0000\184@\nX(\223\196\143@\016\031@(\0001\192ap\128\020\176Q\191\137\030\128 >\128P\000s\128\194\225\001)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\016\000\128\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\"\016\002\144\002\001\129#\144\000\000P\n\000\012` \000\001\016\000\000\000\000\000\000\006\000\004\t\002@\000\000\136@\n@\b\006\004\142@\000\001@(\0001\128ap\128\020\176Q\191\137\030\128 >\128P\000c\128\002!\000)\016 \024\018y\000\000\005\000\160\000\198\000\004B\000R\000@0$\242\000\000\n\001@\001\140\000\b\132\000\164\000\128`H\228\000\000\020\002\128\003\024\006\023\b\001K\133\027\248\147\232\002\003\232%\000\0068\012.\016\002\150\n7\241'\208\004\007\208J\000\012p\024\\ \005,\020o\226G\160\b\015\160\148\000\024\2240\184@\n\\(\223\196\159@\016\031@(\0001\192ap\128\020\176Q\191\137>\128 >\128P\000c\128\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\012B\000@`\0020$\218\000 \n\128\000\001\020\000\024\132\000\128\128\004`I\180\000@\021\000\000\002(\0001\b\001\001\000\b\192\145h\000\128*\000\000\004P\000b\016\002\002\000\017\129\"\208\001\000T\000\000\b \004\000\000\000\000\000\128\000\b\000\000\000\000\000\004\129\0160\184@\nX(\223\196\143@\016\031@(\0001\192\003\020\128\018\026\000\140\t5\128\b\002\128\000\000A\000\006)\000$$\001\024\018k\000\016\005\000\000\000\130\000\012R\000HH\0020$V\000 \n\000\000\001\004\000\028\134\016\135\224,iH\180\248\196\021\129\0002Y`\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197 \004\132\128\163\002E`\002\000\160\000\000P@0\184@\nX(\223\196\143@\016\031@(\0001\192\003\016\128\016\024\000\140\t6\128\b\002\160\000\000A\000\006!\000  \001\024\018m\000\016\005@\000\000\130\000\012B\000@@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000\000\001\000\002\000\000\128\000\144\"\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000b\016\002\003\000\017\129&\208\001\000T\000\000\b \000\196 \004\004\000#\002M\160\002\000\168\000\000\016@\001\136@\b\b\000F\004\139@\004\001P\000\000 \128\000\000\000\000\000\000\000\000 \000\000\000\016\000\018\004@\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\004B\000R\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\207g{\127\139\231\\\254\255\237\193\251\251o\255\190\001\000\000\000\000\000\012\001\028\000\000\000\000\000\000\000\000\194\225\132)\248\171\127R=>a} \224\012\215X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\011\132\016\165\130\141\252H\244\001\001\244\002\128\003\028\006\023\b!K\005\027\248\145\232\002\003\232\005\000\0068\000  \002\001\000\001\001\004\000\000\b\000\000\000\000\000\000@@\004\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\b\000\000\004\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000 \000\000\000\000\000\001\000\000\002\000  \000\b\024\016\000\000\000\128\000\000\000\000\002\000\000\b\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\023\b!K\005\027\248\145\232\002\003\232\005\000\0068\012.\016B\150\n7\241#\208\004\007\208\n\000\012p\000\196 \132\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000\016\000\000\000\b\000\t\130 \003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000 \000\000\000\001\133\194\000R\193F\254$z\000\128\250\001@\001\142\000\b\132\000\164@\128`I\228\000\000\020\002\128\003\024\000\017\b\001H\001\000\192\147\200\000\000(\005\000\0060\000\"\016\002\144\002\001\129#\144\000\000P\n\000\012`!\"\147\184\031A\240\1728\031\246\224]\233\183\231\015\000\136@\n@\b\006\004\142@\000\001@(\0001\128\133\158\206\246\255\023\206\185\253\255\219\131\247\246\223\255|\000\000\000\000\000\000\016\000(\000\000\000\000\000\000\000\001\133\194\000R\193F\254$z\000\128\250\001@\001\142\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bY\236\239o\241|\235\159\223\253\184?\127m\255\243\192\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002!\000)\000 \024\0189\000\000\005\000\160\000\198\002\022{;\219\252_:\231\247\255n\015\223\219\127\253\240\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\001\128\002\128\000\000\000\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\t\020\157\192\250\015\133a\192\255\151\002\239\005\1918y\133\194\000R\193F\254$z\000\128\250\001@\001\142\004,\246w\183\248\190u\207\239\254\220\031\191\182\255\249\232H\164\238\007\208|+\014\007\253\184\023zm\249\195\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000!\133\194\000R\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!g\179\189\191\197\243\174\127\127\246\224\253\253\183\255\207BE'p>\131\225Xp?\237\192\187\211o\206\030ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\151\235;\211\245_\254\231\251\255\174\255\223K\127\254\245\237\216\136\b/\226\164\000\019\007\003\167\028\022\005\006\134\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p!\"\147\184\031A\240\1728\031\242\224]\224\183\231\0150\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p!\"\147\184\031A\240\1728\031\242\224]\224\183\231\0150\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p!\"\147\184\031A\240\1728\031\242\224]\224\183\231\0150\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p!\"\147\184\031A\240\1728\031\242\224]\224\183\231\0150\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p!\"\147\184\031A\240\1728\031\242\224]\224\183\231\015\001\136@\b\b\000F\004\155@\004\001@\000\000 \128\003\016\128\016\016\000\140\t\022\128\b\002\128\000\000A\000\000\000\000\000\000\000\000\000@\000\000\000 \000&\b\128\012\000\000h\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\0160\184@\nX(\223\196\143@\016\031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\000  \001\024\018-\000\016\005@\000\000\130\000\000\000\000\000\000\000\000\000\128\000\000\000@\000H\017\000\024\132\000\128\128\004`H\180\000@\021\000\000\002\b\000\000\000\000\000\000\000\000\002\000\000\000\001\000\001 D\000b\016\002\002\000\017\129\"\208\001\000T\000\000\b \000\000\000\000\000\000\000\000\b\000\000\000\004\000\004\129\016\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\144\"\0001\b\001\001\000\b\192\145h\000\128*\000\000\004\016\000\000\000\000\000\000\000\000\004\000\000\000\002\000\002@\136\001 \002(\000A\000\1640\0002\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\018);\129\244\031\n\195\129\255.\005\222\011~p\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000  >\000\192\016\016\015\128@\b\000\011\004\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\176\031\000`\b\b\007\192 \004\000\005\134\0030\184AjX(\223\196\143@\016\031@(\0009\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\128\020\128\016\012\t\028\128\000\002\128P\000c\001\011=\157\237\254/\157s\251\255\183\007\239\237\191\254\248\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\179\217\222\223\226\249\223?\191\251p~\254\219\255\231\152\\ \005,\020o\226G\160\b\015\160\020\000\024\224BE'p>\131\225Xp?\229\192\187\193o\206\030ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\002\022{;\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000B\207g{\127\139\231|\254\255\237\193\251\251o\255\158ap\128\020\176Q\191\137\030\128 >\128P\000c\129\t\020\157\192\250\015\133a\192\255\151\002\239\005\1918x\004\000\000\000\000\0000\000P\000\000\000\000\000\000\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\179\217\222\223\226\249\223?\191\251p~\254\219\255\231\152\\ \005,\020o\226G\160\b\015\160\020\000\024\224BE'p>\131\225Xp?\229\192\187\193o\206\030ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\002\022{;\219\252_;\231\247\255n\015\223\219\127\252\243\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\204.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\000\016\016\031\000`\b\b\007\192 \004\000\005\130\003B\207g{\127\139\231|\254\255\237\193\251\251o\255\158ap\128\020\176Q\191\137\030\128 >\128P\000c\129\t\020\157\192\250\015\133a\192\255\151\002\239\005\1918x\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\000\000@\000\160\000\000\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000!g\179\189\191\197\243\190\127\127\246\224\253\253\183\255\2070\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\246w\183\248\190w\207\239\254\220\031\191\182\255\249\230\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\016\145I\220\015\160\248V\028\015\249p.\240[\243\135\152\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\133\158\206\246\255\023\206\249\253\255\219\131\247\246\223\255<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\244,\246w\183\248\190w\207\239\254\220\031\191\182\255\249\230\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\016\145I\220\015\160\248V\028\015\249p.\240[\243\135\161g\179\189\191\197\243\174\127\127\246\224\253\253\183\255\223B\207g{\127\139\231\\\254\255\229\193\251\233o\255\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\000\001 D\012.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012B\000@@\0020$Z\000 \n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\016B\144\002\001\129#\144\000\000P\n\000\012`\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000ap\128\020\176Q\191\137\030\128 >\128P\000s\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\023\b\tK\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\132\000\164\000\128`H\228\000\000\020\002\128\003\024\b\000\000\000\000\000\000\000\000\000\001\128\000\002@\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\b\000\004\128\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\000\000\012\128\000\000\000\000@\000\000\000 \000\000\000\000\012\000\000h\b\0000\184@\000 \000\000\000\000\000\000\000\0002\000\000\000\000\001\000\000\000\000\128\000@\000\0000\000\001\160 \000\194\225\000\000\128\000\000\000\000\000\000\000\000\200\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\006\000\000\t\000\000\000\000\128\000\000\000\000\006\000\142\000\000\000\000\000\000\000\000\128\000\004@\000\000\000\000\000\000\024\000\016$\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\0000\184@\nX(\223\196\143@\016\031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\004\000\000\000\000\000\000\000\000\000\000\000@\000\000\000ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\133\194\000R\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2280\132?\001cJE\167\198 \172\b\001\146\203\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006)\000$$\005\024\018+\000\016\005\000\000\002\130\000\012\000\000`\000\0000\184@\000 \000\000\000\000\000\000\b\000\000\000\000\016 \000\000\000@\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\t\t\001F\004\138\192\004\001@\000\000\160\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000\152\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006)\000$$\005\024\018+\000\016\005\000\000\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\021\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\018);\129\244\031\n\195\129\255.\005\222\011~p\240\024\132\000\128\128\004`H\180\000@\021\000\000\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\nX(\223\196\143@\016\031@(\0001\192\132\138N\224}\007\194\176\224\127\203\129w\130\223\156<\194\225\000)`\163\127\018=\000@}\000\160\000\199\002\018);\129\244\031\n\195\129\255.\005\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\"\147\184\031A\240\1728\031\246\224]\233\183\231\015\000\000 \000>\000\192\016\016\015\128\192\b\000\011\004\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\011=\157\237\254/\157s\251\255\183\007\239\237\191\254\248\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004D\007\192\024\002\002\001\240(\001\000\001`\128\192\000\000\128\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\000 \000\000\016\016@\000\000\128\000\000\000\000\000\004\004\000@\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000@\001\000\002\000\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\001\128\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000 \000\002\000\000\004\004\000@\000\000  \000\000\001\000\000\000\000\000\000$\000E\000\b T\135\000\006@\0030\000\004\000\128\016\001\001\000\000@\192\128\000\000\004\000\000\000\000\000\016\000\000\000\000\000@\000\004\000\000\000\002\000\000\000\000\000@@\004\000\000\002\002\000\000\000\016\000\000\000\000\000\002@\004P\000\130\005Hp\000d\0003\000\000@\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\001\000\001\000\006\000\000\000\016\000\000\000\000\000D\000\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000\004\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\128\000\000 \000@\000\000\000\001\000\000\000\000\000\000\000\000\000\000@\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\"\002\000\017\129&\208\001\000P\000\000\b \000\196 D\004\000#\002E\160\002\000\160\000\000\016@\001\136@\b\b\000F\004\139@\004\001@\000\000 \128\004\128\b\160\001\004\002\144\192\000\200\000f\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\t\tr\001\000\006\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\012\000\000h\b\0000\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\128\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\001\000\000\000\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\016\000\000\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\004P\000\130\001H`\000d\0003\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\t\020\157\192\250\015\133a\192\255\151\002\239\005\1918z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\000\128\128\004`H\180\000@\021\000\000\002(\bH\164\238\007\208|+\014\007\252\184\023x-\249\195\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196 \004\004\000#\002E\160\002\000\168\000\000\017@BE'p>\131\225Xp?\229\192\187\193o\206\030\000\000B\000|\001\128  \031\000\128\016\000\031\b\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000@@\000\0160 \000\000\001\000\000\000\000\000\004\000\000\016\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \002\002\000\000\129\129\000\000\000\b\000\000\000\000\000 \000\000\128\000\000\128\000\b\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\016\000\004\012\b\000\000\000@\000\000\000\000\001\000\000\004\000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000U\000\b0T\135\000\004@\003\176\000D\000\136\000\000 \000\000 \000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\bt\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\b\000\000\016\0040\024\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000\004\000\000 \000\000@\016\224`\000\000\002\000@\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000$\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\001\000\000\004\000 \000\000\000\000\000\000\002\000\000\000\000\002\000\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\004\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\0001H\001! \b\192\145X\000\128)\000\000\020\016\000p\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000 \000\000\000\001\133\194\000R\193F\254$z\000\128\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000@\000\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\001\000\000\b\000\000\016\0048\024\000\000\004\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000ap\128\020\176Q\191\137\030\128 >\128P\000cb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\003\020\128\018\018\000\140\t\021\128\b\002\144\000\001A\000\007\000\0004\004\000\024\\ \000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\0000\000\001\160 \000\194\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\219\177\016\016_\197H\000&\014\007N8,\n\r\012\190\017\022\214*\183\2433\208\020\007\220\n\000<p\000\196 \004\004\000#\002E\160\002\000\168\000\000\016@\b\000\000@\000\000\000\000\016\000\000\000\000\000\t\002 ap\128\020\176Q\191\137\030\128 >\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\004\000 \000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000@\000 \001\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000@\002\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001 \002(\000A\000\1640\000\"\000\029\128\000 \000\000\128\b\b\000\002\006\004\000\000\000 \000\000\000\000\000\132\128\b\160\001\006\002\144\224\000\136\000f\000\000\128\000\t\000\017@\002\b\005!\128\001\016\000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\0000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000@\000\002@\004P\000\130\001H`\000D\0003\000\000@\b\004\128\b\160\001\004\002\144\128\000\136\000f\000\000\128\016\006\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\128\000\b\000\000H\000\138\000\016@)\012\000\b\128\006`\000\b\001\000\144\001\020\000 \128R\016\000\017\000\012\192\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\016\000\001\000\000\t\000\017@\002\b\005!\128\001\016\000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\237\216\136\b/\226\164\000\019\007\003\167\028\022\005\006\134_\b\139k\021[\249\153\232\n\003\238\005\000\0308\000  \002\001\000\001\001\004\000\000\b\000\000\000\000\000\000@@\004\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\b\000\000\004\004\000\000\000 \000\000\000\000\000\004\128\b\160\001\004\n\144\224\000\136\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \0000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\192\000\006\128\128\003\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\001\017@\002\b\005!\128\001\016\000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000E\000\b \020\134\000\004@\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\001\000\001\000\006\000\000\000\016\000\000\000\000\000D\000\000\000\000\002\000\012\000\000\000 \000\000\000\000\000\136\000\000\000\000\004\000\b\000\000\000@\000\000\000\000\004\128\b\160\001\132\002\144\224\000\136\000v\000\001\128\000\002 \000\000\000\000\016\000 \000\000\001\000\000\000\000\000\018\000\"\128\004\016\nC\128\002 \001\152\000\002\000\000$\000E\000\b \020\134\000\004@\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\020\000 \128R\028\000\017\000\012\192\000\016\000\001 \002(\000A\000\1640\000\"\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\128\b\186\003\004\012>\144\000\136\000`\000\000\128\000\t\000\017@\002\b\000!\000\001\000\000\204\000\001\000\000\004\000\000\000 \000\000\000\128\000\000\000\000\000\000\b\000\b`\000 \000\000\000\000\004\000\000\000\000\000\000\000\000\000\192\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\b\000\002\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\017@\002\b\016!\128\001\000\000\204\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000 \002\002\000\000\129\129\000\000\000\b\000\000\000\000\000! \002(\000A\128\0048\000 \000\025\128\000 \004\002@\004P\000\130\000\b@\000@\0003\000\000@\b\003\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\b\000\128\128\000 `@\000\000\002\000\000\000\000\000\bH\000\138\000\016`\001\014\000\b\000\006`\000\b\001\000\144\001\020\000 \128\002\016\000\016\000\012\192\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\016\000\001\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\000C\000\002\000\001\152\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\001\001\000\000@\192\128\000\000\004\000\000\000\000\000\016\144\001\020\000 \192\002\028\000\016\000\012\192\000\016\000\001 \002(\000A\000\0040\000 \000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000@@ \0160 \128\000\001\000\000\000\000\000\000\b\000\128\128\000 `A\000\000\002\000\000\000\000\000\000\016\001\001\000\000@\192\128\000\000\004\000\000\000\000\000\016\144\001\020\000 \192\002\028\000\016\000\012\192\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\004\000\004\000\024\000\000\000@\000\000\000\000\001\016\000\000\000\000\b\0000\000\000\000\128\000\000\000\000\002 \000\000\000\000\016\000 \000\000\001\000\000\000\000\000\018\000\"\128\006\016\000C\128\002\000\001\152\000\006\000\000D\000\000\000@\000 \001\128\000\000\000\000\000\000\000\000\128\000\000\000\128\000@\003\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\128\006\000\000\000\000\000\000\000\000\002\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\016\000\000\000\000\000\000\000\000\004\000\000\016 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000@\000\004\000\016\001\"\004\000\000\000\000\000\000\000\000\002\000\000\016\000\000$\bP\016\000\000\001\000 \000\000\004\000\000 \000\000H\016\128 \000\000\002\000@\000\000\006\000\0004\004\000\024\\ \000\016\000\000\000\000\000\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002\000\000\004\001\b\002\000\000\000 \004\000\000\001\000\000\000\000\001\000\128\004\000\000\000\000\000\000\000\000\002\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\001\000\000\b\000\000\016\0048\b\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\001\000\000\004\000 \000\000\000\000\000\000\000\000\016\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\b\000\000@\000\000\128!\128@\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\002\000$A\128\000\000\000\000\000\000\000\000\016\000\001\000\004\000H\129\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\b\000\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\b\000\000\000\004\000\000@\001\000\018 @\000\000\000\000\000\000\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\001\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000\000\000\000\128\000\000\000\000 \000\000\000\000\000\016\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\170\000\016D)\014\002\b\128\007`\004\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\002\000\000\000\001\000\000\016\000@\004\136\016\000\000\000\000\000\000\000\000\t\000\021@\002\b\133!\192A\016\000\236\000\129\000 \016\000\000\128\000\001\000C\128\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\001\160 \000\194\227\000\000\128\000\000\000\000\000\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004\000\000\000\000\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000\004\000\000 \000\000@\016\224`\000\000\002\000@\000\000\b\000\000@\000\000\128!\128@\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004\000\000\b\002\024\004\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000@\016\128 \000\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\nC\128\002 \001\152\000\002\000@$\000E\000\b \020\132\000\004@\0030\000\004\000\128\128\000\000\000\000\000@\003\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\002\000\000 \000\128\t\016 \000\000\000\000\000\000\000\000\018\000\"\128\004\016\nC\128\002 \001\152\000\002\000@$\000E\000\b \020\132\000\004@\0030\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\001\000\012\000\000\000\000\000\000\000\000\004\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\024\000\000\208\018\000ep\128\000@\000\000\000\000\000\000X\004\170\000\016`A\014\000\b\128\007`\000\024\001\000`\000\003\000\000\001\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\128\000\r\001 \006W\b\000\004\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\005\000\000\000\001\000\000\000\000\000@\000\000\000\000\000 \b\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\024\000\000\208\018\000ep\128\000@\000\000\000\000\000\0000\000\001\128\000\000\194\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\192\000\006\128\144\003+\132\000\002\000\000\000\000\000\000\002\192%P\000\131\002\bp\000D\000;\000\000@\b\005\128J\160\001\006\004\016\224\000\136\000v\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000*\128\004\016\000C\128\002\000\001\216\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\020\000 \128\002\024\000\016\000\012\192\000\016\002\001 \002(\000A\000\004 \000 \000\025\128\000 \004\004\000\000\000\000\000\002\000\024\000\000\000\000\000\000\000\000\b\000\000\000\000\000\004\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\0000\000\001\160$\000\202\225\000\000\128\000\000\000\000\000\000\144\001\020\000 \128\002\024\000\016\000\012\192\000\016\002\001 \002(\000A\000\004 \000 \000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\000B\000\002\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\017@\002\b\000!\128\001\000\000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000E\000\b \000\132\000\004\000\0030\000\004\000\128 \000\000\129\000\b\192\002\000\000\000\000\000\000\000\000\000@\000\001\002\000\017\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002@\004P\000\130\001H`\000D\000;\000 @\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\017@\002\b\005!\128\001\016\000\204\000\129\000 \018\000\"\128\004\016\nB\000\002 \001\152\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\020\000 \128\002\016\000\016\000\012\192\000\016\002\000\128\000\002\004\000#\000\b\000\000\000\000\000\000\000\000\001\000\000\004\b\000F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\012@\000l\b\0000\184P\000 \002\000 \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\138\000\016@\001\012\000\b\000\006`\004\bb\000\000\000\000\000\004\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\024\164\000\144\144\004`H\172\000@\020\128\000\n\b\000\016\000\001\000\004\000\200\129\000\000\001\000\000\000\000\000\000\128\000\004\000\000\t\002\020\012\000\000\000@\b\000\000\001\000\000\b\000\000\018\004 \024\000\000\000\128\016\000\000\002\000\000\016\000\000 \b@0\000\000\001\000 \000\000ap\128\020\176Q\191\137>\128 >\128P\000c\128\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\016\000\000\128\000\001\000C\001\128\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\001\000\004\000\200\131\000\000\001\000\000\000\000 \000 \000\002\000\b\001\145\006\000\000\002\000\000\000\000\000\000@\000\004\000\016\003\"\004\000\000\004\000\000\000\000\000\000\128\000\b\000 \006D\b\000\000\b\000\000\000\000\000\003\016\129\016\025\000\140\t6\128\b\002\128\000\000A\001{v\"\002\011\248\169\000\004\193\192\233\199\005\129A\160\012B\004@@\0020$\218\000 \n\000\000\001\004\000\024\132\b\128\128\004`H\180\000@\020\000\000\002\b\0001\b\001\001\000\b\192\145h\000\128(\000\000\004\016\000\000\000\000\000\000\000\000\b\000\b\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\016\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\128\002\000d@\128\000\000\128\000\000\000\000\0000\000\001\160 \000\194\225\000\000\128\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\002\000\000\000@\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\020\128\018\018\000\140\t5\128\b\002\128\000\000A\000\006)\000$$\001\024\018+\000\016\005\000\000\000\130\000\012R\000HH\n0$V\000 \n\000\000\001\004\000\b\000\000\128\002\000d@\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\001\000 \000\002\000\b\001\145\002\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\202E[A\138'L\254\240D\001s( \241\168\005\148\138\182\131\020N\153\253\224\136\002\230PA\227P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000*\128\004\017\nC\129\130 \001\152\001\006\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001T\000 \136R\028\012\017\000\012\192\b0\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\n\160\001\004B\144\224`\136\000f\000A\128P\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000\000\000\b\000\000\128\002\000d@\128\000\000\128\000\000\000\000\000H\000\170\000\016D)\014\006\b\128\006`\004\024\005\000b\016\"\002\000\017\129\"\208\001\000P\000\000\b \000\196 \004\004\000#\002E\160\002\000\160\000\000\016@\000\000\000\000\000\000\000\000 \000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000@\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\208\018\000ep\128\000@\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\b\000\000\016\0048\024\000\000\000\128\016\000\016\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\128!\128\192\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\002\000d@\128\000\000\128\000\000\000\000\000@\000\002\000\000\004\001\014\006\000\000\000 \004\000\004\000\128\000\004\000\000\b\002\024\012\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\r\001\000\006\023\024\000\004\000\000\000\000\000\000\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\b\000\000@\000\000\128!\128\192\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004\000\000\b\002\024\012\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000@\016\128`\000\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\nC\128\002 \001\152\000\002\000@\024\000\000\208\018\000ep\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000 \000\002\000\b\001\145\002\000\000\002\000\000\000\000\000\001 \002(\000A\000\1648\000\"\000\025\128\000 \004\001\138@\t\t\000F\004\138\192\004\001H\000\000\160\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\017@\002\b\005!\128\001\016\000\204\000\001\000 \018\000\"\128\004\016\nB\000\002 \001\152\000\002\000@@\000\000\000\000\000 \001\128\000\000\000\000\000\000\000\000\128\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\138@\t\t\000F\004\138\192\004\001H\000\000\160\128\004\128\b\160\001\004\002\144\192\000\136\000f\000\000\128\016\t\000\017@\002\bb\000\b\128\006`\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \002(\000A\000\164 \000\"\000\025\128\000 \004\002@\004P\000\130\001H`\000D\0003\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\017@\002\bb \020\132\000\006@\0030\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\020\000 \128R\016\000\025\000\012\192\000\016\002\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\138\000\016@\169\014\000\b\128\006`\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@@\004\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\b\000\000\004\004\000\000\000 \000\000\000\000\000\004\128\b\160\001\004\n\144\224\000\136\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\"\128\004\016\nC\000\002\000\001\152\000\002\000\000$\000E\000\b \020\132\000\004\000\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\004\000\000 \000@\000\000\002\000\000\000\016\000\b\128\000\000\000\000@\000\128\000\000\004\000\000\000 \000H\000\138\000\016@\001\012\000\b\000\006`\000\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\018\000\"\129\004\016\000C\000\002\000\001\216\001\018\000@\024\128\000\216\016\000ap\160\000@\004\000@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\020\000 \128\002\024\000\016\000\012\192\b\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\001\016\000\001\000\000\b\000\016\000\000\000\128\000\000\004\000\002 \000\000\000\000\016\000 \000\000\001\000\000\000\b\000\018\000\"\128\004\016\000C\000\002\000\001\152\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\128\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\b\160\001\004\002\144\224\000\136\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000  \002\001\000\001\001\004\000\000\b\000\000\000\000\000\000@@\004\000\000\002\002\b\000\000\016\000\000\000\000\000\000\128\128\b\000\000\004\004\000\000\000 \000\000\000\000\000\000\000\002\000\000\000\bn\128\000\001\020\004$Rw\003\232>\021\135\003\254\\\011\188\022\252\225\232H\164\238\007\208|+\014\007\252\184\023x-\249\195\192b\016\002\002\000\017\129\"\208\001\000T\000\000\b\160!\"\147\184\031A\240\1728\031\242\224]\224\183\231\0150\184@\nX(\223\196\143@\016\031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\225\000)`\163\127\018=\000@}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\011\132\000\165\130\141\252H\244\001\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\016@\002\b\000!\000\001\000\000\200\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000\000\001\128\002\000\000\000\016\000\000\000\000\000\000\016\128?\000`H\000\007\196 \004\b\001\130\139\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000 \000\000\000\016\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\184@\nX(\223\196\143@\016\031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\128\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\b\b\000F\004\139@\004\001P\000\000 \128\000\000\000\000\000\000\000\000 \000\000\000\004\000\018\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\203\225\016ib\171\1273=\001P}\200\160\001\199\000\004\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000,\132A\000\b t\132\004\004@\007 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\016@\002\b\005!\000\001\016\000\200\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \002\b\000A\000\164 \000 \000\024\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\190\017\006\150*\183\2433\208\021\007\220\138\000\028p\025|\"\r,Uo\230g\160*\015\185\020\0008\224\002@\004\016\000\130\001H@\000D\0002\000\000@\000\004\128\b \001\004\002\144\128\000\136\000d\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000A\000\b \020\134\000\004@\003 \000\004\000\000H\000\130\000\016@)\b\000\b\128\006@\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\b \001\004\002\144\192\000\136\000d\000\000\128\000\t\000\016@\002\b\005!\000\001\016\000\200\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    13
  
  and action =
    ((16, "J\214S\162O\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023nO\204\000\000\000\000\022nO\204J\214S\162\022n\000\003\000\000S\162\022n\000\003S\162\022n\000\003\000\000\000\000\000\000\000\000\018^\025p\000\162\003\018\000\000\000\185\004\234\000\000\000\000\000\000\000\000\000\000\022n\000\000H\194\000\000\000\000x\216\000\000O\204J\214\023\238\000/\001Pj \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=\004\020\000\135\000\000\001\212\000\242\000\000\002\140\001\248\006\024\000\000\001\128\002B\006t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0036\000\000\002x^\014\000\000\000\000\005\246\000\000\000\000\000\000\004T\004@\000\000\000\000^\014O\242\022n\023\226cf\022nU\014N4\022nT\172\000\000\022\252\000\000\003:\0062\000\000\005\246\000\000\000\000\000\000\007n\000\000\003:\000\000\006\220|2\128\208j\210]*`\176X\136t\132\000\000\140t\023\220\129n\005\246y~\134\132\000\000`\176\134\132\000\000`\176`\176\000l\001|\000l\004j\000\000\005V\000\000\000\000\007\b\000\000\000\000\000\000`\176\005\246\000\000\000\000]\220^\014\\\248t\132\000\000\000\000Z0\000l\000\000\000\000t\132\005\030^\014\000\000[\030t\132\\\012\000\000\000\000\000\000\b\004\000\000`\176\000\000\021l\139J\000\000^\014\021l^\014\000\000G\248\006\014\005\246\000\000\000\000J\162\000\000\025\248\000\000`~\bl\000\000\005v`\176\b\146\000\000\t\006\000\000\000t\000\000\000\003\006\142\000\000\000\000\000\000\004\156\005\246\000\000^\014\025\242\001\138\003\228\022n\140\174\000\000\000\000\024\014\140\248\000\000\026\144\000\000\006\232\000\000\b\024^\014\000\000\bb\000\000\007v\000l\000l\000\000\000\000^\014\000\021\003\152\000\000^\014\004\164\137D\000\000\000\252\000\000\bF\007\242\129n\002\240\003\n\022\012\000\000\t$\000\000\000\252\000\000\000\000\000\000\000\000o\022\000\000\000L\t.tpt\132\000\252\t\170\000\000\n6t\132c\238\000\000k\130t\132\n\028t\132o\160dz\022n\000\000\000\000\1280\023D\000\000\000\000\000\000\128\188\000\000tp\022n\000\000\000\252\nl\000\000\000\000\000\000{\166I\004\026N\000\252\n\178\000\000\000\000\000\000\000\252\011H\000\000\000\000\000\000\000\000\128\208\000\000t\132O\204J\214N4\022nW\016\022\252\007\224|2\000\000\130\146^\014\007\148^\014k\230u\022\000\000\000\000\011NN\158\000\000\023D\023Dtp\030r\007\130\011\180\000\000\002\012\004d\011\n\011\232\000\000\022n\000\000\000\000u\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\004\030r\022n\000\000\000\000\b\224|2\000\000\130\146\000\000\012:N\158\023Du\022\000\000J\214\000\000\000\000\000\000O\226I8\022n\027l\022nJ\214P\240\022\014Q\240^\218\000\000\003\156\000\000\000\000\004\162\000\000\000\000P\164\003\156\001D\004^\000\t\000\000\000\000\007\172\000\000\023\226\012\146\012j\022n\027lM\152\022n\000\003\000\000\000\000S\162\022n\000\003S\162\022n\000\003\001\000\000\003S\174\022n\131\000\000\000^\218|\162\129T\003\018\000\000\012\182\000\000\023\140^\014\026^\005n^\218S\174\022n^\218\000\000\000l\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\134M\206\000\000\000\000\000\000\002\006\028n|\162\000\000S\204\022n^\218\000\000\000\000jr^\218\137\180^\218\137\234\000\000^\218\000\000\000\000_\212\000\000\000\000K,\000\000^\218\137\252^\218\138:\001P\000\000\129\236\000\000\012\196\000\000V\240}:\000\000\000\000\000\000\026\190\005\174\003\180\007\022\000\000\000\000\000\000\000\000\012\016\000\000a\\\t \012\172\000\182^\014\004\198\012\246\000\000\000\000\t4\012\172\007\192\000\003^\218a\168\002\246\000\000^\218W<^\014\005\210\007\192\r \000\000\000\000\000\000P\164\002<\002<\000\000\r&p8^\218\000\000\000\003p\196S\150I8\022n\027l\000/\002\196\000\t\000\000\012v\023\226\023\226\000/\002\196\t\134\000\000\r\n\023\226\000\000q0\n\006\022\252\003\018\t\136\136\182\000\000^\014lp^\014e\006l\248\000\003\005\004\000le\144\004d\000lf\026\000\000q\186\n\006\000\000\023\226rB\000\000\t\180\003\184f\164\000\000\000\000\000\000\000\000\000\000\025\030\000\000\028$\000\000\r\018\027l\000\000b\220M\152\000\000\025\182\000\000\023\226\028\232\000\000\000\000\000\000bR\000\000\000$\000\003J\214L\214\t\006\003\194\000\003\024fR\170\018^\000\003S\162\022n\018^S\162\022nK\214S\162\022n\000\003S\204\022n|\162^\218K,\000\003S\204\022n}\202Q\164\002<\rLu\174\000\003S\204\022n^\218\027\162\000\003S\204\022n^\218\028\164\000\003\018^\000\000\000\000\000\000\000\000\002\002\0256I\204\000\000TnU:I8\022n\027l\b \023\226\029&\000\000V\006V\210\131\142T\002^\014\t\218\000\003S\162\022n\018^\024f\018^\003\014\016.\000\003\000\003\018^\r\020\000\000\r&\000\000\018^\004\026\r(\000\000\031t\000\003\rh\000\000\028n\000\003\019`\025h\000\000\000\000\000\000\000\000\007<\000\003\000\000\000\000\t\232\000\003\000\000\029p\000\003\030r\000\003\031t\000\000\020b\026j\000\003\000\000\000\003O\204\000\003\000\000\000\000\000\003 v\000\003!x\000\003\"z\000\003#|\000\003$~\000\003%\128\000\003&\130\000\003'\132\000\003(\134\000\003)\136\000\003*\138\000\003+\140\000\003,\142\000\003-\144\000\003.\146\000\003/\148\000\0030\150\000\0031\152\000\0032\154\000\0033\156\022n^\218WV^\014\n\148\000\003\000\000\029\166\000\003\000\000^\218\030\168^\218\031\170^\218 \172\001P\000\000\000\000\000\000!\174^\218\"\176u\022\000\000\000\000\000\0004\158\000\003\rt\000\000\000\003r\250\000\000\tr\017:\000\003\rz\000\000g\022K\214\000\000\000\003\r~\000\000\000\003\r\136\000\000\000\000\018^\005&\018F\000\003\r\144\0062\000\0035\160\000\003\r\156\0074\000\0036\162\000\003\r\178\b6\000\0037\164 v\000\003\r\190\t8\000\0038\166\000\003\r\194\n:\000\0039\168\000\003zP\011<\000\003:\170\t\184\019H\000\003\r\200\012>\000\003;\172\000\003\r\198\r@\000\003<\174\000\003\r\198\014B\000\003=\176\015D\000\003>\178\016F\021d\000\000\000\000\000\000\r\206\000\000\000\003\r\216\000\000\000\003\r\230\000\000\000\000#\178\000\003\000\000\nJ\000\003\000\000^\218\000\000\000\000z\236\r\242\000\000L\214\000\000\r.\000\000W\168\000\000\014\016\000\000\t\006\r\162\000\000\024f\027N\003\018\000\000\023\"^\014%t^\014%\140^\014&v\000\000\006&\0070\005p\000\000\000\000\014\"\000\000\001z\025hY\004\000\000\t\216\000\000\000\000\000\003\rv\000\003\r\132\000\000\r\134\000\003\r\140\000\000\000\003\t\216\000\003\r\144\000\003\r\158\000\000\000\000R\164\002<\014Tu\174t\132\028\002\000\003\000\000\000\000u\174\000\000\000\000\004\162W\238\000\000^\014\007\148\000\000\000\000u\174\000\000\0146\000\003\000\000\000\003\000\000\000\000\000\000?\180^\218\000\000\000\000\014x\000\003@\182\000\003A\184\000\000\r\202\000\000\027lg\022\000\000\017R\014h\000\000r\180\n\156\n\180\000\000\000\000\r\250\000\000\014x\000\000\000\000\r\186\000\000\000\000\022n\027l\004\150\000\003\000\000\001D\004^\000\t\002\196\027l~4\023\226\024\226\027l~\192\014\026\000\003\000\000\002\196\000\000J\154\022n\023D\028\166\006X\014\028\000\003\000\000\022n\131\000^\218u\022\000\000\000\000\014\b\000\003\000\000\000\000p8\000\000\000\000\000\000\000\000\014\186\000\000\000\000\139\202\002<\014\018^\014\n\240\000\003\000\000\n\186^\014\011\150\000\003\000\000\014.\000\003\000\000\000\000u\022\000\000B\186\014\246|\162C\188\014\248|\162D\190r\180\000\000\023\226\029\234\000\000\023\226!\132\000\000\023\226\030(\000\000m\130\030\236\000\000Z\192\000\000^\014\t\228\000\000Q\236\022\\\000O\000\252\014\144\000\240\000\003\000\000\0146\000\003\000\000P\236\000\000\006~\n\134\000\000\011\132\000\000\014\160\014,^\014L\238\014\182\007$\000\003\000\000\014`\000\003\000\000\022\148\000\212\007F\014\216v:\139\238\002<\014v^\014\011\156\000\003\000\000\011\024^\014J\238\014\144\000\003\000\000K\238\000\000P\236\000\000\006\166\011$\000\000\011\154\000\000\014\238\014t\129n\000\000\014\254v\198\140N\002<\014\144^\014\011\204\000\003\000\000\014\172\000\003\000\000\000\000O\204J\214^\218\025\158\000\003\000\000\003\004\025p\000\162\005\246\133n\023\226\130Xu\022\000\000\004^\002\172\000\t\002\196u\022\135\132\004^\000\t\002\196u\022\135\132\000\000\000\000\002\196u\022\000\000O\204J\214I8\022n\027lu\022\000\000\023\238\000/\001P\014\142^\014\011\242\015b\133\210\000\000u\022\000\000J\154\022n\023D\127$\030r\022nu\022\000\000\022nu\022\000\000n\004\140~\003\170\001D\000\162\000l\130\146\000\000\000\162\000l\130\146\000\000\003\004\004^\005\030\025\228\000l\130\146\000\000\000\t\014\166\023\226u\022yf\004^\000\t\014\168\023\226u\022yf\000\000\000\000\005\190\000\003\\\188\000\000\023\226\136\012\\\188\000\000\005\190\000\000O\242\022n\023\226u\022\000\000J\154\022n\023Dtp\027\"\027\"\007\002\007\222\000\000\012&\003:\n\132\000\000\015.\014\214L\168\022\014R\230^\014\011\156\000\000Y\182\003\206\b\130\011\250\000\000\012\134\000\000\015>\014\188^\014V\030\000\000\000\212\b\170\012\140\000\000\012\142\000\000\015H\014\208\129nP\236\000\000\022:L\168\015r\004\182\000\162\000\003\003\166L\168^\014\n\196\000l\000\000^\014\b\192\007\002\000\000\000\000sX\000\000\000\003\n`L\168s\228V\030\000\000\022n^\014\012\152^\014O,P\236\000\000\015\004\000\000P\236\000\000\000\000Y\182\000\000u\022\136H\007\002\007\222\012&\015~\015(L\168u\022\136H\000\000\000\000\007\002\007\222\012&\015\140\015\n_>XDt\132\015\158_>`\176\007\002\015\160_>t\132\015\162_>wPw\216\000\000\134V\000\000\000\000t\132\138\228\007\002\007\222\012&\015\162\015._>t\132\138\228\000\000\000\000\000\000\140~\000\000\000\000\000\000\000\000\000\000\000\000\\\188\000\000\136\172\022,\022\252\015\184|2\000\000\130\146\136\172\000\000\000\000\139\026\022,\022\252\015\190\015Z\128\208\000\000t\132\139\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011p\027\"\007\002\007\222\012&\015\232xZX\238\022\014Q\240Q\236\022n\000\003P\236\000\000\022:\022:X\238X\238{\132O\204\022n\131\000^\218\022\154\000\000\005\134\000\162\000\003\011\022X\238^\014\012\012\003\018\000\000\022n^\218xZX\238\011DX\238\000\000M\206N\200\000\000g\184\000\000\000\000h^\000\000\000\000i\004\000\003\011\202X\238i\170\131\000^\218\022\154\000\000\005L\000\000_>\016,\000\000I\204\015\240\000\000P\236\000\000X\238I\204P\236\000\000\022n^\014P\236\000\000\015\152\000\000P\236\000\000\000\000Q\236\000\000\131\248_>\015\164X\238\132\128xZ\000\000u\022\1374\007\002\007\222\012&\016\002xZu\022\1374\000\000\000\000\000\000xZS\174\000\000\000\000\000\000\000\000\000\000\134\150\000\000\135 u\022\000\000\136\172\000\000\000\000\000\000\000\000u\022xZ\000\000\016D\000\000\134\150\000\000\135 \016N\000\000\015\184\000\000\015\204\000\000u\022\000\000\022n\027lu\022\000\000u\022xZ\000\000\000\000\016j\000\000\000\000\016\\N\158\027\196\\\188\000\000\000\000\000\000\000\000\t\012\132\228\128\208\000\000t\132\000\000\016hN\158\027\196\\\188\000\000\015\224\000\000\031*\000\000u\022\000\000\016\144\000\000\000\000I8\022n\027l\029\144\000\000\023\226\031\238\000\000\006j\000\000\016\150\000\000\016\210|\162E\192F\194|\162G\196\000\003\000\000\000\003\000\000\016\n\000\003\016\020\000\000\016\200\000\000\000\003\016\026\000\003\016 \000\000\0164\000\000\000\000U\014\0166\000\000\000\000\029pj \016\226\000\000\000\000\000\000\012z\003\184nn\016\242\000\000\000\000\000\000\000\000\000\000\000\000\016Z\000\000\030r\000\000\016`\000\000^\014\000\000\tn\000\000\000\003\016|\000\000\000\000\000l\000\000\b\130\000\000\000\003\000\000\b\234\000\000\n\168\000\000\016\138\000\000^\218\025\158\000\000\000\000\005\206\016\140\000\000\000\000\016~\t\130K\214\005\246\127\204\000\000\000\000\000\000\000\000\000\000Z\148\000\000\000\000\0172\000\000o\152\000\000\r\022\0176\000\000\017<\000\000L\214L\214[\130[\130\000\000\000\000u\022[\130\000\000\000\000\000\000u\022[\130\016\156\000\000\016\166\000\000"), (16, "\b\249\000\006\000\246\0072\0076\b\249\004M\001\002\b\249\001\006\001\018\001\030\b\249\b\165\b\249\004M\001\"\b\249\001F\t~\b\249\b\249\b\249\001\222\b\249\b\249\b\249\001&\000\238\001*\004M\004M\001.\b\249\006\210\006\214\012R\b\249\001\246\b\249\002\006\006\242\001\230\0012\000\238\b\249\b\249\007b\007f\b\249\007j\007v\001f\007\130\007\138\t\006\t^\000\238\b\249\b\249\001z\001n\002B\n\134\b\249\b\249\b\249\n\138\n\142\n\154\n\170\nR\007\214\b\249\b\249\b\249\b\249\b\249\b\249\b\249\b\249\b\249\n\194\004\"\b\249\000\238\b\249\b\249\b\249\004M\n\206\n\230\011\006\011\026\007\226\b\249\005\002\b\249\b\249\b\249\n\130\b\249\b\249\b\249\b\249\n\162\b\165\n\166\002\230\016B\b\249\004M\b\249\b\249\003\157\b\249\b\249\b\249\b\249\b\249\b\249\007\230\n\182\b\249\b\249\b\249\011.\003N\011\146\012)\b\249\b\249\b\249\b\249\012)\004M\012)\012)\004M\004\158\012)\012)\012)\012)\006Y\012)\012)\004&\000\238\012)\012)\012)\003\149\012)\012)\012)\012)\004\142\012)\012)\004M\012)\012)\012)\012)\012)\012)\012)\012)\002\233\002\233\004\206\012)\000\238\012)\012)\012)\012)\012)\001\242\005\213\012)\012)\012)\003\178\012)\007\134\012)\012)\012)\001\165\003\157\012)\012)\012)\012)\012)\012)\012)\000\n\012)\012)\012)\012)\012)\012)\012)\012)\012)\012)\012)\b\226\012)\012)\001\226\012)\012)\012)\003u\004M\018J\001\142\001v\012)\012)\012)\012)\012)\012)\002\233\012)\012)\012)\012)\012)\012)\012)\015F\012)\012)\015N\012)\012)\003\"\012)\012)\012)\012)\012)\012)\012)\012)\012)\012)\012)\012)\012)\001\238\001\165\012)\012)\012)\012)\001\165\000\238\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\254\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\004M\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\015\130\003:\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\005\245\001\165\001\165\001\165\001\165\001\165\002\014\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\tB\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\226\0072\0076\003u\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\019\154\011F\001\165\b\022\001\165\001\165\006R\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\001\165\t\018\001\165\001\165\001\165\001\165\001\165\t\241\002\233\002\233\019r\005\245\t\241\004M\t\241\t\241\001\002\004M\t\241\t\241\t\241\t\241\tz\t\241\t\241\002\233\004\230\t\241\t\241\t\241\003\137\t\241\t\241\t\241\t\241\012\017\t\241\t\241\000\n\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\022\t2\0022\t\241\002:\t\241\t\241\t\241\t\241\t\241\012\017\000\238\t\241\t\241\t\241\001>\t\241\002\142\t\241\t\241\t\241\002\233\016\238\t\241\t\241\t\241\t\241\t\241\t\241\t\241\002\150\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\016\246\t\241\t\241\002\233\t\241\t\241\t\241\b\182\001\002\004\182\n\026\006\141\t\241\t\241\t\241\t\241\t\241\t\241\004M\t\241\t\241\t\241\t\241\t\241\011\170\t\241\004\185\011\218\t\241\006\241\t\241\t\241\000\n\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\004V\t\241\t\241\t\241\t\241\t\241\003\185\000\238\001>\027\026\002N\003\185\004M\003\185\003\185\007\n\002\233\003\185\003\185\003\185\003\185\004M\003\185\003\185\001\226\003u\003\185\003\185\003\185\021\206\003\185\003\185\003\185\003\185\000\238\003\185\003\185\007\014\003\185\003\185\003\185\003\185\003\185\003\185\003\185\003\185\004M\004M\006\241\003\185\001J\003\185\003\185\003\185\003\185\003\185\004\186\t\234\003\185\003\185\003\185\n\150\003\185\004M\003\185\003\185\003\185\004\237\003*\003\185\003\185\003\185\003\185\003\185\003\185\003\185\020R\003\185\003\185\003\185\003\185\003\185\003\185\003\185\003\185\003\185\003\185\003\185\002Z\011\162\011\210\004M\003\185\003\185\003\185\006V\006\153\b\169\003\"\004>\003\185\003\185\003\185\003\185\003\185\003\185\000\238\003\185\003\185\003\185\003\185\003\185\011\170\003\185\003\161\011\218\003\185\001J\003\185\003\185\nb\169\003\161\003\173\003\173\003\173\004M\003\173\007\001\003\173\003\173\003\173\007\001\b\237\003\173\003\173\003\173\003\173\003\173\003\173\003\173\021\194\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\t\226\011\162\011\210\000\238\003\173\003\173\003\173\b\178\001>\001\002\t\234\004\181\003\173\003\173\003\173\003\173\003\173\003\173\t\238\003\173\003\173\003\173\003\173\003\173\011\170\003\173\004\r\011\218\003\173\002J\003\173\003\173\000\238\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\003\173\tz\003\173\003\173\003\173\003\173\003\173\t\149\007\198\001\142\001v\024\146\t\149\002\162\t\149\t\149\006a\003\222\t\149\t\149\t\149\t\149\006\241\t\149\t\149\000\238\006\241\t\149\t\149\t\149\002N\t\149\t\149\t\149\t\149\002\166\t\149\t\149\004\n\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\024\006\020\202\018j\t\149\002\002\t\149\t\149\t\149\t\149\t\149\026~\004\r\t\149\t\149\t\149\006i\t\149\r\222\t\149\t\149\t\149\020\214\019\002\t\149\t\149\t\149\t\149\t\149\t\149\t\149\004.\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\018r\t\149\t\149\000\238\t\149\t\149\t\149\019\n\002\018\005\213\002B\n\150\t\149\t\149\t\149\t\149\t\149\t\149\004M\t\149\t\149\t\149\t\149\t\149\t\149\t\149\004M\t\149\t\149\007\229\t\149\t\149\0032\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\t\149\b\141\t\145\t\149\t\149\t\149\t\149\t\145\b\186\t\145\t\145\002\202\006\217\t\145\t\145\t\145\t\145\015F\t\145\t\145\015N\015j\t\145\t\145\t\145\b\233\t\145\t\145\t\145\t\145\004M\t\145\t\145\003>\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\006.\000\238\004M\t\145\003N\t\145\t\145\t\145\t\145\t\145\004~\002\186\t\145\t\145\t\145\004\154\t\145\r\242\t\145\t\145\t\145\001n\007\229\t\145\t\145\t\145\t\145\t\145\t\145\t\145\016\"\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\007>\t\145\t\145\012\014\t\145\t\145\t\145\021\"\b\141\018\146\007\t\002B\t\145\t\145\t\145\t\145\t\145\t\145\b\193\t\145\t\145\t\145\t\145\t\145\t\145\t\145\015F\t\145\t\145\015N\t\145\t\145\000\238\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\t\145\003\174\t\153\t\145\t\145\t\145\t\145\t\153\r\002\t\153\t\153\012M\005\254\t\153\t\153\t\153\t\153\002\190\t\153\t\153\006\018\004\170\t\153\t\153\t\153\012M\t\153\t\153\t\153\t\153\006F\t\153\t\153\004\134\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\002\nR\021b\t\153\004\146\t\153\t\153\t\153\t\153\t\153\007B\004\002\t\153\t\153\t\153\000\238\t\153\014\006\t\153\t\153\t\153\004\214\021\142\t\153\t\153\t\153\t\153\t\153\t\153\t\153\004\018\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\021j\t\153\t\153\004\218\t\153\t\153\t\153\021\150\003\"\005\221\002B\b\145\t\153\t\153\t\153\t\153\t\153\t\153\003\178\t\153\t\153\t\153\t\153\t\153\t\153\t\153\011j\t\153\t\153\007\237\t\153\t\153\002B\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\t\153\004\026\t\137\t\153\t\153\t\153\t\153\t\137\000\238\t\137\t\137\006\166\027\127\t\137\t\137\t\137\t\137\004\242\t\137\t\137\003.\004\198\t\137\t\137\t\137\b\189\t\137\t\137\t\137\t\137\n\146\t\137\t\137\026\014\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\b\218\b\242\003\178\t\137\001J\t\137\t\137\t\137\t\137\t\137\b\250\017~\t\137\t\137\t\137\b\145\t\137\014\030\t\137\t\137\t\137\016\166\027\143\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\234\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\005*\t\137\t\137\003=\t\137\t\137\t\137\001\142\001v\tz\015\146\000\238\t\137\t\137\t\137\t\137\t\137\t\137\003\178\t\137\t\137\t\137\t\137\t\137\t\137\t\137\018.\t\137\t\137\t\178\t\137\t\137\003\"\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\t\137\027_\t\141\t\137\t\137\t\137\t\137\t\141\r\142\t\141\t\141\001F\t\190\t\141\t\141\t\141\t\141\0052\t\141\t\141\000\238\t\218\t\141\t\141\t\141\000\238\t\141\t\141\t\141\t\141\t\198\t\141\t\141\005J\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\012\030\014R\n\022\t\141\001F\t\141\t\141\t\141\t\141\t\141\005\146\011\142\t\141\t\141\t\141\015\150\t\141\0142\t\141\t\141\t\141\0212\002v\t\141\t\141\t\141\t\141\t\141\t\141\t\141\016\158\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\018n\t\141\t\141\005\178\t\141\t\141\t\141\014\230\r\002\012U\004>\021\218\t\141\t\141\t\141\t\141\t\141\t\141\022\006\t\141\t\141\t\141\t\141\t\141\t\141\t\141\002N\t\141\t\141\000\238\t\141\t\141\n\146\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\141\t\234\t\169\t\141\t\141\t\141\t\141\t\169\b\209\t\169\t\169\014\238\004>\t\169\t\169\t\169\t\169\r\022\t\169\t\169\b\213\019\006\t\169\t\169\t\169\002\190\t\169\t\169\t\169\t\169\000\238\t\169\t\169\005\198\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\018v\012a\006*\t\169\017\162\t\169\t\169\t\169\t\169\t\169\007\193\019\014\t\169\t\169\t\169\021\226\t\169\014F\t\169\t\169\t\169\017\150\024\018\t\169\t\169\t\169\t\169\t\169\t\169\t\169\021R\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\006J\t\169\t\169\024:\t\169\t\169\t\169\005\217\t\234\018\218\000\238\006Z\t\169\t\169\t\169\t\169\t\169\t\169\007\233\t\169\t\169\t\169\t\169\t\169\t\169\t\169\006^\t\169\t\169\000\238\t\169\t\169\000\238\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\t\169\024\030\t\161\t\169\t\169\t\169\t\169\t\161\r\002\t\161\t\161\000\238\021f\t\161\t\161\t\161\t\161\017\170\t\161\t\161\018\206\005\229\t\161\t\161\t\161\024r\t\161\t\161\t\161\t\161\000\238\t\161\t\161\006\186\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\021n\003\005\019>\t\161\021\154\t\161\t\161\t\161\t\161\t\161\007J\t\234\t\161\t\161\t\161\021*\t\161\014b\t\161\t\161\t\161\020\006\007N\t\161\t\161\t\161\t\161\t\161\t\161\t\161\021\146\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\003\"\t\161\t\161\007\178\t\161\t\161\t\161\005\225\021\226\b\146\007\245\007\241\t\161\t\161\t\161\t\161\t\161\t\161\b\206\t\161\t\161\t\161\t\161\t\161\t\161\t\161\b\222\t\161\t\161\000\238\t\161\t\161\b\238\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\t\161\004e\t\157\t\161\t\161\t\161\t\161\t\157\t.\t\157\t\157\tN\027\022\t\157\t\157\t\157\t\157\022\"\t\157\t\157\t\134\t\162\t\157\t\157\t\157\nF\t\157\t\157\t\157\t\157\n\254\t\157\t\157\011\190\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\011\198\011\214\011\230\t\157\005\226\t\157\t\157\t\157\t\157\t\157\rz\r\154\t\157\t\157\t\157\r\178\t\157\014v\t\157\t\157\t\157\r\190\r\218\t\157\t\157\t\157\t\157\t\157\t\157\t\157\r\238\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\014\002\t\157\t\157\014\026\t\157\t\157\t\157\014.\014^\014r\014\134\014\182\t\157\t\157\t\157\t\157\t\157\t\157\014\194\t\157\t\157\t\157\t\157\t\157\t\157\t\157\014\206\t\157\t\157\015\002\t\157\t\157\015\018\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\t\157\015\"\t\165\t\157\t\157\t\157\t\157\t\165\015.\t\165\t\165\015z\015\162\t\165\t\165\t\165\t\165\015\170\t\165\t\165\015\178\015\186\t\165\t\165\t\165\015\206\t\165\t\165\t\165\t\165\015\214\t\165\t\165\015\234\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\0166\016b\016z\t\165\016\146\t\165\t\165\t\165\t\165\t\165\016\174\016\182\t\165\t\165\t\165\016\194\t\165\014\138\t\165\t\165\t\165\017\n\0172\t\165\t\165\t\165\t\165\t\165\t\165\t\165\017V\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\017z\t\165\t\165\017\142\t\165\t\165\t\165\017\182\017\210\017\222\018F\018V\t\165\t\165\t\165\t\165\t\165\t\165\018~\t\165\t\165\t\165\t\165\t\165\t\165\t\165\018\130\t\165\t\165\018\142\t\165\t\165\018\158\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\t\165\018\182\t\225\t\165\t\165\t\165\t\165\t\225\018\198\t\225\t\225\018\230\019\022\t\225\t\225\t\225\t\225\019\026\t\225\t\225\019&\0196\t\225\t\225\t\225\019J\t\225\t\225\t\225\t\225\019\254\t\225\t\225\020\n\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\020\154\020\178\021:\t\225\021>\t\225\t\225\t\225\t\225\t\225\021v\021z\t\225\t\225\t\225\021\162\t\225\014\150\t\225\t\225\t\225\021\166\021\190\t\225\t\225\t\225\t\225\t\225\t\225\t\225\0226\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\022f\t\225\t\225\022j\t\225\t\225\t\225\022\142\022\146\022\162\022\178\022\190\t\225\t\225\t\225\t\225\t\225\t\225\022\242\t\225\t\225\t\225\t\225\t\225\t\225\t\225\022\246\t\225\t\225\023B\t\225\t\225\023j\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\023n\003\169\t\225\t\225\t\225\t\225\003\169\023\178\003\169\003\169\024\154\024\166\003\169\003\169\003\169\003\169\024\214\003\169\003\169\024\250\025\"\003\169\003\169\003\169\025\142\003\169\003\169\003\169\003\169\025\162\003\169\003\169\025\170\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\011\174\025\178\025\226\003\169\025\238\003\169\003\169\003\169\003\169\003\169\026&\026:\003\169\003\169\003\169\014\186\003\169\014\198\003\169\003\169\003\169\026R\026\134\003\169\003\169\003\169\003\169\003\169\003\169\003\169\026\142\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\026\182\011\162\011\210\026\190\003\169\003\169\003\169\026\198\026\210\026\218\026\227\026\243\003\169\003\169\003\169\003\169\003\169\003\169\027\006\003\169\003\169\003\169\003\169\003\169\011\170\003\169\027\"\011\218\003\169\027?\003\169\003\169\027O\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\027k\003\169\003\169\003\169\003\169\003\169\t}\027\159\027\187\027\198\027\251\t}\028\015\t}\t}\028\023\028S\t}\t}\t}\t}\028[\t}\t}\000\000\000\000\t}\t}\t}\000\000\t}\t}\t}\t}\000\000\t}\t}\000\000\t}\t}\t}\t}\t}\t}\t}\t}\r\146\000\000\000\000\t}\000\000\t}\t}\t}\t}\t}\000\000\000\000\t}\t}\t}\r\170\t}\r\182\t}\t}\t}\000\000\000\000\t}\t}\t}\t}\t}\t}\t}\000\000\t}\t}\t}\t}\t}\t}\t}\t}\t}\t}\t}\000\000\011\162\011\210\000\000\t}\t}\t}\000\000\000\000\000\000\000\000\000\000\t}\t}\t}\t}\t}\t}\000\000\t}\t}\t}\t}\t}\011\170\t}\000\000\011\218\t}\000\000\t}\t}\000\000\t}\t}\t}\t}\t}\t}\t}\t}\t}\t}\t}\t}\t}\000\000\t}\t}\t}\t}\t}\002\001\000\000\000\000\000\000\000\000\002\001\000\000\001\002\002\001\000\000\000\000\001\030\002\001\011\186\002\001\000\000\001\"\002\001\000\000\000\000\002\001\002\001\002\001\000\000\002\001\002\001\002\001\001&\000\000\001*\011\194\000\000\001.\002\001\002\001\002\001\002\001\002\001\011\202\002\001\r\210\000\000\000\000\0012\000\000\002\001\002\001\002\001\002\001\002\001\000\000\000\000\001f\001v\002\001\r\230\002\001\r\250\002\001\002\001\001z\000\000\000\000\n\134\002\001\002\001\002\001\n\138\n\142\n\154\000\000\r\198\007\214\002\001\002\001\002\001\002\001\002\001\002\001\002\001\002\001\002\001\000\000\011\162\011\210\000\000\002\001\002\001\002\001\000\000\000\000\000\000\000\000\000\000\007\226\002\001\005\002\002\001\002\001\002\001\000\000\002\001\002\001\002\001\002\001\n\162\r\206\n\166\000\000\014\014\002\001\000\000\002\001\002\001\000\000\002\001\002\001\002\001\002\001\002\001\002\001\007\230\n\182\002\001\002\001\002\001\011.\003N\000\000\t\205\002\001\002\001\002\001\002\001\t\205\000\000\001\002\t\205\000\000\000\000\001\030\t\205\t\205\t\205\000\000\001\"\t\205\000\000\000\000\t\205\t\205\t\205\000\000\t\205\t\205\t\205\001&\000\000\001*\t\205\000\000\001.\t\205\t\205\t\205\t\205\t\205\t\205\t\205\014V\000\000\000\000\0012\000\000\t\205\t\205\t\205\t\205\t\205\000\000\000\000\001f\001v\t\205\014j\t\205\014~\t\205\t\205\001z\000\000\000\000\n\134\t\205\t\205\t\205\n\138\n\142\n\154\000\000\t\205\007\214\t\205\t\205\t\205\t\205\t\205\t\205\t\205\t\205\t\205\000\000\t\205\t\205\000\000\t\205\t\205\t\205\000\000\000\000\000\000\000\000\000\000\007\226\t\205\005\002\t\205\t\205\t\205\000\000\t\205\t\205\t\205\t\205\n\162\t\205\n\166\000\000\t\205\t\205\000\000\t\205\t\205\000\000\t\205\t\205\t\205\t\205\t\205\t\205\007\230\n\182\t\205\t\205\t\205\011.\003N\000\000\t\201\t\205\t\205\t\205\t\205\t\201\000\000\001\002\t\201\000\000\000\000\001\030\t\201\t\201\t\201\000\000\001\"\t\201\000\000\000\000\t\201\t\201\t\201\000\000\t\201\t\201\t\201\001&\000\000\001*\t\201\000\000\001.\t\201\t\201\t\201\t\201\t\201\t\201\t\201\000\000\000\000\000\000\0012\000\000\t\201\t\201\t\201\t\201\t\201\000\000\000\000\001f\001v\t\201\000\000\t\201\000\000\t\201\t\201\001z\000\000\000\000\n\134\t\201\t\201\t\201\n\138\n\142\n\154\000\000\t\201\007\214\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\t\201\000\000\t\201\t\201\000\000\t\201\t\201\t\201\000\000\000\000\000\000\000\000\000\000\007\226\t\201\005\002\t\201\t\201\t\201\000\000\t\201\t\201\t\201\t\201\n\162\t\201\n\166\000\000\t\201\t\201\000\000\t\201\t\201\000\000\t\201\t\201\t\201\t\201\t\201\t\201\007\230\n\182\t\201\t\201\t\201\011.\003N\000\000\002E\t\201\t\201\t\201\t\201\002E\000\000\001\002\002E\000\000\000\000\001\030\002E\011\186\002E\000\000\001\"\002E\000\000\000\000\002E\002E\002E\000\000\002E\002E\002E\001&\004M\001*\011\194\000\000\001.\002E\002E\002E\002E\002E\011\202\002E\000\000\000\000\000\000\0012\003\190\002E\002E\002E\002E\002E\000\000\000\000\001f\001v\002E\000\000\002E\000\000\002E\002E\001z\000\000\000\000\n\134\002E\002E\002E\n\138\n\142\n\154\000\238\r\198\007\214\002E\002E\002E\002E\002E\002E\002E\002E\002E\000\000\000\000\002E\000\000\002E\002E\002E\000\000\004M\000\000\004M\000\000\007\226\002E\005\002\002E\002E\002E\000\000\002E\002E\002E\002E\n\162\004M\n\166\000\000\004M\002E\004M\002E\002E\004M\002E\002E\002E\002E\002E\002E\007\230\ne\000\000\004M\002\142\004M\004M\000\000\000\000\007\017\000\000\004M\005\014\007\017\000\000\018:\001\030\002\150\004M\004M\004M\002\154\011\253\004M\004M\004M\004M\000\161\000\161\004M\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\000\000\000\161\000\161\018\170\000\000\000\161\000\161\000\000\000\000\000\161\000\161\004e\000\161\000\161\000\161\000\161\000\161\005\018\000\161\000\000\000\161\000\161\006\233\000\000\000\161\000\161\006\233\000\161\000\161\000\161\000\000\000\161\005\022\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\000\000\161\000\161\007\017\005\021\000\161\000\161\002v\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\005\002\005\021\002z\015F\000\000\000\161\015N\000\161\000\000\000\161\001&\000\000\002B\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\000\161\000\161\000\000\000\n\004j\000\161\007F\0066\000\161\000\000\000\161\005\021\000\222\t\138\002N\000\000\000\161\006\233\000\000\002\233\002\233\001z\000\161\000\161\000\161\000\161\000\000\0029\000\161\000\161\000\161\000\161\0029\002\233\001\002\0029\002\230\007\186\001\030\0029\000\000\0029\005\021\001\"\0029\000\000\005\021\0029\0029\0029\t\142\0029\0029\0029\001&\000\000\001*\000\000\000\000\001.\0029\0029\0029\0029\0029\000\000\0029\003v\000\000\000\000\0012\004\241\0029\0029\0029\0029\0029\002\242\000\000\001f\n\158\0029\000\000\0029\000\000\0029\0029\001z\000\000\t\174\n\134\0029\0029\0029\n\138\n\142\n\154\000\000\000\000\007\214\0029\0029\0029\0029\0029\0029\0029\0029\0029\000\000\011\162\011\210\000\000\0029\0029\0029\000\000\000\000\000\000\t\174\000\000\007\226\0029\005\002\0029\0029\0029\000\000\0029\0029\0029\0029\n\162\011\170\n\166\n\006\011\218\0029\001J\0029\0029\n6\0029\0029\0029\0029\0029\0029\007\230\n\182\0029\0029\0029\011.\003N\000\238\002Q\0029\0029\0029\0029\002Q\000\000\001J\002Q\n\006\000\000\002\233\002Q\000\000\002Q\000\000\000\000\002Q\000\000\000\000\002Q\002Q\002Q\000\000\002Q\002Q\002Q\011J\001v\000\238\019f\000\000\016\254\002Q\002Q\002Q\002Q\002Q\015\006\002Q\000\n\000\000\015\022\015&\0152\002Q\002Q\002Q\002Q\002Q\000\000\007\197\011J\015\134\002Q\000\000\002Q\002\233\002Q\002Q\000\000\n^\000\000\015\006\002Q\002Q\002Q\015\022\015&\0152\002\233\000\000\000\000\002Q\002Q\002Q\002Q\002Q\002Q\002Q\002Q\002Q\000\000\011\162\011\210\000\000\002Q\002Q\002Q\000\000\007\217\nR\000\000\000\238\007\217\002Q\b\193\002Q\002Q\002Q\000\000\002Q\002Q\002Q\002Q\000\238\011\170\000\000\000\000\011\218\002Q\000\000\002Q\002Q\005\157\002Q\002Q\002Q\002Q\002Q\002Q\000\000\005\014\002Q\002Q\002Q\001\030\000\000\027\171\002M\002Q\002Q\002Q\002Q\002M\007\217\000\000\002M\000\238\000\000\000\000\002M\bn\002M\006\237\bB\002M\000\000\006\237\002M\002M\002M\bv\002M\002M\002M\b~\007\217\nb\000\000\b\193\005\157\002M\002M\002M\002M\002M\005\018\002M\007\213\000\000\000\000\000\000\007\213\002M\002M\002M\002M\002M\020\134\000\000\005\157\005\022\002M\005\170\002M\000\000\002M\002M\000\238\000\000\000\000\007\005\002M\002M\002M\007\005\b\193\003\218\000\000\000\000\000\000\002M\002M\002M\002M\002M\002M\002M\002M\002M\005\002\011\162\011\210\007\213\002M\002M\002M\000\000\000\000\000\000\000\000\006\237\005\182\002M\002\233\002M\002M\002M\021\022\002M\002M\002M\002M\000\000\011\170\007\213\000\238\011\218\002M\005\n\002M\002M\015:\002M\002M\002M\002M\002M\002M\000\000\000\000\002M\002M\002M\000\000\000\000\000\n\002=\002M\002M\002M\002M\002=\000\000\001\002\002=\000\000\000\000\000\000\002=\000\000\002=\006\234\002\233\002=\000\000\003\218\002=\002=\002=\000\000\002=\002=\002=\001&\bn\002\233\002\233\bB\000\000\002=\002=\002=\002=\002=\bv\002=\000\000\000\000\b~\000\000\000\000\002=\002=\002=\002=\002=\000\000\005\014\007V\000\000\002=\001\030\002=\000\000\002=\002=\001z\000\000\000\000\000\000\002=\002=\002=\000\000\011\162\011\210\000\000\000\000\000\000\002=\002=\002=\002=\002=\002=\002=\002=\002=\002B\011\162\011\210\000\000\002=\002=\002=\tr\000\000\011\170\t\174\000\238\011\218\002=\005\018\002=\002=\002=\000\000\002=\002=\002=\002=\000\000\011\170\000\000\011\022\011\218\002=\005\022\002=\002=\n>\002=\002=\002=\002=\002=\002=\015\246\000\000\002=\002=\002=\015\190\000\000\002\230\002I\002=\002=\002=\002=\002I\000\000\001J\002I\n\006\000\000\005\002\002I\bn\002I\000\000\bB\002I\000\000\000\000\002I\002I\002I\bv\002I\002I\002I\b~\000\000\000\238\003v\000\000\000\000\002I\002I\002I\002I\002I\000\000\002I\005f\000\000\000\000\000\000\000\000\002I\002I\002I\002I\002I\000\000\000\000\b\026\000\000\002I\000\000\002I\000\000\002I\002I\000\000\t\174\000\000\007\158\002I\002I\002I\b\134\005\030\007\166\000\000\000\000\000\000\002I\002I\002I\002I\002I\002I\002I\002I\002I\000\000\nj\002I\000\000\002I\002I\002I\000\000\000\000\000\000\t\174\000\238\003A\002I\000\000\002I\002I\002I\000\000\002I\002I\002I\002I\000\000\000\000\n\006\000\000\003A\002I\000\000\002I\002I\011r\011\238\002I\002I\002I\002I\002I\000\000\000\000\002I\002I\002I\011*\000\238\000\000\b\245\002I\002I\002I\002I\b\245\000\000\002v\b\245\n\006\000\000\001\030\b\245\bn\b\245\000\000\bB\012*\005B\000\000\b\245\012N\b\245\bv\b\245\b\245\b\245\b~\000\000\000\238\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\026j\b\245\000\000\000\000\000\000\000\000\000\000\b\245\b\245\012\146\012\154\b\245\000\000\000\000\026\254\002N\b\245\000\000\b\245\000\000\012\162\b\245\000\000\t\174\000\000\000\000\b\245\b\245\000\238\005\022\nR\000\000\000\000\000\000\000\000\b\245\b\245\0122\012r\012\170\012\178\012\194\b\245\b\245\000\238\017\246\b\245\000\000\b\245\b\245\012\202\000\000\000\000\000\000\t\174\000\238\000\000\b\245\005\002\b\245\b\245\012\210\000\000\b\245\b\245\b\245\b\245\000\000\000\000\n\006\000\000\000\000\b\245\000\000\b\245\b\245\018\014\012\242\b\245\012\250\012\186\b\245\b\245\000\000\000\000\b\245\012\218\b\245\r\"\000\238\000\000\002}\b\245\b\245\012\226\012\234\002}\026n\001\002\002}\n\006\000\000\001\030\002}\r*\002}\000\000\r2\002}\000\000\000\000\002}\002}\002}\r:\002}\002}\002}\rB\000\000\000\238\000\000\000\000\000\000\002}\002}\002}\002}\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\002}\002}\000\000\000\000\006B\000\000\002}\000\000\002}\000\000\002}\002}\000\000\t\174\000\000\000\000\002}\002}\002}\005\022\000\000\000\000\000\000\000\000\000\000\002}\002}\0122\002}\002}\002}\002}\002}\002}\000\000\018\026\002}\000\000\002}\002}\002}\000\000\000\000\000\000\t\174\000\238\000\000\002}\005\002\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\n\006\000\000\000\000\002}\000\000\002}\002}\026B\002}\002}\002}\002}\002}\002}\000\000\000\000\002}\002}\002}\007\133\000\238\000\000\002e\002}\002}\002}\002}\002e\000\000\001\002\002e\n\006\000\000\000\000\002e\007\133\002e\000\000\bB\002e\000\000\000\000\002e\002e\002e\007\133\002e\002e\002e\007\133\000\000\000\238\000\000\000\000\000\000\002e\002e\002e\002e\002e\000\000\002e\000\000\000\000\000\000\000\000\000\000\002e\002e\002e\002e\002e\000\000\000\000\011\222\001>\002e\000\000\002e\000\000\002e\002e\000\000\t\174\000\000\000\000\002e\002e\002e\rr\000\000\r~\000\000\000\000\000\000\002e\002e\0122\002e\002e\002e\002e\002e\002e\000\000\026v\002e\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\007\153\000\000\002e\000\000\002e\002e\002e\000\000\002e\002e\002e\002e\000\000\000\000\n\006\000\000\000\000\002e\000\000\002e\002e\000\000\002e\002e\002e\002e\002e\002e\000\000\000\000\002e\002e\002e\007\153\000\238\000\000\002q\002e\002e\002e\002e\002q\000\000\001\002\002q\000\000\000\000\000\000\002q\007\153\002q\000\000\bB\012*\000\000\000\000\002q\002q\002q\007\153\002q\002q\002q\007\153\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\012j\002q\000\000\002q\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\002q\002q\000\000\000\000\014\018\001>\002q\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\002q\002q\002q\014&\000\000\014:\000\000\000\000\000\000\002q\002q\0122\012r\002q\002q\002q\002q\002q\000\000\000\000\002q\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\000\238\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\002q\000\000\002q\002q\000\000\002q\002q\002q\002q\002q\002q\000\000\000\000\002q\002q\002q\007\173\000\000\000\000\002\129\002q\002q\002q\002q\002\129\t\174\000\000\002\129\000\000\000\000\000\000\002\129\bn\002\129\000\000\bB\002\129\000\000\000\000\002\129\002\129\002\129\007\173\002\129\002\129\002\129\007\173\018\002\000\000\000\000\000\000\000\000\002\129\002\129\002\129\002\129\002\129\000\000\002\129\000\000\000\000\000\000\000\000\000\000\002\129\002\129\002\129\002\129\002\129\000\000\000\000\na\002\129\002\129\002\129\002\129\002a\000\000\000\000\002a\000\000\000\000\000\000\002a\rV\002a\000\000\007\169\002a\000\000\000\000\002a\002a\002a\007\169\002a\002a\002a\007\169\000\000\000\000\000\000\000\000\000\000\002a\002a\002a\002a\002a\000\000\002a\000\000\000\000\000\000\000\000\000\000\002a\002a\002a\002a\002a\000\000\000\000\000\000\000\000\002a\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\002a\002a\002a\000\000\000\000\000\000\000\000\000\000\000\000\002a\002a\0122\002a\002a\002a\002a\002a\002a\000\000\000\000\002a\000\000\002a\002a\002a\000\000\000\000\000\000\000\000\000\238\000\000\002a\000\000\002a\002a\002a\000\000\002a\002a\002a\002a\000\000\000\000\000\000\000\000\000\000\002a\000\000\002a\002a\000\000\002a\002a\002a\002a\002a\002a\000\000\000\000\002a\002a\002a\007\129\000\000\000\000\002m\002a\002a\002a\002a\002m\000\000\000\000\002m\000\000\000\000\000\000\002m\007\129\002m\000\000\bB\012*\000\000\000\000\002m\002m\002m\007\129\002m\002m\002m\007\129\000\000\000\000\000\000\000\000\000\000\002m\002m\002m\012j\002m\000\000\002m\000\000\000\000\000\000\000\000\000\000\002m\002m\002m\002m\002m\000\000\000\000\000\000\000\000\002m\000\000\002m\000\000\002m\002m\000\000\000\000\000\000\000\000\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\000\000\002m\002m\0122\012r\002m\002m\002m\002m\002m\000\000\000\000\002m\000\000\002m\002m\002m\000\000\000\000\000\000\000\000\000\238\000\000\002m\000\000\002m\002m\002m\000\000\002m\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\002m\000\000\002m\002m\000\000\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\002m\002m\014\218\000\000\000\000\002i\002m\002m\002m\002m\002i\000\000\000\000\002i\000\000\000\000\000\000\002i\r*\002i\000\000\r2\012*\000\000\000\000\002i\002i\002i\r:\002i\002i\002i\rB\000\000\000\000\000\000\000\000\000\000\002i\002i\002i\012j\002i\000\000\002i\000\000\000\000\000\000\000\000\000\000\002i\002i\002i\002i\002i\000\000\000\000\000\000\000\000\002i\000\000\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\002i\0122\012r\002i\002i\002i\002i\002i\000\000\000\000\002i\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\002i\000\000\002i\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\000\000\002i\002i\002i\002i\002i\002i\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\002\145\002i\002i\002i\002i\002\145\000\000\000\000\002\145\000\000\000\000\000\000\002\145\000\000\002\145\011\233\011\233\012*\000\000\011\233\002\145\002\145\002\145\000\000\002\145\002\145\002\145\011\225\011\225\000\000\000\000\011\225\000\000\012b\012z\012\130\012j\012\138\000\000\002\145\000\000\000\000\000\000\000\000\000\000\002\145\002\145\012\146\012\154\002\145\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\012\162\002\145\000\238\000\000\000\000\000\000\002\145\002\145\000\238\000\000\000\000\000\000\000\000\000\000\000\238\002\145\002\145\0122\012r\012\170\012\178\012\194\002\145\002\145\000\000\000\000\002\145\000\000\002\145\002\145\012\202\000\000\000\000\000\000\000\000\011\233\000\000\002\145\000\000\002\145\002\145\012\210\000\000\002\145\002\145\002\145\002\145\011\225\000\000\000\000\000\000\000\000\002\145\000\000\002\145\002\145\000\000\002\145\002\145\002\145\012\186\002\145\002\145\000\000\015V\002\145\012\218\002\145\000\000\000\000\000\000\002y\002\145\002\145\012\226\012\234\002y\000\000\000\000\002y\000\000\000\000\000\000\002y\000\000\002y\011\229\011\229\012*\000\000\011\229\002y\002y\002y\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\012j\002y\000\000\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\002y\002y\000\000\000\000\000\000\000\000\002y\000\000\002y\000\000\002y\002y\000\238\000\000\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\0122\012r\002y\002y\002y\002y\002y\000\000\000\000\002y\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\011\229\000\000\002y\000\000\002y\002y\002y\000\000\002y\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\002y\002y\002y\002y\002y\002y\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\002u\002y\002y\002y\002y\002u\000\000\000\000\002u\000\000\000\000\000\000\002u\000\000\002u\000\000\000\000\012*\000\000\000\000\002u\002u\002u\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\002u\012j\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\002u\002u\002u\000\000\000\000\000\000\000\000\002u\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\0122\012r\002u\002u\002u\002u\002u\000\000\000\000\002u\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\002u\000\000\002u\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\000\000\002u\002u\002u\002u\002u\002u\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\002\137\002u\002u\002u\002u\002\137\000\000\000\000\002\137\000\000\000\000\000\000\002\137\000\000\002\137\000\000\000\000\012*\000\000\000\000\002\137\002\137\002\137\000\000\002\137\002\137\002\137\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\002\137\000\000\002\137\000\000\000\000\000\000\000\000\000\000\002\137\002\137\012\146\012\154\002\137\000\000\000\000\000\000\000\000\002\137\000\000\002\137\000\000\002\137\002\137\000\000\000\000\000\000\000\000\002\137\002\137\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\137\002\137\0122\012rj\002]\000\000\002]\000\000\000\000\000\000\000\000\000\000\002]\002]\002]\002]\002]\000\000\000\000\000\000\000\000\002]\000\000\002]\000\000\002]\002]\000\000\000\000\000\000\000\000\002]\002]\002]\000\000\000\000\000\000\000\000\000\000\000\000\002]\002]\0122\012rb\012z\012\130\012j\002Y\000\000\002Y\000\000\000\000\000\000\000\000\000\000\002Y\002Y\012\146\012\154\002Y\000\000\000\000\000\000\000\000\002Y\000\000\002Y\000\000\002Y\002Y\000\000\000\000\000\000\000\000\002Y\002Y\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002Y\002Y\0122\012rb\012z\012\130\012j\002\181\000\000\002\181\000\000\000\000\000\000\000\000\000\000\002\181\002\181\012\146\012\154\002\181\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\002\181\002\181\000\000\000\000\000\000\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\0122\012rb\012z\012\130\012j\002U\000\000\002U\000\000\000\000\000\000\000\000\000\000\002U\002U\012\146\012\154\002U\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\000\000\002U\002U\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002U\002U\0122\012rb\012z\012\130\012j\002\141\000\000\002\141\000\000\000\000\000\000\000\000\000\000\002\141\002\141\012\146\012\154\002\141\000\000\000\000\000\000\000\000\002\141\000\000\002\141\000\000\002\141\002\141\000\000\000\000\000\000\000\000\002\141\002\141\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\0122\012rb\012z\012\130\012j\002\133\000\000\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\012\146\012\154\002\133\000\000\000\000\000\000\000\000\002\133\000\000\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\002\133\002\133\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\0122\012rb\012z\012\130\012j\012\138\000\000\002\149\000\000\000\000\000\000\000\000\000\000\002\149\002\149\012\146\012\154\002\149\000\000\000\000\000\000\000\000\002\149\000\000\002\149\000\000\012\162\002\149\000\000\000\000\000\000\000\000\002\149\002\149\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\0122\012rb\012z\012\130\012j\002\153\000\000\002\153\000\000\000\000\000\000\000\000\000\000\002\153\002\153\012\146\012\154\002\153\000\000\000\000\000\000\000\000\002\153\000\000\002\153\000\000\012\162\002\153\000\000\000\000\000\000\000\000\002\153\002\153\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\153\002\153\0122\012rb\012z\012\130\012j\002\157\000\000\002\157\000\000\000\000\000\000\000\000\000\000\002\157\002\157\012\146\012\154\002\157\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\012\162\002\157\000\000\000\000\000\000\000\000\002\157\002\157\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\157\002\157\0122\012r\012\170\012\178\012\194\002\157\002\157\000\000\000\000\002\157\000\000\002\157\002\157\012\202\000\000\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\002\157\012\210\000\000\002\157\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\002\157\000\000\002\157\002\157\002\157\012\186\002\157\002\157\000\000\000\000\002\157\002\157\002\157\000\000\000\000\000\000\b\177\002\157\002\157\012\226\012\234\b\177\000\000\000\000\b\177\000\000\000\000\000\000\b\177\000\000\b\177\000\000\000\000\012*\000\000\000\000\b\177\b\177\b\177\000\000\b\177\b\177\b\177\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\b\177\000\000\000\000\000\000\000\000\000\000\b\177\b\177\012\146\012\154\b\177\000\000\000\000\000\000\000\000\b\177\000\000\b\177\000\000\012\162\b\177\000\000\000\000\000\000\000\000\b\177\b\177\000\238\000\000\000\000\000\000\000\000\000\000\000\000\b\177\b\177\0122\012r\012\170\012\178\012\194\b\177\b\177\000\000\000\000\b\177\000\000\b\177\b\177\012\202\000\000\000\000\000\000\000\000\000\000\000\000\b\177\000\000\b\177\b\177\012\210\000\000\b\177\b\177\b\177\b\177\000\000\000\000\000\000\000\000\000\000\b\177\000\000\b\177\b\177\000\000\b\177\b\177\b\177\012\186\b\177\b\177\000\000\000\000\b\177\012\218\b\177\000\000\000\000\000\000\002\161\b\177\b\177\012\226\012\234\002\161\000\000\000\000\002\161\000\000\000\000\000\000\002\161\000\000\002\161\000\000\000\000\012*\000\000\000\000\002\161\002\161\002\161\000\000\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\002\161\000\000\000\000\000\000\000\000\000\000\002\161\002\161\012\146\012\154\002\161\000\000\000\000\000\000\000\000\002\161\000\000\002\161\000\000\012\162\002\161\000\000\000\000\000\000\000\000\002\161\002\161\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\0122\012r\012\170\012\178\012\194\002\161\002\161\000\000\000\000\002\161\000\000\002\161\002\161\012\202\000\000\000\000\000\000\000\000\000\000\000\000\002\161\000\000\002\161\002\161\012\210\000\000\002\161\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\002\161\000\000\002\161\002\161\000\000\012\242\002\161\012\250\012\186\002\161\002\161\000\000\000\000\002\161\012\218\002\161\000\000\000\000\000\000\b\173\002\161\002\161\012\226\012\234\b\173\000\000\000\000\b\173\000\000\000\000\000\000\b\173\000\000\b\173\000\000\000\000\012*\000\000\000\000\b\173\b\173\b\173\000\000\b\173\b\173\b\173\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\b\173\000\000\000\000\000\000\000\000\000\000\b\173\b\173\012\146\012\154\b\173\000\000\000\000\000\000\000\000\b\173\000\000\b\173\000\000\012\162\b\173\000\000\000\000\000\000\000\000\b\173\b\173\000\238\000\000\000\000\000\000\000\000\000\000\000\000\b\173\b\173\0122\012r\012\170\012\178\012\194\b\173\b\173\000\000\000\000\b\173\000\000\b\173\b\173\012\202\000\000\000\000\000\000\000\000\000\000\000\000\b\173\000\000\b\173\b\173\012\210\000\000\b\173\b\173\b\173\b\173\000\000\000\000\000\000\000\000\000\000\b\173\000\000\b\173\b\173\000\000\b\173\b\173\b\173\012\186\b\173\b\173\000\000\000\000\b\173\012\218\b\173\000\000\000\000\000\000\002\209\b\173\b\173\012\226\012\234\002\209\000\000\000\000\002\209\000\000\000\000\000\000\002\209\000\000\002\209\000\000\000\000\012*\000\000\000\000\002\209\002\209\002\209\000\000\002\209\002\209\002\209\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\002\209\000\000\000\000\000\000\000\000\000\000\002\209\002\209\012\146\012\154\002\209\000\000\000\000\000\000\000\000\002\209\000\000\002\209\000\000\012\162\002\209\000\000\000\000\000\000\000\000\002\209\002\209\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\209\0122\012rb\012z\012\130\012j\012\138\000\000\002\205\000\000\000\000\000\000\000\000\000\000\002\205\002\205\012\146\012\154\002\205\000\000\000\000\000\000\000\000\002\205\000\000\002\205\000\000\012\162\002\205\000\000\000\000\000\000\000\000\002\205\002\205\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\205\0122\012rb\012z\012\130\012j\012\138\000\000\002\213\000\000\000\000\000\000\000\000\000\000\002\213\002\213\012\146\012\154\002\213\000\000\000\000\000\000\000\000\002\213\000\000\002\213\000\000\012\162\002\213\000\000\000\000\000\000\000\000\002\213\002\213\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\213\002\213\0122\012r\012\170\012\178\012\194\002\213\002\213\000\000\000\000\002\213\000\000\002\213\002\213\012\202\000\000\000\000\000\000\000\000\000\000\000\000\002\213\000\000\002\213\002\213\012\210\000\000\002\213\002\213\002\213\002\213\000\000\000\000\000\000\000\000\000\000\002\213\000\000\002\213\002\213\000\000\012\242\002\213\012\250\012\186\002\213\002\213\000\000\000\000\002\213\012\218\002\213\000\000\000\000\000\000\002\193\002\213\002\213\012\226\012\234\002\193\000\000\000\000\002\193\000\000\000\000\000\000\002\193\000\000\002\193\000\000\000\000\012*\000\000\000\000\002\193\002\193\002\193\000\000\002\193\002\193\002\193\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\002\193\000\000\000\000\000\000\000\000\000\000\002\193\002\193\012\146\012\154\002\193\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\012\162\002\193\000\000\000\000\000\000\000\000\002\193\002\193\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\0122\012rb\012z\012\130\012j\012\138\000\000\002\197\000\000\000\000\000\000\000\000\000\000\002\197\002\197\012\146\012\154\002\197\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\012\162\002\197\000\000\000\000\000\000\000\000\002\197\002\197\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\0122\012rb\012z\012\130\012j\012\138\000\000\002\201\000\000\000\000\000\000\000\000\000\000\002\201\002\201\012\146\012\154\002\201\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\012\162\002\201\000\000\000\000\000\000\000\000\002\201\002\201\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\0122\012rb\012z\012\130\012j\012\138\000\000\002\221\000\000\000\000\000\000\000\000\000\000\002\221\002\221\012\146\012\154\002\221\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\012\162\002\221\000\000\000\000\000\000\000\000\002\221\002\221\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\221\002\221\0122\012rb\012z\012\130\012j\012\138\000\000\002\217\000\000\000\000\000\000\000\000\000\000\002\217\002\217\012\146\012\154\002\217\000\000\000\000\000\000\000\000\002\217\000\000\002\217\000\000\012\162\002\217\000\000\000\000\000\000\000\000\002\217\002\217\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\217\002\217\0122\012rb\012z\012\130\012j\012\138\000\000\002\225\000\000\000\000\000\000\000\000\000\000\002\225\002\225\012\146\012\154\002\225\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\012\162\002\225\000\000\000\000\000\000\000\000\002\225\002\225\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\0122\012rb\012z\012\130\012j\012\138\000\000\002\189\000\000\000\000\000\000\000\000\000\000\002\189\002\189\012\146\012\154\002\189\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\012\162\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\0122\012rb\012z\012\130\012j\012\138\000\000\002-\000\000\000\000\000\000\000\000\000\000\002-\002-\012\146\012\154\002-\000\000\000\000\000\000\000\000\002-\000\000\002-\000\000\012\162\002-\000\000\000\000\000\000\000\000\002-\002-\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002-\002-\0122\012r\012\170\012\178\012\194\002-\002-\000\000\000\000\002-\000\000\002-\002-\012\202\000\000\000\000\000\000\000\000\000\000\000\000\002-\000\000\002-\002-\012\210\000\000\002-\002-\016j\002-\000\000\000\000\000\000\000\000\000\000\002-\000\000\002-\002-\000\000\012\242\002-\012\250\012\186\002-\002-\000\000\000\000\002-\012\218\002-\000\000\000\000\000\000\002)\002-\002-\012\226\012\234\002)\000\000\000\000\002)\000\000\000\000\000\000\002)\000\000\002)\000\000\000\000\012*\000\000\000\000\002)\002)\002)\000\000\002)\002)\002)\000\000\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\002)\000\000\000\000\000\000\000\000\000\000\002)\002)\012\146\012\154\002)\000\000\000\000\000\000\000\000\002)\000\000\002)\000\000\012\162\002)\000\000\000\000\000\000\000\000\002)\002)\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002)\002)\0122\012rb\012z\012\130\012j\012\138\000\000\002\185\000\000\000\000\000\000\000\000\000\000\002\185\002\185\012\146\012\154\002\185\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\012\162\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\0122\012rby\000\000\000\000\000\000\001\233\000\000\001\233\000\000\001\233\001\233\000\000\000\000\000\000\000\000\001\233\001\233\001\233\000\000\000\000\000\000\000\000\000\000\000\000\001\233\001\233\001\233\001\233\001\233\001\233\001\233\001\233\001\233\000\000\000\000\001\233\000\000\001\233\001\233\001\233\000\000\000\000\000\000\by\000\000\000\000\026\162\000\000\001\233\001\233\001\233\000\000\001\233\001\233\001\233\001\233\000\000\000\000\000\000\000\000\000\000\001\233\000\000\001\233\001\233\by\001\233\001\233\001\233\001\233\001\233\001\233\000\000\000\000\001\233\001\233\016R\000\000\000\000\000\006\000\246\001\233\001\233\001\233\001\233\001\002\000\000\001\006\001\018\001\030\000\000\000\000\000\000\000\000\001\"\001j\000\000\000\000\000\000\000\000\001n\000\000\by\000\000\000\000\001&\003\218\001*\000\000\by\001r\001\150\011R\011V\001\162\001\166\000\000\000\000\005\014\006\242\000\000\0012\001\030\026Z\000\000\011v\011z\000\000\007j\007v\001f\007\130\007\138\011~\t^\000\000\001\182\000\000\001z\000\000\000\000\n\134\005\166\000\000\002\233\n\138\n\142\n\154\n\170\000\000\007\214\000\000\002\233\001\186\001\190\001\194\001\198\001\202\000\000\000\000\n\194\001\206\000\000\005\018\002\233\000\000\001\210\000\000\n\206\n\230\011\006\011\026\007\226\000\n\005\002\000\000\000\000\001\214\005\022\000\000\005\190\000\000\000\000\n\162\001\218\n\166\000\000\000\000\000\000\002\233\000\000\000\000\000\000\000\000\000\000\002\022\006F\002\233\000\000\007\230\n\182\000\000\002\026\002\233\014\250\003N\011\146\005\002\002\"\000\000\002&\002*\000\006\000\246\000\000\000\000\006\225\000\000\001\002\005\202\001\006\001\018\001\030\000\000\000\000\000\000\002\233\001\"\001j\000\000\000\000\000\000\000\000\011N\000\000\000\000\005\n\006\225\001&\000\000\001*\000\000\000\000\001r\001\150\011R\011V\001\162\001\166\000\000\000\000\000\000\006\242\000\000\0012\000\000\011Z\000\000\011v\011z\006\225\007j\007v\001f\007\130\007\138\011~\t^\000\000\001\182\006\225\001z\000\000\000\000\n\134\006\225\006\225\000\238\n\138\n\142\n\154\n\170\000\000\007\214\006\225\006\225\001\186\001\190\001\194\001\198\001\202\000\000\000\000\n\194\001\206\000\000\000\000\000\000\000\000\001\210\000\000\n\206\n\230\011\006\011\026\007\226\000\000\005\002\000\000\000\000\001\214\000\000\000\000\006\225\000\000\000\000\n\162\001\218\n\166\000\000\000\000\002\233\000\000\000\000\006\225\002\233\000\000\000\000\002\022\006Z\000\000\000\000\007\230\n\182\000\000\002\026\000\000\014\250\003N\011\146\024\162\002\"\bu\002&\002*\000\006\000\246\000\000\000\000\001\130\000\n\001\002\005\234\001\006\001\018\001\030\000\000\000\000\000\000\000\000\001\"\007\209\000\000\000\000\006\202\000\000\002\233\000\000\004y\000\000\006\206\001&\000\000\001*\019^\000\000\001.\000\000\006\210\006\214\002\233\002\233\007\209\006\218\bu\006\242\000\000\0012\000\000\019n\n\226\007b\007f\000\000\007j\007v\001f\007\130\007\138\t\006\t^\000\000\000\000\019V\001z\007\209\bu\n\134\019\210\bj\002\233\n\138\n\142\n\154\n\170\007\209\007\214\000\000\000\000\000\000\007\209\007\209\000\238\000\000\019\218\000\000\n\194\000\000\000\000\007\209\007\209\000\000\000\000\016>\n\206\n\230\011\006\011\026\007\226\000\000\005\002\019\238\020\026\bu\000\000\004y\004y\003\218\000\000\n\162\bu\n\166\000\000\000\238\000\000\007\209\000\000\000\000\007\209\000\000\000\000\000\000\000\000\020F\023\158\007\230\n\182\016\186\000\000\007\209\011.\003N\011\146\000\006\000\246\000\000\000\000\001\130\000\000\001\002\005\234\001\006\001\018\001\030\000\000\000\000\000\000\000\000\001\"\007\205\000\000\000\000\004\153\000\000\b\201\000\000\b\201\b\201\006\206\001&\000\000\001*\bn\000\000\001.\bB\006\210\006\214\000\000\000\000\007\205\006\218\bv\006\242\000\000\0012\b~\019n\000\000\007b\007f\000\000\007j\007v\001f\007\130\007\138\t\006\t^\000\000\000\000\019V\001z\007\205\000\000\n\134\019\210\000\000\000\000\n\138\n\142\n\154\n\170\007\205\007\214\000\000\000\000\000\000\007\205\007\205\000\238\000\000\019\218\000\000\n\194\000\000\027\206\007\205\007\205\000\000\000\000\000\000\n\206\n\230\011\006\011\026\007\226\000\000\005\002\019\238\020\026\000\000\000\000\027\239\016r\000\000\000\000\n\162\000\000\n\166\000\000\000\000\000\000\007\205\002B\000\000\007\205\000\000\000\000\000\000\000\000\000\000\023\158\007\230\n\182\b\201\000\000\007\205\011.\003N\011\146\000\006\000\246\000\000\001&\001\130\000\000\001\002\005\234\001\006\001\018\001\030\000\000\000\000\000\000\000\000\001\"\0125\021B\000\000\028\030\000\000\000\000\000\000\004\198\000\000\006\206\001&\000\000\001*\002\230\000\000\001.\021\186\006\210\006\214\000\000\001z\0125\006\218\000\000\006\242\000\000\0012\021\210\019n\000\000\007b\007f\000\000\007j\007v\001f\007\130\007\138\t\006\t^\000\000\000\000\019V\001z\0125\000\000\n\134\019\210\000\000\000\000\n\138\n\142\n\154\n\170\0125\007\214\000\000\000\000\000\000\0125\0125\000\238\000\000\019\218\000\000\n\194\000\000\027\206\0125\0125\000\000\000\000\000\000\n\206\n\230\011\006\011\026\007\226\000\000\005\002\019\238\020\026\000\000\000\000\004\161\007Z\000\000\001\002\n\162\000\000\n\166\000\000\000\000\000\000\000\000\006\234\000\000\0125\000\000\000\000\000\000\000\000\nV\023\158\007\230\n\182\015\n\001&\0125\011.\003N\011\146\000\173\000\000\001\002\000\173\000\000\000\000\001\030\000\000\011\186\000\000\000\000\001\"\000\000\000\000\000\000\000\173\000\000\000\173\000\000\000\173\007V\000\173\001&\000\000\001*\011\194\000\000\001.\001z\000\000\007\006\000\000\000\000\011\202\000\173\000\000\000\000\000\000\0012\000\000\000\173\000\000\000\000\007\018\000\173\000\000\000\000\001f\001v\000\173\000\000\000\173\002\233\002\233\000\173\001z\000\000\tr\n\134\000\173\000\173\000\173\n\138\n\142\n\154\000\000\r\198\007\214\000\173\000\173\000\000\000\000\000\000\000\000\002\233\000\173\000\000\000\000\000\000\000\173\000\000\002\233\000\n\000\000\000\000\000\000\000\000\000\000\002\233\007\226\000\000\005\002\000\173\000\173\002\233\000\000\000\173\000\173\002\233\002\233\n\162\000\000\n\166\000\000\000\000\000\000\007\229\000\000\000\173\000\000\007\229\000\000\002\233\000\000\000\173\000\173\007\230\n\182\000\000\000\000\000\000\011.\003N\000\000\000\173\000\197\000\173\001\002\000\197\000\000\006.\001\030\000\000\011\186\000\000\000\000\001\"\000\000\000\000\000\000\000\197\000\000\000\197\000\000\000\197\000\000\000\197\001&\000\000\001*\011\194\007\229\001.\000\000\000\000\000\000\000\000\000\000\011\202\000\197\000\000\000\000\000\000\0012\000\000\000\197\007\229\000\000\000\000\000\197\000\000\000\000\001f\001v\000\197\001\181\000\197\000\000\000\000\000\197\001z\000\000\000\000\n\134\000\197\000\197\000\197\n\138\n\142\n\154\000\000\r\198\007\214\000\197\000\197\007\229\001\181\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\226\000\000\005\002\000\197\000\197\001\181\000\000\000\197\000\197\000\000\007\229\n\162\000\000\n\166\000\000\001\181\000\000\000\000\000\000\000\197\001\181\001\181\000\238\000\000\000\000\000\197\000\197\007\230\n\182\001\181\001\181\000\000\011.\003N\000\000\000\197\000\014\000\197\000\018\000\022\000\026\000\030\000\000\000\"\000&\000\000\000*\000.\0002\000\000\0006\000:\000\000\000\000\002\233\000>\000\000\000\000\001\181\000B\000\000\000\000\002\233\000\000\000\000\000\000\000\000\000F\000\000\001\181\000\000\000\000\000\000\000J\002\233\000N\000R\000V\000Z\000^\000b\000f\002\233\000\n\000\000\000j\000\000\000n\000\000\000r\000\000\000\n\000v\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\000\000\000\000\000\000\000\000\000\000\000z\002\233\002\233\000~\000\130\000\000\000\000\002\233\000\000\002\233\000\134\000\138\000\142\000\000\000\000\002\233\000\000\000\000\000\000\000\146\000\150\000\154\000\000\000\158\000\000\000\000\000\162\000\166\000\170\000\000\002\233\000\000\000\174\000\178\000\182\000\000\000\000\000\000\002\233\000\000\000\186\000\000\000\190\000\194\007\002\001\002\t>\000\000\000\000\001\030\000\198\000\000\000\202\000\000\001\"\001j\000\000\000\000\000\206\000\210\001n\000\214\000\000\000\000\000\000\001&\000\000\006\222\000\000\000\000\001\146\001\150\001\154\007\"\001\162\001\166\000\000\000\000\000\000\004e\000\000\002\233\000\000\007&\000\000\001\170\016\014\000\000\000\000\000\000\007\030\001v\000\000\001\178\000\000\000\000\001\182\000\000\001z\000\000\004e\007\158\002\233\000\000\000\000\007\162\000\000\007\166\007\202\000\000\007\214\000\000\000\n\001\186\001\190\001\194\001\198\001\202\000\000\000\000\000\000\001\206\007\218\004e\000\000\002\233\001\210\000\000\002\233\000\000\000\000\000\000\007\226\004e\005\002\002\233\b\"\001\214\004e\005\226\002\233\000\000\002\233\000\000\001\218\000\000\000\000\004e\004e\002\233\002\233\000\000\000\000\000\000\000\000\002\022\006F\000\000\000\000\007\230\000\000\000\000\002\026\000\000\002\030\003N\000\000\000\000\002\"\000\000\002&\002*\007\002\001\002\n\246\000\000\004e\001\030\002\233\000\000\000\000\000\000\001\"\001j\000\000\000\000\000\000\004e\001n\002\233\000\000\000\000\000\000\001&\000\000\000\000\000\000\000\000\001\146\001\150\001\154\007\"\001\162\001\166\000\000\000\000\000\000\0186\000\000\001\r\000\000\007&\000\000\001\170\016\014\000\000\000\000\000\000\007\030\001v\000\000\001\178\000\000\000\000\001\182\000\000\001z\000\000\006\206\007\158\001\r\000\000\000\000\007\162\000\000\007\166\007\202\000\000\007\214\000\000\000\000\001\186\001\190\001\194\001\198\001\202\000\000\000\000\000\000\001\206\007\218\018\166\000\000\001\r\001\210\000\000\006\254\000\000\000\000\000\000\007\226\019V\005\002\001\r\b\"\001\214\019\210\000\000\001\r\000\000\000\000\000\000\001\218\000\000\000\000\023\198\023\214\001\r\001\r\000\000\000\000\000\000\000\000\002\022\006F\000\000\000\000\007\230\000\000\000\000\002\026\000\000\002\030\003N\000\000\000\000\002\"\012)\002&\002*\007\002\001\002\015\226\000\000\004\145\001\030\001\r\000\000\000\000\000\000\001\"\001j\000\000\000\000\000\000\024\194\001n\001\r\005E\000\000\000\000\001&\005E\000\000\000\000\000\000\001\146\001\150\001\154\007\"\001\162\001\166\001\021\000\000\000\000\000\000\000\000\000\000\000\000\007&\000\000\001\170\016\014\000\000\000\000\000\000\007\030\001v\000\000\001\178\000\000\000\000\001\182\001\021\001z\000\000\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\007\202\000\000\007\214\000\000\000\000\001\186\001\190\001\194\001\198\001\202\000\000\000\000\001\021\001\206\007\218\021J\012)\012)\001\210\000\000\000\000\000\000\001\021\000\000\007\226\000\000\005\002\001\021\b\"\001\214\000\000\000\000\005E\000\000\000\000\000\000\001\218\001\021\000\000\012)\000\000\000\000\012)\000\000\000\000\000\000\000\000\002\022\006F\005E\000\000\007\230\005E\000\000\002\026\000\000\002\030\003N\002\233\002\233\002\"\000\000\002&\002*\002\233\001\021\002\233\002\233\002\233\002\233\002\233\000\000\000\000\002\233\002\233\000\000\001\021\000\000\002\233\002\233\000\000\000\000\000\000\000\000\002\233\002\233\002\233\000\n\000\000\002\233\002\233\002\233\002\233\000\n\002\233\000\000\000\000\000\000\002\233\000\n\002\233\000\000\000\000\002\233\002\233\002\233\000\000\002\233\002\233\002\233\002\233\002\233\002\233\002\233\000\n\002\233\002\233\002\233\000\000\000\000\002\233\000\000\000\000\002\233\002\233\002\233\002\233\002\233\000\000\002\233\002\233\002\233\002\233\002\233\000\000\002\233\000\000\000\000\002\233\002\233\002\233\002\233\000\000\000\000\002\233\002\233\000\000\002\233\002\233\002\233\002\233\002\233\000\000\002\233\000\000\000\000\000\000\002\233\000\000\002\233\0009\0009\002\233\000\000\002\233\000\000\0009\000\000\0009\0009\0009\007\137\002\233\000\000\002\233\0009\002\233\tfv\0009\0009\0009\0005\000\000\0005\000\000\000\000\0005\000\000\0005\0005\000\000\019V\000\000\000\000\000\000\0005\019\210\0005\000\000\000\000\000\000\0005\0005\000\000\0005\0005\0005\0005\0005\0005\0005\000\000\020\238\000\000\0005\000\000\000\000\0005\000\000\000\000\000\000\0005\0005\0005\0005\000\000\0005\000\000\000\000\019\238\021\002\000\000\000\000\004m\004m\000\000\0005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\0005\0005\0005\0005\000\000\0005\000\000\021\018\000\000\000\000\000\000\000\000\011\161\011\161\0005\000\000\0005\000\000\011\161\000\000\011\161\011\161\011\161\000\000\000\000\000\000\000\000\011\161\004e\000\000\0005\0005\000\000\006\157\000\000\0005\0005\0005\011\161\000\000\011\161\000\000\000\000\011\161\000\000\011\161\011\161\000\000\000\000\004e\000\000\000\000\011\161\000\000\011\161\000\000\000\000\000\000\011\161\011\161\000\000\011\161\011\161\011\161\011\161\011\161\011\161\011\161\000\000\000\000\000\000\011\161\004e\000\000\011\161\000\000\000\000\000\000\011\161\011\161\011\161\011\161\004e\011\161\000\000\000\000\000\000\004e\005\226\000\238\000\000\000\000\000\000\011\161\000\000\000\000\000\000\004e\000\000\000\000\000\000\011\161\011\161\011\161\011\161\011\161\000\000\011\161\000\000\000\000\000\000\000\000\000\000\000\000\011\157\011\157\011\161\000\000\011\161\000\000\011\157\000\000\011\157\011\157\011\157\004e\000\000\000\000\000\000\011\157\000\000\000\000\011\161\011\161\000\000\006\153\004e\011\161\011\161\011\161\011\157\000\000\011\157\000\000\000\000\011\157\000\000\011\157\011\157\b\154\012\017\011\253\b\221\000\000\011\157\000\000\011\157\000\000\000\000\000\000\011\157\011\157\000\000\011\157\011\157\011\157\011\157\011\157\011\157\011\157\000\000\000\000\012\017\011\157\000\000\000\000\011\157\000\000\000\000\002\142\011\157\011\157\011\157\011\157\000\000\011\157\005\246\000\000\004\t\000\000\000\000\000\000\002\150\000\000\000\238\011\157\002\154\011\253\000\000\000\000\000\000\000\000\000\000\011\157\011\157\011\157\011\157\011\157\000\000\011\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\157\000\000\011\157\000\006\000\246\000\000\000\000\000\000\000\000\001\002\000\000\001\006\001\018\001\030\000\238\000\000\011\157\011\157\001\"\000\000\000\000\011\157\011\157\011\157\000\000\bn\015\026\n-\bB\001&\000\000\001*\000\000\b\221\001.\bv\006\210\006\214\000\000\b~\000\000\000\000\000\000\006\242\000\000\0012\000\000\004\t\000\000\007b\007f\000\000\007j\007v\001f\007\130\007\138\t\006\t^\016\022\n-\000\000\001z\bn\000\000\n\134\bB\t\030\000\000\n\138\n\142\n\154\n\170\bv\007\214\000\000\n-\b~\000\000\n-\r\014\000\000\000\000\000\000\n\194\005\021\n-\005\021\005\021\000\000\n-\000\000\n\206\n\230\011\006\011\026\007\226\005\021\005\002\000\000\005\021\000\000\005\021\000\238\005\021\000\000\005\021\n\162\000\000\n\166\000\000\000\000\000\000\000\000\005\021\000\000\000\000\000\000\000\000\005\021\000\000\005\021\005\021\007\230\n\182\005\021\005\021\000\000\011.\003N\011\146\005\021\000\000\005\021\005\021\005\021\005\021\000\000\005\021\005\021\005\021\000\000\000\000\000\000\005\021\005\021\005\021\000\000\000\000\000\000\000\000\000\000\bn\005\021\000\000\bB\016\026\000\000\000\000\005\021\005\021\000\000\bv\005\021\005\021\000\000\b~\005\021\005\021\000\000\005\021\000\000\001\002\005\021\000\000\000\000\012)\005\021\005\021\005\021\005\021\005\021\005\021\000\000\000\000\000\000\000\000\005\021\005\021\000\000\000\000\000\000\001&\000\000\005\021\000\000\000\000\005I\005\021\022\154\005\021\005I\005\021\000\000\000\000\000\000\023\186\000\000\000\000\000\000\000\000\005\021\005\021\005\021\000\000\005\021\005\021\023\226\001>\000\000\000\000\023\230\000\000\000\000\000\000\001z\000\000\005\021\000\000\005\021\005\021\000\000\024\022\002\226\005\021\000\000\000\000\000\000\000\000\005\021\000\000\000\000\000\000\005\021\nE\005\021\005\021\nE\nE\000\000\000\000\000\000\nE\000\000\nE\000\000\024&\nE\000\000\012)\012)\000\000\nE\nE\000\000\nE\nE\000\000\nE\000\000\021Z\nE\000\000\000\000\000\000\005I\nE\000\000\000\000\nE\000\000\000\000\012)\000\000\000\000\012)\000\000\nE\000\000\nE\000\000\006\206\005I\nE\nE\005I\000\000\000\000\000\000\000\000\000\000\nE\000\000\000\000\nE\000\000\000\000\nE\nE\000\000\nE\000\000\nE\nE\021\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nE\000\000\019V\nE\b\181\000\000\000\000\019\210\000\000\b\181\000\000\002B\b\181\nE\000\000\nE\000\000\021\178\nE\000\000\nE\b\181\000\000\000\000\b\181\b\181\b\181\b\002\b\181\b\181\b\181\000\000\000\000\000\000\nE\nE\000\000\nE\nE\000\000\nE\000\000\nE\b\181\nE\004\137\nE\000\000\nE\b\181\b\181\000\000\000\000\b\181\000\000\000\000\022\022\002\230\b\181\011\189\b\181\000\000\011\189\b\181\000\000\000\000\000\000\000\000\b\181\b\181\b\181\000\000\000\000\000\000\011\189\000\000\000\000\b\181\b\181\000\000\011\189\000\000\000\000\000\000\b\181\000\000\000\000\000\000\003v\000\000\000\000\000\000\b\181\011\189\000\000\000\000\000\000\000\000\018\"\011\189\000\000\b\181\b\181\b\181\000\000\b\181\b\181\000\000\011\189\000\000\011\189\000\000\000\000\011\189\000\000\000\000\000\000\b\181\011\189\b\181\b\181\000\000\000\000\011\217\b\181\000\000\000\000\000\000\011\217\b\181\002B\011\217\000\000\b\181\011\189\b\181\b\181\000\000\011\189\000\000\003\150\000\000\000\238\011\217\011\217\011\217\000\000\011\217\011\217\011\217\000\000\011\189\011\189\000\000\000\000\011\189\000\000\000\000\000\000\000\000\000\000\000\000\011\217\027\198\000\000\000\000\000\000\000\000\011\217\011\217\000\000\000\000\011\217\000\000\011\189\000\000\002\230\011\217\001\130\011\217\000\000\005\234\011\217\000\000\000\000\000\000\000\000\011\217\011\217\011\217\000\000\bn\000\000\028\030\bB\018&\011\217\011\217\000\000\006\206\000\000\bv\000\000\011\217\000\000\b~\000\000\003v\000\000\000\000\000\000\011\217\006\218\000\000\000\000\000\000\000\000\000\000\019n\000\000\011\217\011\217\011\217\000\000\011\217\011\217\000\000\007\138\000\000\025>\000\000\000\000\019V\000\000\000\000\000\000\011\217\019\210\011\217\011\217\000\000\000\000\b\185\011\217\000\000\000\000\000\000\b\185\011\217\002B\b\185\000\000\011\217\019\218\011\217\011\217\000\000\027\206\000\000\b\185\000\000\000\000\b\185\b\185\b\185\000\000\b\185\b\185\b\185\000\000\019\238\020\026\000\000\000\000\004\161\000\000\000\000\000\000\000\000\000\000\000\000\b\185\000\000\000\000\000\000\000\000\000\000\b\185\b\185\000\000\000\000\b\185\000\000\023\158\000\000\002\230\b\185\000\000\b\185\000\000\000\000\b\185\000\000\000\000\000\000\000\000\b\185\b\185\b\185\000\000\000\000\000\000\000\000\000\000\000\000\b\185\b\185\000\000\000\000\000\000\000\000\000\000\b\185\000\000\000\000\000\000\003v\000\000\000\000\000\000\b\185\000\000\000\000\000\000\000\000\004e\000\000\000\000\004e\b\185\b\185\b\185\000\000\b\185\b\185\000\000\000\000\000\000\000\000\000\000\004e\000\000\000\000\000\000\004e\b\185\004e\b\185\b\185\000\000\011\221\000\000\b\185\000\000\000\000\011\221\000\000\b\185\011\221\004e\000\000\b\185\000\000\b\185\b\185\004e\000\000\003f\000\000\000\000\011\221\011\221\011\221\000\000\011\221\011\221\011\221\000\000\000\000\004e\000\000\002>\002\210\000\000\004e\005\226\001\030\000\000\000\000\011\221\000\000\000\000\000\000\000\000\000\000\011\221\011\221\000\000\000\000\011\221\004e\000\000\001&\002F\011\221\002V\011\221\000\000\000\000\011\221\000\000\000\000\000\000\002b\011\221\011\221\011\221\004e\004e\000\000\000\000\004e\004e\011\221\011\221\000\000\000\000\002\218\002\222\t\234\011\221\000\000\000\000\002\234\011\221\001z\002\254\003\n\011\221\000\000\004e\000\000\004\194\000\000\004\202\005f\000\000\011\221\011\221\011\221\000\000\011\221\011\221\000\000\000\000\000\000\000\000\000\000\000\000\003\026\000\000\000\000\000\000\011\221\003%\011\221\011\221\000\000\000\000\003%\011\221\005\002\003%\000\000\000\000\011\221\000\000\000\000\000\000\011\221\000\000\011\221\011\221\005\006\003%\003%\003%\000\000\003%\003%\003%\000\000\000\000\000\000\000\000\002>\002B\000\000\000\000\000\000\005\n\000\000\000\000\003%\000\000\000\000\000\000\000\000\000\000\003%\003^\000\000\000\000\003%\000\000\000\000\001&\002F\003%\002V\003%\000\000\000\000\003%\000\000\000\000\000\000\002b\003%\003%\003%\000\000\000\000\000\000\002j\000\000\000\000\003%\003%\000\000\000\000\002f\002\222\000\000\003%\000\000\000\000\002\234\003%\001z\002\254\003\n\003%\000\000\000\000\000\000\003\022\000\000\000\000\000\000\000\000\003%\003%\003%\000\000\003%\003%\000\000\000\000\000\000\000\000\000\000\000\000\003\026\000\000\000\000\000\000\003%\000\000\003%\003%\000\000\000\000\000\000\003%\000\000\000\000\000\000\000\000\003%\000\000\000\000\000\000\003%\nQ\003%\003%\007\002\001\002\000\000\000\000\000\000\001\030\000\000\b\214\000\000\000\000\001\"\000\000\000\000\000\000\000\000\nQ\nQ\000\000\nQ\nQ\000\000\001&\000\000\000\000\b\246\000\000\000\000\000\000\000\000\007\006\000\000\000\000\t\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nQ\000\000\007\018\000\000\000\000\000\000\007\030\001v\000\000\000\000\002>\002B\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\nQ\007\162\000\000\007\166\007\202\tR\007\214\000\000\000\000\000\000\000\000\001&\002F\000\000\002V\nQ\000\000\000\000\007\218\000\000\000\000\000\000\002b\000\000\000\000\021B\000\000\000\000\007\226\000\000\005\002\000\000\b\"\nQ\000\000\nQ\002f\022\150\000\000\000\000\021\186\000\000\002\234\000\000\001z\002\254\003\n\000\000\000\000\nQ\000\000\022\166\nQ\nQ\000\000\007\230\000\000\nQ\000\000\nQ\000\000\003N\nM\nQ\000\000\007\002\001\002\000\000\003\026\000\000\001\030\000\000\000\000\000\000\000\000\001\"\000\000\000\000\000\000\000\000\nM\nM\000\000\nM\nM\000\000\001&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nM\000\000\007\018\000\000\000\000\000\000\007\030\001v\000\000\000\000\000\000\000\000\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\nM\007\162\000\000\007\166\007\202\000\000\007\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nM\000\000\000\000\007\218\001\205\000\000\000\000\000\000\000\000\001\205\000\000\000\000\001\205\007\226\000\000\005\002\000\000\b\"\nM\000\000\nM\000\000\000\000\000\000\001\205\001\205\001\205\000\000\001\205\001\205\001\205\000\000\000\000\000\000\nM\002>\002B\nM\nM\000\000\007\230\000\000\nM\001\205\nM\000\000\003N\000\000\nM\001\205\001\205\001n\000\000\001\205\000\000\000\000\001&\002F\001\205\002V\001\205\000\000\000\000\001\205\000\000\000\000\000\000\002b\001\205\001\205\001\205\000\000\000\000\000\000\002j\000\000\000\000\001\205\001\205\000\000\000\000\002f\002\222\000\000\001\205\000\000\000\000\002\234\001\205\001z\002\254\003\n\001\205\000\000\000\000\000\000\003\022\000\000\000\000\000\000\000\000\001\205\001\205\001\205\000\000\001\205\001\205\000\000\000\000\000\000\000\000\000\000\000\000\003\026\000\000\000\000\000\000\001\205\000\000\001\205\001\205\007\002\001\002\000\000\001\205\000\000\001\030\000\000\b\214\001\205\000\000\001\"\000\000\003\218\000\000\001\205\000\000\000\000\000\000\000\000\000\000\000\000\001&\000\000\000\000\b\246\000\000\004\142\000\000\000\000\007\006\000\000\000\000\t\014\003J\000\000\003N\000\000\000\000\007\002\001\002\000\000\000\000\007\018\001\030\000\000\b\214\t:\001v\001\"\000\000\000\000\000\000\000\000\000\000\001z\000\000\000\000\007\158\000\000\001&\n)\007\162\b\246\007\166\000\000\tR\007\214\007\006\000\000\000\000\t\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\218\000\000\007\018\000\000\000\000\000\000\t:\001v\000\000\000\000\007\226\000\000\005\002\000\000\001z\tZ\000\000\007\158\000\000\000\000\n)\007\162\000\000\007\166\000\000\tR\007\214\000\000\000\000\000\000\000\000\n)\015F\000\000\n)\017\130\000\000\007\230\007\218\005\141\000\000\n)\000\000\003N\005\141\n)\000\000\005\141\007\226\000\000\005\002\000\000\000\000\tZ\000\000\000\000\000\000\000\000\000\000\005\141\000\000\005\141\000\000\005\141\000\000\005\141\000\000\000\000\000\000\n)\000\000\000\000\n)\n)\000\000\007\230\000\000\000\000\005\141\n)\000\000\003N\000\000\nt\234\000\000\000\000\000\000\000\000\005\129\005\129\005\141\000\000\000\000\005\141\005\141\nR\000\000\005\129\000\000\005\129\000\000\000\000\005\129\000\000\000\000\005\141\000\000\005\129\005\129\000\238\000\000\000\000\003i\000\000\000\000\000\000\000\000\003i\000\000\000\000\003i\000\000\000\000\005\129\005\129\000\000\000\000\005\129\000\000\000\000\000\000\000\000\003i\000\000\003i\000\000\003i\000\000\003i\000\000\005\129\005\129\005\129\000\000\005\129\005\129\000\000\000\000\000\000\000\000\000\000\003i\000\000\000\000\000\000\000\000\000\000\003i\003i\005\129\000\000\000\000\005\129\005\129\005\029\000\000\003i\000\000\003i\000\000\000\000\003i\000\000\000\000\005\129\000\000\003i\003i\003i\000\000\000\000\000\000\000\000\000\000\000\000\001\189\000\000\002B\001\189\000\000\000\000\000\000\003i\000\000\000\000\000\000\003i\b\161\000\000\000\000\001\189\000\000\000\000\000\000\001\189\000\000\001\189\000\000\000\000\003i\003i\003i\000\000\003i\003i\000\000\000\000\000\000\000\000\001\189\000\000\005\029\000\000\000\000\000\000\001\189\001\189\000\000\003i\000\000\000\000\000\000\003i\002\230\001\189\000\000\001\189\000\000\000\000\001\189\000\000\000\000\000\000\003i\001\189\001\189\001\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003M\000\000\002B\003M\000\000\001\189\001\189\000\000\000\000\003v\000\000\000\000\b\157\000\000\000\000\003M\000\000\000\000\000\000\003M\000\000\003M\001\189\001\189\000\000\000\000\001\189\001\189\000\000\000\000\000\000\000\000\000\000\000\000\003M\000\000\000\000\000\000\001\189\000\000\003M\001\185\000\000\000\000\000\000\001\189\000\000\000\000\002\230\003M\001\189\003M\000\000\000\000\003M\000\000\001\189\000\000\000\000\003M\003M\003M\000\000\000\000\000\000\bA\000\000\000\000\000\000\000\000\bA\000\000\000\000\bA\000\000\003M\003M\000\000\000\000\003v\000\000\000\000\000\000\000\000\000\000\bA\000\000\bA\000\000\bA\000\000\bA\003M\003M\000\000\000\000\003M\003M\000\000\000\000\000\000\000\000\000\000\000\000\bA\000\000\000\000\000\000\003M\000\000\bA\bA\000\000\000\000\000\000\003M\000\000\000\000\000\000\bA\003M\bA\000\000\000\000\bA\000\000\003M\000\000\000\000\bA\bA\bA\000\000\000\000\012u\000\000\000\000\000\000\000\000\012u\000\000\000\000\012u\000\000\000\000\bA\000\000\000\000\000\000\bA\000\000\000\000\000\000\000\000\012u\000\000\012u\000\000\012u\000\000\012u\000\000\bA\bA\bA\000\000\bA\bA\000\000\000\000\000\000\000\000\000\000\012u\000\000\000\000\000\000\000\000\bA\012u\012u\bA\000\000\000\000\000\000\bA\003\"\000\000\012u\000\000\012u\000\000\000\000\012u\003\218\000\000\bA\000\000\012u\012u\012u\000\000\000\000\012y\000\000\000\000\000\000\000\000\012y\000\000\000\000\012y\000\000\000\000\012u\000\000\000\000\000\000\012u\000\000\000\000\000\000\000\000\012y\000\000\012y\000\000\012y\000\000\012y\000\000\012u\012u\012u\000\000\012u\012u\000\000\000\000\000\000\000\000\000\000\012y\003.\000\000\000\000\000\000\000\000\012y\012y\012u\000\000\000\000\000\000\012u\003\"\000\000\012y\000\000\012y\000\000\000\000\012y\000\000\000\000\012u\000\000\012y\012y\012y\000\000\000\000\003i\000\000\000\000\000\000\000\000\003i\000\000\000\000\003i\000\000\000\000\012y\000\000\000\000\000\000\012y\000\000\000\000\000\000\000\000\003i\000\000\003i\000\000\003i\000\000\003i\000\000\012y\012y\012y\000\000\012y\012y\000\000\000\000\000\000\000\000\000\000\003i\003.\000\000\000\000\000\000\000\000\003i\003i\012y\000\000\000\000\000\000\012y\005!\000\000\003i\000\000\003i\000\000\000\000\003i\000\000\000\000\012y\000\000\003i\003i\003i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012*\000\000\000\000\000\000\r\162\b\197\003i\b\197\b\197\000\000\003i\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\000\000\003i\003i\003i\000\000\003i\003i\000\000\012\146\012\154\000\000\000\000\000\000\005!\000\000\000\000\000\000\000\000\000\000\012\162\003i\000\000\000\000\000\000\003i\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003i\0122\012r\012\170\012\178\012\194\000\000\000\000\000\000\000\000\000\000\000\000\000\181\016\134\012\202\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\210\000\000\000\181\000\000\000\181\000\000\000\181\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\242\000\000\012\250\012\186\000\000\000\181\000\000\000\000\bj\000\000\000\000\000\000\000\185\001n\000\000\000\000\000\185\000\000\000\000\000\000\000\000\000\000\000\000\001\146\001\150\001\154\001\158\001\162\001\166\000\185\000\185\000\000\000\000\000\185\000\185\007m\000\000\000\000\001\170\001\174\000\000\000\000\000\000\000\000\000\000\000\185\001\178\000\000\000\000\001\182\000\000\000\185\000\185\007m\007m\000\000\007m\007m\000\000\000\000\000\000\000\185\000\000\000\185\000\000\000\000\001\186\001\190\001\194\001\198\001\202\000\000\000\000\000\000\001\206\000\000\000\000\000\000\007m\001\210\000\000\000\000\000\000\000\000\000\000\001\153\000\000\000\000\001\153\000\000\001\214\000\000\000\000\000\000\000\000\000\000\000\000\001\218\007m\000\000\001\153\000\000\000\000\000\000\001\153\000\000\001\153\000\000\002\022\027\002\000\000\000\000\000\000\007m\000\000\002\026\000\000\002\030\000\000\001\153\001\153\002\"\000\000\002&\002*\001\153\000\000\000\000\000\000\000\000\000\000\007m\005\029\007m\001\153\000\000\001\153\000\000\000\000\001\153\000\000\000\000\000\000\000\000\001\153\001\153\001\153\b:\000\000\000\000\007m\007m\000\000\000\000\000\000\007m\000\000\007m\000\000\000\000\001\153\007m\000\000\000\000\001\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\185\000\000\002B\001\185\001\153\001\153\000\000\000\000\001\153\001\153\000\000\000\000\b\157\000\000\000\000\001\185\005\029\000\000\000\000\001\185\001\153\001\185\000\000\000\000\000\000\000\000\001\153\001\153\000\000\000\000\000\000\000\000\001\153\000\000\001\185\000\000\000\000\000\000\001\153\000\000\001\185\000\000\000\000\000\000\000\000\bE\000\000\000\000\002\230\001\185\bE\001\185\000\000\bE\001\185\000\000\000\000\000\000\000\000\001\185\001\185\001\185\000\000\000\000\000\000\bE\000\000\bE\000\000\bE\000\000\bE\000\000\000\000\000\000\001\185\001\185\000\000\000\000\003v\000\000\000\000\000\000\000\000\bE\000\000\000\000\000\000\000\000\000\000\bE\bE\001\185\001\185\000\000\000\000\001\185\001\185\000\000\bE\000\000\bE\000\000\000\000\bE\000\000\000\000\000\000\001\185\bE\bE\000\238\000\000\000\000\012q\001\185\000\000\000\000\000\000\012q\001\185\000\000\012q\000\000\000\000\bE\001\185\000\000\000\000\bE\000\000\000\000\000\000\000\000\012q\000\000\012q\000\000\012q\000\000\012q\000\000\bE\bE\bE\000\000\bE\bE\000\000\000\000\000\000\000\000\000\000\012q\000\000\000\000\000\000\000\000\bE\012q\012q\bE\000\000\000\000\000\000\bE\000\000\000\000\012q\000\000\012q\000\000\000\000\012q\000\000\000\000\bE\000\000\012q\012q\012q\000\000\012m\000\000\000\000\000\000\000\000\012m\000\000\000\000\012m\000\000\000\000\000\000\012q\000\000\000\000\000\000\012q\000\000\000\000\000\000\012m\000\000\012m\000\000\012m\000\000\012m\000\000\000\000\012q\012q\012q\000\000\012q\012q\000\000\000\000\000\000\000\000\012m\000\000\000\000\000\000\000\000\000\000\012m\012m\000\000\012q\000\000\000\000\000\000\012q\000\000\012m\000\000\012m\000\000\000\000\012m\000\000\003\218\000\000\012q\012m\012m\012m\000\000\000\000\005\177\000\000\000\000\000\000\000\000\005\177\000\000\000\000\005\177\000\000\000\000\012m\000\000\000\000\000\000\012m\000\000\000\000\000\000\000\000\005\177\000\000\005\177\000\000\005\177\000\000\005\177\000\000\012m\012m\012m\000\000\012m\012m\000\000\000\000\000\000\000\000\000\000\005\177\000\000\000\000\000\000\000\000\006\n\005\177\005\177\012m\000\000\000\000\000\000\012m\nR\000\000\005\177\000\000\005\177\000\000\000\000\005\177\000\000\000\000\012m\000\000\005\177\005\177\000\238\000\000\000\000\000\000\001\130\002>\002B\002\130\000\000\000\000\000\000\000\000\000\000\000\000\005\177\000\000\000\000\000\000\005\177\020J\000\000\000\000\000\000\004m\000\000\006\206\001&\002F\000\000\002V\000\000\005\177\005\177\005\177\000\000\005\177\005\177\002b\020N\000\000\000\000\000\000\000\000\000\000\020v\000\000\000\000\000\000\000\000\000\000\005\177\002f\002\222\000\000\005\177\000\000\000\000\002\234\019V\001z\002\254\003\n\000\000\019\210\000\000\005\177\003\022\000\000\000\000\001jn\000\000\000\000\001\197\003I\000\000\000\000\000\000\000\000\007\138\001\197\025>\002\230\003I\019V\003I\000\000\000\000\003I\019\210\000\000\001\197\000\000\003I\003I\003I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\218\000\000\000\000\000\000\003I\003I\007\002\001\002\003v\000\000\000\000\001\030\000\000\b\214\000\000\000\000\001\"\019\238\020\026\000\000\000\000\003I\003I\000\000\000\000\003I\003I\001&\000\000\000\000\b\246\000\000\000\000\000\000\000\000\007\006\000\000\003I\t\014\000\000\023\158\000\000\000\000\000\000\003I\000\000\000\000\000\000\007\018\003I\000\000\000\000\t:\001v\000\000\003I\000\000\000\000\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\000\000\tR\007\214\000\000\000\000\000\000\002\233\002\233\000\000\000\000\000\000\002\233\000\000\000\000\007\218\000\000\002\233\000\000\000\000\000\000\000\000\000\000\000\000\002\233\007\226\000\000\005\002\002\233\000\000\tZ\000\000\000\000\000\000\000\000\000\000\002\233\000\n\000\000\000\000\tb\000\000\000\000\000\000\000\000\000\000\016\222\015F\000\000\002\233\015N\000\000\007\230\002\233\002\233\t\174\000\000\000\000\003N\000\000\005\173\002\233\000\000\005\173\002\233\000\000\000\000\002\233\002\233\000\000\002\233\002\233\000\000\002\233\000\000\005\173\000\000\005\173\000\000\005\173\000\000\005\173\000\000\000\000\000\000\002\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\173\002\233\000\000\002\233\000\000\017\026\005\173\n\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\173\000\000\005\173\000\000\000\000\005\173\000\000\000\000\000\000\000\000\005\173\005\173\000\238\002\233\000\000\005\197\000\000\000\000\000\000\002\233\005\197\000\000\000\000\005\197\000\000\000\000\005\173\000\000\000\000\000\000\005\173\000\000\000\000\000\000\000\000\005\197\000\000\005\197\000\000\005\197\000\000\005\197\000\000\005\173\005\173\005\173\000\000\005\173\005\173\000\000\000\000\000\000\000\000\000\000\005\197\000\000\000\000\000\000\000\000\000\000\005\197\005\197\005\173\000\000\000\000\000\000\005\173\000\000\000\000\005\197\000\000\005\197\000\000\000\000\005\197\000\000\000\000\005\173\000\000\005\197\005\197\005\197\000\000\t\174\000\000\000\000\000\000\000\000\005\193\000\000\000\000\005\193\000\000\000\000\000\000\005\197\000\000\000\000\000\000\005\197\000\000\000\000\000\000\005\193\000\000\005\193\000\000\005\193\000\000\005\193\000\000\000\000\005\197\005\197\005\197\000\000\005\197\005\197\000\000\000\000\000\000\000\000\005\193\000\000\000\000\000\000\000\000\000\000\005\193\n\006\000\000\005\197\000\000\000\000\000\000\005\197\000\000\005\193\000\000\005\193\000\000\000\000\005\193\000\000\000\000\000\000\t\254\005\193\005\193\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012*\000\000\000\000\000\000\006\245\017\234\005\193\000\000\006\245\000\000\005\193\000\000\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\000\000\005\193\005\193\005\193\000\000\005\193\005\193\000\000\012\146\012\154\000\000\000\000\000\000\012*\000\000\000\000\000\000\000\000\000\000\012\162\005\193\r\134\000\000\000\000\005\193\000\000\000\000\000\238\000\000\012b\012z\012\130\012j\012\138\000\000\005\193\0122\012r\012\170\012\178\012\194\000\000\000\000\012\146\012\154\000\000\000\000\006\245\001I\012\202\000\000\001I\000\000\000\000\012\162\000\000\000\000\000\000\000\000\000\000\012\210\000\000\000\238\001I\000\000\001I\000\000\001I\000\000\001I\000\000\0122\012re\002>\002B\004e\000\000\003A\000\000\000\000\000\000\003A\000\000\003A\001E\001E\001E\004e\001E\001E\000\000\004e\000\000\004e\001&\002F\003A\005\030\000\000\000\000\001E\000\000\003A\000\000\000\000\000\000\004e\001E\000\000\000\000\000\000\003A\004e\003A\000\000\000\000\003A\000\000\001E\002f\002\230\003A\003A\003A\000\000\002\234\004e\001z\002\254\003\n\000\000\004e\005\226\000\000\003\022\000\000\005\"\003A\000\000\000\000\t\174\003A\000\000\000\000\000\000\004e\000\000\004e\004e\000\000\000\000\003\026\000\000\000\000\003A\003A\006>\000\000\003A\003A\004e\000\000\000\000\000\000\004e\004e\004e\000\000\004e\004e\003A\000\000\000\000\000\000\000\000\000\000\005B\003A\000\000\004e\006\n\000\000\003A\000\000\000\000\004e\n\006\004e\003A\004e\000\000\000\000\nR\000\000\004e\000\000\004e\000\000\004e\004e\000\000\000\000\000\000\000\000\004e\005\226\000\238\000\000\000\000\000\000\000\000\000\000\000\000\004e\004e\000\000\000\000\000\000\000\000\000\000\004e\004e\007\002\001\002\004e\000\000\000\000\001\030\000\000\b\214\000\000\000\000\001\"\000\000\000\000\000\000\000\000\004e\004e\000\000\000\000\004e\004e\001&\000\000\000\000\b\246\000\000\000\000\000\000\000\000\007\006\000\000\004e\t\014\000\000\000\000\000\000\000\000\000\000\004e\000\000\011\002\000\000\007\018\0066\000\000\000\000\015\222\001v\000\000\004e\000\000\000\000\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\000\000\tR\007\214\000\000\000\000\000\000\007\002\001\002\000\000\000\000\000\000\001\030\000\000\b\214\007\218\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\226\000\000\005\002\001&\000\000\000\000\b\246\000\000\000\000\000\000\000\000\007\006\000\000\000\000\t\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\018\015\238\000\000\007\230\t:\001v\000\000\000\000\000\000\003N\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\000\000\tR\007\214\000\000\000\000\000\000\007\002\001\002\000\000\000\000\000\000\001\030\000\000\b\214\007\218\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\226\000\000\005\002\001&\000\000\tZ\b\246\000\000\000\000\000\000\000\000\007\006\000\000\000\000\t\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\018\018\186\000\000\007\230\t:\001v\000\000\000\000\000\000\003N\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\000\000\tR\007\214\000\000\001u\000\000\011\245\001u\000\000\000\000\000\000\000\000\000\000\000\000\007\218\000\000\011\245\000\000\000\000\001u\000\000\001u\000\000\001u\007\226\001u\005\002\000\000\000\000\tZ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001u\000\000\000\000\000\000\000\000\000\000\001u\011\245\000\000\000\000\000\000\019*\000\000\007\230\011\245\000\000\000\000\000\000\000\000\003N\001u\000\000\000\000\000\000\000\000\001u\001u\001u\000\000\000\000\000\000\000\000\000\000\000\000\0019\000\000\000\157\0019\000\000\000\000\000\000\001u\000\000\000\000\000\000\011\245\000\157\000\000\000\000\0019\000\000\0019\000\000\0019\000\000\0019\000\000\000\000\001u\001u\001u\000\000\001u\001u\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\000\000\000\000\0019\000\157\000\000\000\000\000\000\000\000\000\000\001u\000\157\000\000\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\001u\0019\0019\0019\000\000\000\000\000\000\001\130\007\002\001\002\005\234\000\000\000\000\001\030\000\000\b\214\000\000\0019\001\"\000\000\000\000\000\157\006\202\000\000\000\000\000\000\004y\000\000\006\206\001&\000\000\000\000\b\246\000\000\0019\0019\0019\007\006\0019\0019\t\014\006\218\000\000\000\000\000\000\000\000\000\000\019n\0242\000\000\007\018\000\000\000\000\000\000\007\030\001v\007\138\0019\025>\000\000\000\000\019V\001z\000\000\000\000\007\158\019\210\000\000\0019\007\162\000\000\007\166\001\002\tR\007\214\000\000\001\030\000\000\000\000\000\000\000\000\001\"\019\218\000\000\000\000\000\000\007\218\006M\000\000\000\000\000\000\000\000\001&\000\000\001*\000\000\007\226\001.\005\002\019\238\020\026\023\182\000\000\004y\004y\000\000\000\000\000\000\0012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001f\001v\000\000\000\000\024\242\023\158\007\230\000\000\001z\000\000\000\000\n\134\003N\000\000\000\000\n\138\n\142\n\154\000\000\000\000\007\214\000\000\000\000\000\000\004E\000\000\000\000\004E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\000\000\000Y\004E\000\000\000\000\007\226\004E\005\002\004E\000\000\000\000\000Y\000\000\000\000\000\000\000Y\n\162\000\000\n\166\000Y\000Y\004E\ba\000\000\000\000\000\000\000\000\004E\000\000\000\000\000\000\000\000\007\230\n\182\000\000\000\000\000\000\011.\003N\000\000\000Y\004E\000\000\000Y\000\000\000\000\004E\000Y\000\000\000\000\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\000\000Y\000Y\000Y\000\000\004E\000\000\000\000\000\000\003A\000Y\000Y\003A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\004E\004E\003A\000Y\004E\004E\003A\000\000\003A\000\000\000\000\000\000\000\000\000\000\000Y\000\000\000\000\000Y\000\000\000\000\000\000\003A\005\030\004E\ba\000\000\000\000\003A\000Y\000\000\000\000\000Y\000\000\000\000\020\166\000\000\003A\012*\003A\000\000\000\000\003A\000\000\000\000\000Y\014B\003A\003A\003A\000\000\000\000\000\000\000\000\012b\012z\012\130\012j\012\138\000\000\000\000\000\000\000\000\003A\000\000\000\000\000\000\003A\012\146\012\154\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\162\003A\003A\006\146\000\000\003A\003A\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0122\012r\012\170\012\178\012\194\000\000\005B\003A\000\000\000\000\001\002\000\000\003A\012\202\001\030\000\000\000\000\000\000\000\000\001\"\000\000\000\000\000\000\000\000\012\210\006u\000\000\000\000\000\000\000\000\001&\000\000\001*\000\000\000\000\001.\000\000\000\000\000\000\000\000\012\242\000\000\012\250\012\186\000\000\000\000\0012\000\000\000\000\012\218\000\000\000\000\000\000\000\000\000\000\001f\001v\012\226\012\234\000\000\000\000\000\000\000\000\001z\000\000\000\000\n\134\000\000\000\000\000\000\n\138\n\142\n\154\000\000\000\000\007\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004M\004M\000\000\000\000\000\000\004M\000\000\000\000\000\000\000\000\004M\000\000\007\226\000\000\005\002\000\000\006\005\004M\000\000\006\005\000\000\004M\000\000\n\162\000\000\n\166\000\000\000\000\000\000\004M\023\234\006\005\000\000\024\002\000\000\006\005\000\000\006\005\000\000\007\230\nb\030\000\000\011\237\000\000\000\000\001&\011\237\000\000\000\000\000\000\000\000\000\000\000\000\007\006\000\000\000\000\000\000\000\000\000\000\011\237\011\237\002\206\000\000\011\237\011\237\000\000\007\018\000\000\000\000\000\000\007\030\001v\000\000\000\000\000\000\011\237\000\000\000\000\001z\005\214\000\000\007\158\011\237\000\000\000\000\007\162\000\000\007\166\007\202\000\000\007\214\000\000\000\000\011\237\000\000\000\000\000\000\000\000\000\000\000\000\007\002\001\002\007\218\000\000\000\000\001\030\000\000\000\000\000\000\000\000\001\"\000\000\007\226\000\000\005\002\000\000\b\"\000\000\b\225\000\000\000\000\001&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\006\000\000\000\000\000\000\000\000\000\000\000\000\006Z\000\000\000\000\007\230\000\000\b\198\007\018\n\218\000\000\003N\007\030\001v\000\000\000\000\000\000\000\000\000\000\000\000\001z\000\000\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\007\202\000\000\007\214\000\000\000\000\000\000\000\000\000\000\007\002\001\002\000\000\000\000\000\000\001\030\007\218\b\214\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\007\226\000\000\005\002\000\000\b\"\001&\000\000\000\000\b\246\000\000\000\000\000\000\000\000\007\006\000\000\000\000\t\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\018\007\230\000\000\b\225\n\242\001v\000\000\003N\000\000\000\000\005i\000\000\001z\005i\000\000\007\158\000\000\000\000\000\000\007\162\000\000\007\166\000\000\tR\007\214\005i\000\000\000\000\000\000\005i\000\000\005i\000\000\000\000\000\000\000\000\007\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005i\000\000\007\226\000\000\005\002\000\000\005i\000\000\000\000\000\000\000\000\000\000\000\000\nR\000\000\005i\000\000\005i\000\000\000\000\005i\000\000\000\000\000\000\000\000\005i\005i\000\238\000\000\007\230\000\000\000\000\000\000\000\000\000\000\003N\005m\000\000\000\000\005m\000\000\005i\005i\000\000\000\000\005i\000\000\000\000\000\000\000\000\000\000\005m\000\000\000\000\000\000\005m\000\000\005m\005i\005i\000\000\000\000\005i\005i\000\000\000\000\000\000\000\000\000\000\000\000\005m\000\000\000\000\000\000\000\000\000\000\005m\000\000\000\000\000\000\000\000\005i\000\000\nR\000\000\005m\003A\005m\000\000\003A\005m\000\000\005i\000\000\000\000\005m\005m\000\238\000\000\000\000\000\000\003A\000\000\000\000\000\000\003A\000\000\003A\000\000\000\000\000\000\005m\005m\000\000\000\000\005m\000\000\000\000\000\000\000\000\003A\005\030\000\000\000\000\000\000\000\000\003A\000\000\005m\005m\000\000\000\000\005m\005m\000\000\003A\000\000\003A\000\000\000\000\003A\000\000\000\000\000\000\000\000\003A\003A\003A\000\000\000\000\000\000\005m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003A\005m\000\000\000\000\003A\000\000\000\000\000\000\000\000\011\173\000\000\001\002\011\173\000\000\000\000\027\214\000\000\003A\003A\020*\027\218\003A\003A\000\000\011\173\000\000\000\000\000\000\000\000\000\000\011\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005B\003A\000\000\000\000\011\173\000\000\000\000\000\000\000\000\000\000\011\173\000\000\000\000\000\000\000\000\000\000\000\000\001\142\001vt\000\000\000\000\006\t\000\000\001\201\000\000\000\000\000\000\001\201\000\000\002>\002\210\000\000\000\000\006\t\001\030\000\000\000\000\006\t\000\000\006\t\001\201\001\201\000\000\000\000\001\201\001\201\000\000\000\000\000\000\000\000\001&\002F\006\t\002V\002\214\000\000\001\201\000\000\006\t\000\000\000\000\002b\000\000\001\201\000\000\000\000\000\000\006\t\005f\006\t\000\000\000\000\006\t\000\000\001\201\002\218\002\222\006\t\006\t\000\238\000\000\002\234\000\000\001z\002\254\003\n\000\000\000\000\000\000\000\000\004\194\000\000\005\138\006\t\000\000\007\002\001\002\006\t\000\000\000\000\001\030\000\000\000\000\000\000\000\000\001\"\000\000\003\026\002>\002B\006\t\006\t\000\000\004\198\006\t\006\t\001&\000\000\000\000\005\002\000\000\000\000\000\000\000\000\007\006\000\000\006\t\000\000\000\000\001&\002\246\005\150\002V\006\t\000\000\000\000\000\000\007\018\000\000\000\000\002b\007\030\001v\000\000\006\t\000\000\000\000\000\000\005\n\001z\000\000\000\000\007\158\000\000\002f\002\222\007\162\000\000\007\166\007\202\002\234\007\214\001z\002\254\003\n\000\000\000\000\000\000\000\000\003\022\000\000\007\002\001\002\007\218\000\000\000\000\001\030\000\000\000\000\000\000\000\000\001\"\000\000\007\226\000\000\005\002\003\026\b\"\000\000\b\138\000\000\000\000\001&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\230\000\000\000\000\007\018\000\000\000\000\003N\007\030\001v\t\174\000\000\000\000\000\000\000\000\006\253\001z\000\000\006\253\007\158\000\000\000\000\000\000\007\162\000\000\007\166\007\202\000\000\007\214\000\000\006\253\000\000\000\000\000\000\006\253\000\000\006\253\000\000\000\000\000\000\007\218\000\000\000\000\000\000\004e\000\000\000\000\004e\000\000\006\253\007\226\000\000\005\002\000\000\b\"\006\253\n\006\000\000\000\000\004e\000\000\000\000\000\000\004e\006\253\004e\006\253\000\000\000\000\006\253\000\000\000\000\000\000\000\000\006\253\006\253\000\238\007\230\004e\000\000\000\000\000\000\000\000\003N\004e\000\000\000\000\000\000\000\000\000\000\006\253\003\"\000\000\004e\006\253\004e\000\000\000\000\004e\000\000\b\001\b\001\000\000\004e\005\226\b\001\000\000\006\253\006\253\000\000\b\001\006\253\006\253\000\000\000\000\000\000\000\000\007\150\000\000\004e\000\000\b\001\000\000\004e\000\000\000\000\000\000\000\000\000\000\b\001\006\253\000\000\000\000\000\000\000\000\000\000\004e\004e\000\000\000\000\004e\004e\b\001\000\000\000\000\000\000\b\001\b\001\003.\000\000\000\000\000\000\006\n\000\000\b\001\000\000\000\000\b\001\000\000\004e\000\000\b\001\000\000\b\001\b\001\000\000\b\001\000\000\000\000\000\000\004e\007\002\001\002\000\000\000\000\000\000\001\030\000\000\b\001\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\006Q\b\001\000\000\b\001\000\000\001&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\018\000\000\b\001\000\000\007\030\001v\000\000\000\000\b\001\000\000\000\237\000\000\001zn\000\000\000\000\000\000\005\253\000\000\000\000\000\000\005\253\000\000\005\253\000\000\000\000\000\000\006\249\000\000\000\000\000\000\006\249\000\000\000\000\000\000\000\000\005\253\000\000\000\000\000\000\000\000\000\000\005\253\000\000\006\249\006\249\019\130\000\000\006\249\006\249\000\000\005\253\000\000\005\253\000\000\000\000\005\253\000\000\000\000\000\000\000\000\005\253\005\253\000\000\000\000\000\000\000\000\006\249\001a\000\000\000\000\001a\000\000\000\000\000\000\000\000\000\000\005\253\000\000\000\000\000\000\005\253\000\000\001a\000\000\001a\000\000\001a\000\000\001a\000\000\000\000\006\209\006\209\005\253\005\253\000\000\000\000\005\253\005\253\011Y\000\000\001a\011Y\000\000\000\000\000\000\000\000\001a\000\000\003\014\000\000\000\000\006\209\006\209\011Y\006\209\005\253\000\000\011Y\000\000\011Y\001a\000\000\006\209\000\000\000\000\001a\001a\000\238\000\000\000\000\000\000\000\000\011Y\000\000\000\000\000\000\006\209\006\209\011Y\000\000\000\000\001a\006\209\000\000\006\209\006\209\006\209\011Y\000\000\011Y\000\000\006\209\011Y\000\000\000\000\000\000\000\000\011Y\001a\001a\001a\000\000\001a\001a\000\000\000\000\000\000\011]\006\209\000\000\011]\000\000\000\000\011Y\012\014\000\000\000\000\011Y\000\000\000\000\000\000\001a\011]\000\000\000\000\000\000\011]\000\000\011]\000\000\011Y\011Y\001a\000\000\011Y\011Y\000\000\000\000\000\000\000\000\000\000\011]\000\000\000\000\000\000\000\000\000\000\011]\000\000\003\002\000\000\006\209\000\000\011Y\000\000\000\000\011]\004=\011]\000\000\004=\011]\000\000\000\000\r\002\000\000\011]\000\000\000\000\000\000\000\000\000\000\004=\000\000\000\000\000\000\004=\000\000\004=\000\000\000\000\000\000\011]\012\030\000\000\000\000\011]\000\000\000\000\000\000\000\000\004=\000\000\000\000\000\000\000\000\000\000\004=\000\000\011]\011]\000\000\000\000\011]\011]\000\000\004=\000\000\004=\000\000\000\000\004=\000\000\000\000\000\000\000\000\004=\000\000\000\000\000\000\t\174\000\000\011]\000\000\000\000\005u\000\000\000\000\005u\000\000\000\000\000\000\004=\r\002\000\000\000\000\004=\000\000\000\000\000\000\005u\000\000\000\000\000\000\005u\000\000\005u\000\000\000\000\004=\004=\000\000\000\000\004=\004=\0045\000\000\000\000\0045\005u\000\000\000\000\000\000\000\000\000\000\005u\n\006\000\000\000\000\000\000\0045\000\000\004=\000\000\0045\000\000\0045\000\000\000\000\005u\000\000\000\000\000\000\019\170\005u\005u\000\238\000\000\000\000\0045\000\000\000\000\000\000\000\000\000\000\0045\000\000\000\000\000\000\000\000\005u\000\000\000\000\000\000\0045\004U\0045\000\000\004U\0045\000\000\012}\012}\000\000\0045\000\000\000\000\005u\005u\000\000\004U\005u\005u\000\000\004U\000\000\004U\000\000\000\000\000\000\0045\000\000\012}\012}\0045\012}\t\194\000\000\000\000\004U\005u\000\000\000\000\012}\000\000\004U\000\000\0045\0045\000\000\000\000\0045\0045\000\000\004U\000\000\004U\012}\012}\004U\000\000\000\000\000\000\012}\004U\012}\012}\012}\000\000\000\000\0045\000\000\012}\004%\000\000\000\000\004%\000\000\000\000\000\000\004U\022V\002>\002B\004U\000\000\000\000\000\000\004%\012}\000\000\000\000\004%\000\000\004%\000\000\000\000\004U\004U\000\000\004\198\004U\004U\001&\002F\000\000\002V\004%\000\000\000\000\000\000\000\000\000\000\004%\002b\000\000\000\000\000\000\000\000\000\000\004U\000\000\004%\000\000\004%\000\000\000\000\004%\002f\002\222\000\000\0236\004%\000\000\002\234\007y\001z\002\254\003\n\000\000\000\000\000\000\000\000\003\022\000\000\000\000\000\000\000\000\004%\000\000\000\000\000\000\004%\007y\007y\000\000\007y\007y\000\000\000\000\003\026\000\000\007]\000\000\000\000\004%\004%\000\000\000\000\004%\004%\007}\000\000\000\000\000\000\000\000\000\000\000\000\007y\000\000\007]\007]\000\000\007]\007]\000\000\000\000\000\000\004%\007}\007}\000\000\007}\007}\000\000\000\000\000\000\000\000\000\238\025\018\000\000\003J\007q\003N\000\000\007]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007y\007}\000\000\000\000\000\000\000\000\000\000\007q\007q\000\000\007q\007q\007]\000\000\000\000\000\000\000\000\000\000\007y\000\000\007y\000\238\000\000\000\000\000\000\000\000\000\000\007]\000\000\000\000\000\000\000\000\007q\000\000\007y\000\000\007}\bB\007y\000\000\000\000\000\000\007y\000\000\007y\007]\000\000\007]\007y\000\000\000\000\000\000\000\238\000\000\007}\000\000\007}\000\000\000\000\000\000\000\000\007]\000\000\000\000\bB\007]\000\000\007q\000\000\007]\007}\007]\000\000\bB\007}\007]\004-\000\000\007}\004-\007}\000\000\000\000\000\000\007}\007q\000\000\007q\000\000\000\000\000\000\004-\000\000\000\000\000\000\004-\000\000\004-\000\000\000\000\000\000\bn\000\000\004]\bB\007q\004]\000\000\000\000\007q\004-\007q\000\000\000\000\000\000\007q\004-\000\000\004]\000\000\000\000\000\000\004]\000\000\004]\000\000\000\000\000\000\006\205\006\205\004-\000\000\000\000\000\000\000\000\004-\000\000\004]\000\000\000\000\000\000\000\000\000\000\004]\000\000\000\000\000\000\000\000\000\000\006\205\006\205\004-\006\205\000\000\000\000\000\000\000\000\004]\000\000\000\000\006\205\000\000\004]\000\000\000\000\000\000\000\000\000\000\004-\004-\000\000\000\000\004-\004-\006\205\006\205\000\000\000\000\004]\000\000\006\205\000\000\006\205\006\205\006\205\000\000\000\000\000\000\000\000\006\205\000\000\004-\002>\002B\017\134\004]\004]\000\000\000\000\004]\004]\000\000\022\226\000\000\000\000\000\000\006\205\000\000\000\000\000\000\002>\002B\018\190\001&\002\246\000\000\002V\000\000\004]\000\000\000\000\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\023^\000\000\001&\002\246\000\000\002V\000\000\000\000\000\000\002f\002\222\000\000\000\000\002b\000\000\002\234\000\000\001z\002\254\003\n\000\000\000\000\000\000\000\000\003\022\003\194\000\000\002f\002\222\002>\002B\019.\000\000\002\234\000\000\001z\002\254\003\n\000\000\000\000\000\000\003\026\003\022\000\000\000\000\000\000\000\000\000\000\002>\002B\001&\002\246\001\130\002V\000\000\002\130\000\000\000\000\000\000\003\026\000\000\002b\000\000\000\000\000\000\000\000\000\000\020J\000\000\001&\002F\004m\000\000\006\206\000\000\002f\002\222\002>\002B\000\000\000\000\002\234\000\000\001z\002\254\003\n\020N\000\000\000\000\000\000\003\022\000\000\020v\000\000\002f\002\238\000\000\000\000\001&\002F\002\234\000\000\001z\002\254\003\n\000\000\019V\003\026\000\000\003\022\000\000\019\210\000\000\000\000\002>\002B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002f\002\238\000\000\003\026\020\238\000\000\002\234\004v\001z\002\254\003\n\000\000\001&\002F\000\000\003\022\000\000\000\000\000\000\000\000\000\000\019\238\021\002\000\000\000\000\004m\004m\004^\000\000\000\000\000\000\000\000\003\026\000\000\000\000\000\000\004\229\002f\002\238\000\000\000\000\000\000\000\000\002\234\021\018\001z\002\254\003\n\000\000\000\000\000\000\000\000\003\022\000\000\000\000\000\000\004^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\026\000\000\000\000\000\000\004\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^"))
  
  and lhs =
    (8, "\012\011\n\t\b~}}}||{{{{{{{{zzyxxxxxxxxxwvuutttttsrrqqppppppppppppppoonnmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmllkkjjiihhggffeeddccbbaaaaaa`_^]\\[ZYXWWWWWWWVVUUTTTTSSSSSSRRQQQQQPPOONMLLKKKKKJJIIHHHGGGGGGFFFEEDDCCBBAA@@@??>>==<<;;::9988776655544433322211110/..................-----,,,,++++++++++++++++++++++++++++++++++++++++++++**))))))))))))))))(((((((((((((((((((((((((((((((((((((((((((((((((((''&&&%%$$$$$$$$$$$$$$$$$##\"\"!!!!!!!    \031\031\030\030\030\029\029\028\027\026\026\026\025\025\024\024\024\023\023\022\021\021\020\019\019\019\019\019\018\017\017\016\016\016\015\015\015\014\014\014\014\r\r")
  
  and goto =
    ((16, "\000%\001#\000O\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\252\000T\000&\000\241\002\b\b\192\000\000\000\175\002\208\t\020\000W\002\234\t\240\000\000\000\000\000\000\000\000\012~\000\005\003\188\000\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\194\000\000\000p\000\000\000\000\012~\000\000\000\198\001\128\000H\004P\000\002\000p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001V\000\000\000\000\000\000\000\000\000\000\001n\000\000\000\000\000\000\001r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\140\000\000\000\000\001\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000C\222\001\254\004\254\000\215\000\000\005V2B\002\146\005\128\000\252\000\000\001\014\000\000\001\230\004\030\000\000\003\006\000\000\000\000\000\000\000\000\000\000\000#\000\000\000\218\004T#X\000\0002\174C\222\000\000\001V\000\000\002~\000\000\031F\003\168\000\000\004F\000\000&\150\004|\000\000)6&\132\000\023\000\000\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\160\004^\000\000\000\000\000\000\007\178\000\000\003\154\000\000\000\000\004\128\000\252\000\000\000\000\003\188\000\000\t\\\000\000\004\128\004D\004\128\000\000\000\000\000\000\000\000\000\000?\130\000\000\005\206\004\238\000\000\007\150\005\252\r\226\000\000\000\000\000\000\004|\000\000\000\000\000\000\000\000\0046\000\000\000\000\000\000\000\000\000\000:\018\000\000\000\000\000\000\000\000\000\000\000\000\000j\005\014\000\000\000\000\000\000\000\000\004\182\000\000\029\\\000\000\006R\000\000\006\170\002\160\000\000\000\000\004\128\004\"\000\000\000\000\000\000\000\000\000\000\000\000\015\\\000\000\000\000\000\000\000\000\004\148\003$\000\000\000\000E\158\0046\0046\000\000E\176\0046&\132\000\000\001\000\000\000\000\000\000\000$\006\007\n\000\000\007\"\000\000\000\000\000\000\b\006\000\000\000\000\000\000\000\000\001\014\000\000\000\000\000\000\004\180\002\244\bB\000\000\000\000\000\000\t\000\004\128\000\000\004\128\b\210\000\000\011\212\004\128\004\128\007&\000\000\000\000\004\214\001\014\000\000\000\000\000\000\0046\000\000\005X\0078\000\000\b\150\000\000\000\000\000\000\000\000\0046\0010\001t\b\182\000\000\000\000\000\000\000\000\b\228\000\000\000\000\000\000\000\000\000\000#\150\006l\003\152\001\186\001\202\005\166\007H\002\"\0042\005|\004T\006\164\004hE\242\0046F\026\0046\004\168\000\000\000\000\000\000\006\206\000\000\004x\001Z\004\180\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007N\000\000\000\000\003\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005X\001\"\007^\000\000\000\000\006\134\007@\006\252\005\160\000\000\000\000\007\n\004\188\004\192\000\000\b\016\000\000\000\000\000\000\006`\006h\007n\003\\\bD\006l\006\226\bH\006\228:\148\000\000\000\000\000\000\000\000\000\000\000\000\000\0005J\000\000\007\154\b\130\bN\000\000\000\000\000\000\000\000\000\171\000\000\000\000\b\180\006n\007\228\b\200$F\000\000\000\000\007\238\t\002\t\250\007\254\tb\nD\000\000$P\b\016\t~\t\002\000\0005\0145X6\014\000\155\000\000\000\000\000\000\tBF\128\0046\t\204:\214\t*\t\162\027\194\000\000\006\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\nb:\248\000\000\tX\t\164;\142\000\000\000\000\000\000;\152\tJ;\254\tJ\000\000<\134\tJ\000\000<\148\tJ\tJ\tJ\000\000<\158\tJ<\254\tJ\003\150\000\0006\014\000\000\000\000\000\000\tJ6N\000\000\000\000\000\000\tJ\000\000\000\139\n,\000\000\000\000\000\000\000\000\000\000\000\000=h\000\000\n\b\000\000F\146\0046\000\000\000\000\000\000\000\000\n\n\n\172\n\1783V@\"\n\220\000\0006X\tJG\018\0046\n\196\000\000\000\000\000\000\000\0005J\n\170\n\174\000\000\000\0006\194!D\000\000\0114\n<\nD\nZ\t\172\b8\t\184\000}\n\246\000\000\000\000\000a\005v\t\234\003\\\n\136\000\000\000\000\005\186\000\000\002\148\000,\004\174\000\243\011\226\000\000\000\000!V\000\000L\166\011\158\000\000\000\030\000\000\000H\000\000\000\000\000\156\000\000\000\000\000\000\012\022\000\000\006\004\002\148\000\000\000\000\n\244\000\000\000\000\000\000\000\000\000\000\000\000\002\148\000\000\002\148\000\000\000\000\t\188\000\000\0022\007\228\000\000\0022\000\000\006N\002\148\000\000\000\000\000\000\000\000\000\000\0022\011\178\006\"\011\230\011\248\011\150%\b\000\186\000\0003\"%,\n\242\t\240F \011\022\n\000\0120\011v\nB\012\174\011~\nD3\1507\012\tJ\r0\011\154\ntB\2525J\012d\000\000\004~\rz\011\208\n|=\134\tJ\r\158\011\216\n\142=\158\tJ\r\232F\230\000\000\000\000\000\000\000\000\000\000\005D\002\020\000\000\000\000\000\000\011\230\n\152\t\192\0022\012\030\002\148\000\000\000\000\000\0003V\000\000GD\0046\0142\011\242\n\162G\152\000\000G\176\000\000\000\000\014\248%`\023\244\000\000\000\000\000\000\000\000G\238\000\000\000\000\000\000\002\028\015\024\000\000\000\000\000\000%\202H\000\000\000\000\000\000\000\000\000\000\000\011\214\015b\000\000\000\000\011\220\015\250\000\000\011\230&\"\011\230&\212\011\230\000\000H0\000\000'\006\011\230\016R\002\138\016\188\000\000\000\000'\154\011\230'\204\011\230(J\011\230(|\011\230(\206\011\230)\016\011\230)~\011\230)\192\011\230*\002\011\230*D\011\230*\178\011\230*\244\011\230+6\011\230+x\011\230+\230\011\230,(\011\230,j\011\230,\172\011\230-\026\011\230-\\\011\230\n\1707z\000\000HJ\0046\017\026\000\000\012\b\017\156\000\000>&\tJ>r\tJ>\138\tJ\007`\000\000\000\000\000\000\000\000>\148\tJ\006:\000\000\000\000\000\000\011\230\017\250\000\000\000\000-\158\011\230\000\000\000\000\000\000\018N\000\000\000\000\011\230\018\152\000\000\019\026\000\000\000\000\019P\000\000\000\000\000\000HN\000\000\000\000\019v\000\000\000\000-\224\011\230\019\210\000\000\000\000.N\011\230\020B\000\000\000\000.\144\011\230\0026\020\154\000\000\000\000.\210\011\230\020\242\000\000\000\000/\020\011\230/\130\011\230\000\000/\196\011\230\000\000\000\000\020\250\000\000\000\0000\006\011\230\021R\000\000\000\0000H\011\230\021\170\000\000\000\0000\182\011\230\000\0000\248\011\230\000\000\007J\000\000\000\000\011\230\000\000\000\000\022\026\000\000\000\000\022l\000\000\000\000\000\000\012\b\022v\000\000\000\000\022\202\000\0007\190\000\000\000\000F\230\000\000\000\000\023\150\000\000\000\000\000\000\023\234\000\000\000\000\000\000\rL\000\000\000\000\002^\000\000\0012\000\000\007\182H\152\00468\158\0046I\020\0046\000\000\012\254\000\000\001\230\000\000\000\000\000\000\000\000\000\000\005D\000\000\000\000\012\\\000\000\000\000\024F\000\000\024\152\000\000\000\000\000\000\024\218\000\000\000\000\025\138\012t\025\188\000\000\025\220\000\000\000\000\000\0005J\r\020\000\000+\170\015\030\004\128\026\184\000\000\000\000.\018\000\000\000\000\000\000\tJ\000\000I&\0046\000\000\000\0000z\000\000\000\000\027&\000\000\027p\000\000\000\000\000\000\000\0008\002\000\000\000\000\000\0001:\011\2301|\011\230\000\000\000\000\000\000\000\000\011\230\000\000\000\000\000\000\000\000\011\230\000\000\r\146\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\180\n$\0022\027z\000\000\012\132\n\212\r\016\003 \n@\0022\014z\002\148\011\b\0022\000\000\028V\000\000\006\158\000\000\012\162\n\218\0068\012\186\n\234\000\000\028`\000\000\n\236\r\1488r\b8\000\000\000\000\000\000\028\170\000\000\000\0008\230\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\158\rn\000\000I0\0046\029\024\000\000\000\000IR\0046\029\154\000\000\000\000\030\024\000\000\000\000\b\140\000\000\011\230\000\0003\160\000\000\000\0004L\000\000\011\230\000\000\014\220\002\148\000\000\016\142\002\148\000\000\016\176\002\148\000\000\0022\002\148\000\000\tJ\000\000I\174\0046\000\000\000\159\004\182\n\240\rx\000\000\014,\030b\000\000\000\000\030\150\000\000\b\214\000\000\002T\000\000\000\000\000\000\000\000\000\000\000\000J\000\0046\000\000\0148\031*\000\000\000\000\031\134\000\000\000\243\n\244\r\230\000\000@nA>\r\166\000\000J\n\0046\031\218\000\000\000\000J*\0046\000\000 J\000\000\0046\000\000\t\024\000\000\000d\000\000\000\000\000\000\000\000\000\000\000\000B\254\000\000\000\000@xCL\r\168\000\000J\142\0046 \166\000\000\000\000 \250\000\000\000\000\006z\003$>\174\tJ!\002\000\000\r\030\r*\n\248\rP\r\234\017\230\002\148\t<\000\000\011\026\r\206\r\208\007t\t\158\r\152\011:\r\224\007\148\t\188\r\168\000\000\000\000\007\178\t\248\000\000\b\018\003n\rz\011D\r\218\002~\000\000\r~\011L\b>\000\000J\226\0046\014\024\014*\000\000\n\012\000\000\r\150\011^\b\030\r\174\003\018\011p\n$\000\000\011x\011f\000\000\bZ:\172\r\164\r\208\011\138\001:\011\168\000\000\011\140\002\206\011\224\000\000\r\226\011\142\014\174\000\000\004\158\011\242\000\000\014\176\000\000\019\004\002\148\014~\011\146\014\228\000\000\021\202\004\148\014\178\000\000\000\000\005~\002\172\012.\000\000\021\252\002\148\012@\000\000\005\218\000\000\014p\011\164\023F\004\194\000\000\014r\011\192\b\252\r\174\014t\014v\011\210\015\212\000\000\014\140\002H\000\000\000\000\000\000\000\000\002\250\011\244\014dJ\242\0046\000\000\001\176\012$\015\030\000\000\000\000\000\000\000\000\000\000\000\000K\012\007\164\000\000\012*\015t\000\000\000\000\000\000\000\000\000\000\000\000C\188\012d\000\000\012X\005\164\000\000\012n\012\138\005\240\000\000\007\012D\n\000\000\003>\000\000K\164\0046\0046\000\000\000\000\007\250\000\000\007\"\000\000\b\236\007\250\007\250\000\000\012\142D,\0046K\202\0046\012f\000\000\000\000\000\000\012\252\000\000\000\000\004&\000\000\t\030\014\228\012\170\016\018\014\202\000\000\000\000\n\234\tT\015\016\000\000\000\000\012\172\016\"\014\218\000\000\000\000\n\218\000\000\bp\000\000\023\014?4\0046\000\0001\028\012\212\000\0006\164\000\000\000\000\000\000\007\250\000\000\000\000\rF\015\"\012\188\016>\014\252\000\000\000\000K\240\r`\015>\000\000\000\000\000\000Dt\000\000\000\000\000\000\000\000\000\000\000\000\rl\000\000\015d\012\192\005`\000\000\016`\016\020\r\136\015\128\000\000\000\000\015\132\012\196\007\016\000\000\000\0001\216\016&\r\164\015\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0046\015>\r\022\016\158\015Z\000\000@\134\000\229\r\028\0154\004\004\r\"!\198\r\228\000\000\rF\rj\000\159\002\222\r\166\tx\r\174\016B9*\014\020\000\000\r\212\r\216\007\196\000\000\015\134D\182\000\000\002\236\000\000\014\n@\224@\236\015\186\015*\019D\000\000@\212\007J\000\000\000\157\000\000\000\000\000\157\000\000\000\000\000\157\t\236\000\000\020\196\000\157\016N9L\014F\000\000\000\157\000\000L.\000\000\000\000\000\157\000\000\000\000\014r\000\000\0238\000d\014\128\000\000\014ZE\026\014\156\000\000\000\000\000\000\014\160\000\000\000\000\006j\000\000\000\157L\162\000\000\024\252\000\157A8\000\000\015\022\015\182\014f\016\208\015\132\000\000A\236\015H\015\202\000\000\000\000\000\000B6\n<\000\000\000\000\000\000\000\000\000\000\011\214\000\000\011\220\015f\000\000\015\218\000\000\000\000\000\000\000\000\015lB\128\000\000\000\000\000\000\011\214\000\000\011\220\000\000\000\000\000\000\000\000\000\000\000\000\004\138\000\000\014t\014\186\007\220\000\000\015vB\194\000\000\000\000\000\000\000\000\000\000\000\000\016n\004r\001B\000\000\000\000\000\000\000\000\007\016\007@2\026\016~\015\148\000\000\000\000\016t\006\160\005\b\000\000\000\000\000\000\002\148\000\000\t\166\000\000\000\000\000\000\000\000\015\154\014\162\014\218\0022\000\000\024\178\002\148\000\000\016\218\000\000\000\000\000\000\000\0004\148\000\000\000\0005@\000\000\"\"\000\000\"t\000\000\000\000\"~\000\000\000\000\000\000\000\000\"\208\000\000#\178\000\000\000\000\000\000\000\000\000\000\029X\000\000\000\000\000\000\000\128\000p\000\000\000\000\000\000\000\000\000\000\005\244\000p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000-\000\000\000\000\000\000E4\000\000\0046\000\000\005\\\000\000\000\000\000\000\002\202\000\000\000\000\000\000\006Z\000\000\000\000\000\000\000v\000\000\000\000\000\0009\232\tJ\000\000\000\000\002t\000\000\000\000\000\000\000\000\005D\004\200\015\192\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018@\000\000\015\162\000\000\000\000\000\000\000\000\005\018\006\182\007r\nP\000\000\000\000\015\170\026\028\000\000\000\000\000\000\015\178?\148\000\000\000\000\000\000\000\000"), (16, "\006N\0007\002\205\002\206\001\252\000Q\002f\000\168\000U\001\235\000\177\002j\000Q\006\144\004\190\000U\000V\002\237\006O\006\184\002\133\006Q\000\142\001\252\002\137\002\238\000\206\006+\000\202\004\192\006R\006`\0007\002j\000\206\004\134\002~\006N\002\251\002\205\002\206\001\252\002\133\002o\000;\006\014\002\137\000Q\000\206\000Q\000U\000V\000U\001\235\002\237\006O\006_\000Q\006Q\006S\000U\001\235\002\238\001\236\006j\004\197\002\138\006R\006`\000?\002j\0021\002\143\006\210\006\016\002\251\002\205\002\206\001\252\002\133\006\014\002\139\0007\002\137\002\127\000\206\006\195\001\238\002\138\006\017\0067\002\237\000X\006T\006\019\001\238\006S\002\253\006<\002\238\006\177\006U\000C\002\139\001\148\006\159\0069\000U\002\209\006\016\002\255\000U\002\251\002\205\002\206\001\252\000\200\002\145\002\140\001\011\006e\003\006\000\206\000\209\006\017\002\138\004\201\006f\001\148\006\019\006T\000U\006:\006(\002\253\006\021\003\206\006{\006U\0007\002\139\002x\006g\003\221\000U\002\209\000F\002\255\000U\006\230\000\168\006Y\006\131\001\168\006\186\006/\006[\006e\003\006\000\168\006\196\000\178\001\168\002z\006f\000\140\004$\006]\001\014\000\206\003\000\002\253\003\n\002\002\006\211\000:\001\155\006\231\003\016\006g\001\155\003\002\002\209\006^\002\255\000U\002\133\000N\006Y\000\210\002\137\006\197\000\206\006[\003\003\003\006\006\204\000\206\001\153\000\214\001\155\003\018\001!\003\208\006]\002}\0009\003\000\002\208\003\n\006N\000\206\002\205\002\206\001\252\003\016\003\007\001\155\003\002\003\224\006^\002\255\000U\001\235\001Y\000b\000\217\002\237\006O\006_\000Q\006Q\002\138\000U\000V\002\238\000\200\006\205\003\018\001\135\006R\006`\000\206\000\219\003\000\0015\003\n\006N\002\251\002\205\002\206\001\252\003\016\000\200\001\155\003\002\000=\003\209\001Y\000\206\000\209\0007\006\206\006\021\002\237\006O\006_\000\168\006Q\006S\000\173\001\148\002\238\006\148\000U\003\018\006\179\006R\006`\000Q\006\207\003\000\000U\001\235\005\024\002\251\002\205\002\206\001\252\003\001\000\206\001\155\003\002\003\220\001<\001>\001@\000\168\000\200\001\169\001\168\002\237\000\174\006T\000\206\000\219\006S\002\253\006\127\002\238\006x\006U\000W\000`\004\159\003\192\000\168\003\209\002\209\000\173\002\255\000U\002\251\002\205\002\206\001\252\000\223\002\003\001\\\001]\006e\003\006\001G\001X\006\238\002\206\001\252\006f\006\128\000X\006T\001\166\000{\001\155\002\253\001t\003\206\000\214\006U\001`\001X\005L\006g\003\221\000\127\002\209\000\131\002\255\000U\000\220\005\141\006Y\001\\\001]\000\214\0007\006[\006e\003\006\000Q\001\143\001X\000U\001\235\006f\000\140\003\222\006]\002\156\001o\003\000\002\253\003\n\001`\001X\005\143\000\229\000\149\003\016\006g\001\155\003\002\002\209\006^\002\255\000U\003c\001\135\006Y\000U\001\235\005\145\006\240\006[\003\003\003\006\000\214\003\209\001\135\003\148\000@\003\018\000U\001\235\006]\004\163\002\156\003\000\002\208\003\n\006N\005\146\002\205\002\206\001\252\003\016\003\007\001\155\003\002\003\224\006^\002\255\000U\001\235\003q\001z\001L\002\237\006O\006_\006\241\006Q\002\255\000U\000\156\002\238\000\200\003\165\003\018\006\222\006R\006`\000\206\000\219\003\000\001\031\003\n\006N\002\251\002\205\002\206\001\252\003\016\000\200\001\155\003\002\004\251\003\209\0054\000\206\000\219\000U\001\025\000X\002\237\006O\006_\005)\006Q\006S\002!\001\252\002\238\006h\006\223\003\018\005\028\006R\006`\000\214\000\206\003\000\000\206\000Q\002\157\002\251\000U\000V\002f\003\001\000Q\001\155\003\002\000U\000V\000\200\000\214\000\220\000\200\000\226\000D\000\206\000\219\006T\000\206\000\209\006S\002\253\000\162\001\148\006c\006U\000U\000G\000\220\004B\006\014\002\147\002\209\000\200\002\255\000U\002\157\000\217\001\026\000\206\000\209\001\135\001\135\003\022\006e\003\006\000\200\002\132\006\250\002\206\001\252\006f\000\206\000\209\006T\001\026\000\172\006n\002\253\006\016\002\158\000\214\006U\000U\000\171\000\168\006g\001\127\001\168\002\209\000\220\002\255\000U\005|\006\017\006Y\001O\000X\000\214\006\019\006[\006e\003\006\006#\004E\005}\006\t\001\129\006f\005\148\000X\006]\000\200\005\012\003\000\001\155\003\n\001P\000\206\000\219\001\251\001\252\003\016\006g\001\155\003\002\001)\006^\000\224\000\200\001\157\006z\006Y\002h\002\140\000\206\000\219\006[\001*\005x\001\253\004\000\002\159\001\255\002\000\003\018\004\152\000\168\006]\002n\001\168\003\000\000O\003\n\006N\000Y\002\205\002\206\001\252\003\016\001\158\001\155\003\002\006~\006^\000\191\001\135\001\156\006\253\006\254\001\159\002\237\007\000\000\220\006\251\006Q\002\255\000U\000\194\002\238\000\200\0065\003\018\001\135\006R\007\002\000\206\000\219\001\135\001\028\000\220\006N\002\251\002\205\002\206\001\252\007\017\000\200\001\135\005\147\000\221\001\177\002\156\000\206\000\219\000\197\007\t\0067\002\237\007\n\001\135\001\135\006Q\006S\002\004\000X\002\238\000\229\000X\003\227\001\252\006R\007\018\0069\005\143\002\005\000c\000\200\000U\002\251\002\205\002\206\001\252\000\206\000\219\001\137\000\168\000\200\005\208\001\168\005\145\000\220\005#\000\206\000\219\002\237\001\135\006T\000\206\006:\006S\002\253\006o\002\238\001\138\006U\000\213\005/\000\220\006\218\005\146\004\001\002\209\000\242\002\255\000U\002\251\001\136\001\026\006\129\006\130\000\249\001\160\001\161\006e\003\006\000\254\004\154\007\005\001\178\005@\004\n\001\162\001\163\006T\000\231\001\r\002\022\002\253\000X\001`\001X\006U\001\164\001X\002*\006g\001\155\002\003\002\209\001\017\002\255\000U\006\220\001V\006Y\001\160\001\161\006\202\001\158\006[\006e\003\006\000\157\007\022\006\141\001\162\001\163\002\157\001\159\001[\006]\001\135\002\132\003\000\002\253\003\n\001\164\001X\002\205\002\206\001\252\003\016\006g\001\155\003\002\002\209\006^\002\255\000U\000X\002j\006Y\002\141\002\237\006\128\002\132\006[\003\003\003\006\002\133\0058\002\238\000\200\002\137\003\018\000\206\000\160\006]\000\206\000\219\003\000\0040\003\n\006N\002\251\002\205\002\206\001\252\003\016\003\007\001\155\003\002\000\200\006^\002j\000X\002k\000\163\000\206\000\209\002\237\006O\006l\002\133\006Q\001a\001\174\002\137\002\238\000\206\001\173\003\018\0007\006R\006`\002\138\005;\003\000\001\135\003\n\006N\002\251\002\205\002\206\001\252\003\016\005:\001\155\003\002\005s\002\139\002j\000U\002\131\001x\007\t\000\252\002\237\007\n\000X\002\133\006Q\006S\002\253\002\137\002\238\000\206\006\226\003\018\002\138\006R\007\r\001\248\005|\002\209\001|\002\255\000U\002\251\000\250\000X\006\140\001\130\002\147\002\139\005}\003\003\003\006\002j\005\132\002\154\000\168\005:\005\218\001\168\006\137\006T\002\133\006\203\006S\002\253\002\137\006\227\000\206\006U\000U\002\138\003Y\003\007\004\133\001\141\002\209\002\158\002\255\000U\000U\002\205\002\206\001\252\000X\001\171\002\139\001\021\006e\003\006\000\200\001\172\006;\003R\001\252\006f\000\206\000\219\006T\006N\004F\003\000\002\253\003h\003\168\001\176\006U\000X\002\138\003\016\006g\001\155\003\002\002\209\007\t\002\255\000U\007\n\0067\006Y\006Q\004J\001X\002\139\006[\006e\003\006\000\214\007\016\006R\000\215\001\023\003\018\006p\0069\006]\000\200\001\185\003\000\002\159\003\n\000\214\000\206\000\219\000\215\003\216\003\016\006g\001\155\003\002\000X\006^\006\129\006\130\000\217\004E\006Y\000\200\006S\000\200\006:\006[\000\243\000\206\000\209\000\206\000\219\005\129\000\217\003\018\000U\004\215\006]\001`\001X\003\000\002\208\003\n\006N\0019\002\205\002\206\001\252\003\016\001\135\001\155\003\002\002\209\006^\002\255\000U\001;\006T\001W\000X\002\237\006O\000\225\001\190\006Q\006U\0007\001b\002\238\004\255\001\252\003\018\004\233\006R\006t\001}\000\225\001\135\001\154\003\217\005\195\002\251\004\141\005|\006V\003\006\001\167\007\012\004\238\003\170\000\214\000\200\001\135\000\215\001\186\005}\002\156\000\206\000\219\005~\002\147\000\214\006S\004\243\005\168\000\200\006X\000X\005\196\005\229\005\197\000\206\000\219\006\004\003\000\006Y\000U\000\217\005a\000X\006[\000X\003\001\001\135\001\155\003\002\002\151\004E\000\217\002\158\000X\006]\000U\002\205\002\206\001\252\006T\0015\000X\005\198\002\253\000X\002\147\004E\006U\000\245\006s\006^\002\237\000X\000\214\002\209\000\220\002\255\000U\001\203\002\238\000X\004E\000\232\000\225\005\133\006\173\006e\003\006\001\135\000\220\0015\002\160\002\251\006w\002\158\005\199\000\214\000U\002\205\002\206\001\252\001\207\000\229\001L\005\200\000\251\005\201\000\254\006g\001?\001>\001@\000\200\002\237\002\159\004S\000\229\006Y\000\206\000\219\001\220\002\238\006[\000\200\001\188\001\135\001\191\006\166\001\223\000\206\000\219\005\230\0015\006]\002\251\002\157\003\000\001\228\003\n\001J\001>\001@\000\214\001\231\003\016\000\215\001\155\003\002\0015\006^\005\127\002\253\005\n\001X\005\203\001\204\002\159\004r\001\135\005\205\005\215\001\135\002\209\004\246\002\255\000U\000\245\003\018\0007\000\217\005\226\0015\000\200\000\220\003\003\003\006\001\135\005\231\000\206\000\219\001\213\001d\001>\001@\000\220\000\200\005\227\000X\001\135\000X\001\216\000\206\000\209\002\253\004\153\000\200\003\007\001l\001>\001@\000\229\000\206\000\219\000\255\002\209\001\241\002\255\000U\002\205\002\206\001\252\000\229\000\225\002\205\002\206\001\252\003\003\003\006\000X\001\221\001q\001>\001@\002\237\003\000\001\135\003\n\004\191\002\237\001\135\005\149\002\238\003\016\000\220\001\155\003\002\002\238\006\163\003\007\001R\001\135\000\200\004w\000X\002\251\004\228\005|\000\206\000\219\002\251\002\205\002\206\001\252\000X\006N\003\018\000\220\005\157\005}\002\147\001U\002\147\005\131\005D\001X\002\237\003\000\001\224\003\n\007\t\001\135\002,\007\n\002\238\003\016\006Q\001\155\003\002\001\244\004t\001\135\001\229\000X\001N\006R\002\148\002\251\002\218\002\158\002)\002\158\000U\001\135\000U\004\234\000\228\005\127\003\018\006\147\001\245\002\011\002\n\000\220\002\253\002\\\002\205\002\206\001\252\002\253\004\239\002^\002\147\006\028\006S\002\209\000U\002\255\000U\002\019\002\209\002\237\002\255\000U\005\127\0020\002\147\003\003\003\006\002\238\000\229\000X\003\003\003\006\000\214\004]\002e\005\172\0045\002\173\004\244\002\158\002\251\005\252\000U\000X\002\253\002\176\006T\003\007\005\006\002\159\004=\002\159\003\007\002\158\006U\002\209\000U\002\255\000U\000\217\005\014\000X\000X\000\254\002;\002@\000X\003\003\003\006\002\205\002\206\001\252\000X\006V\003\006\003\000\007\011\003\n\002\179\002\182\003\000\004^\003\n\003\016\002\237\001\155\003\002\002N\003\016\003\007\001\155\003\002\002\238\002K\002S\006X\002R\000X\004T\002\253\000X\002\159\005\174\002\188\006Y\002\251\003\018\002\196\000X\006[\002\209\003\018\002\255\000U\004O\002\159\002\201\003\000\0043\003\n\006]\002\217\003\003\003\006\002\147\003\016\002\231\001\155\003\002\002[\003B\000\200\002\205\002\206\001\252\0044\006^\000\206\005\177\000\200\002a\000X\000X\002g\003\007\000\206\000\209\002\237\003\018\002t\004A\004:\001\135\002\158\004I\002\238\000U\000\214\002\205\002\206\001\252\0042\004L\004P\002\253\004\144\000X\004\172\002\251\004\223\000X\002v\003\000\002\237\003\n\002\209\002\129\002\255\000U\000X\003\016\002\238\001\155\003\002\000X\001\135\004\230\003\003\003\006\000X\002\136\004-\005\178\000X\002\251\002\205\002\206\001\252\000X\004+\005|\004'\004\236\003\018\005}\002\172\005\183\004\249\005\180\003\007\002\237\004\254\005}\001\135\000X\002\159\005\156\000X\002\238\000\229\005\t\005\017\001\135\002\175\004\030\000X\000X\002\253\000X\005\r\000X\002\251\000X\005\016\002\205\002\206\001\252\003\000\002\209\003\n\002\255\000U\005\023\005\027\005 \003\016\005+\001\155\003\002\000X\003\003\003\006\001\135\002\253\005\025\005>\000\200\006\150\002\205\002\206\001\252\001\135\000\206\000\219\002\209\000X\002\255\000U\003\018\005C\000X\002\178\003\007\002\237\000X\002\181\003\003\003\006\005H\001\135\001\135\002\238\005\029\000X\002j\000\214\002\220\004\024\005\175\002\187\002\253\005$\000X\002\133\002\251\005R\000X\002\137\003\007\000\206\003\000\002\209\003\n\002\255\000U\000X\000X\000X\003\016\000X\001\155\003\002\000\217\003\003\003\006\002\191\002\195\000\220\000X\005X\002\200\0055\005c\002\205\002\206\001\252\003\000\002\216\003h\002\208\0059\003\018\000X\002\230\003\016\003\007\001\155\003\002\002\237\002\138\002\209\000X\002\255\000U\001T\005n\002\238\003[\005l\005\140\003Z\003\015\004\r\002\253\002\139\001\135\005\128\003\018\000X\002\251\002\205\002\206\001\252\003\000\002\209\003\n\002\255\000U\003S\003\203\005r\003\016\005\135\001\155\003\002\002\237\003\003\003\006\002\205\002\206\001\252\003\218\000X\002\238\000\200\000X\005\151\005\161\003\231\003\247\000\206\000\219\001\135\002\237\003\018\005\186\002\251\005\207\003\007\005\217\003\242\002\238\003\000\003\250\004)\001\135\0049\003\236\000X\004;\003\001\001\135\001\155\003\002\002\251\002\205\002\206\001\252\002\253\000X\000\214\004H\004K\000\215\005\144\001\135\003\000\004Q\003\n\002\209\002\237\002\255\000U\000X\003\016\000X\001\155\003\002\002\238\001\135\005\234\003\003\003\006\005\240\003\228\000\220\005\243\000\217\004c\000X\000X\002\251\002\205\002\206\001\252\002\253\004\145\003\018\000X\004\149\000X\005\184\000X\003\007\006-\004\167\002\209\002\237\002\255\000U\004\173\001\135\000\229\002\253\005\192\002\238\004\177\004\205\003\003\003\006\005\204\003\181\005\248\004\229\002\209\002\147\002\255\000U\002\251\004\222\000\225\003\000\004\224\003\n\005\212\001\135\003\003\003\006\004\227\003\016\003\007\001\155\003\002\000X\004\242\004\232\000X\004\241\005\223\000X\002\253\004\250\006\031\004\237\002\158\004\240\005\253\000U\003\007\000\200\001\135\002\209\003\018\002\255\000U\000\206\000\219\000X\003\000\004\248\003\n\004\253\005\005\003\003\003\006\006\027\003\016\006\003\001\155\003\002\005\245\005\004\001\135\005\b\005\015\000X\003\000\002\253\003\n\001\135\005\026\002\205\002\206\001\252\003\016\003\007\001\155\003\002\002\209\003\018\002\255\000U\006\011\001\135\006\000\001\135\002\237\002\205\002\206\001\252\003\003\003\006\005\022\000\245\002\238\000X\002\159\003\018\000\214\000X\000\220\005\031\002\237\003\000\003\173\003\n\002j\002\251\004?\006\"\002\238\003\016\003\007\001\155\003\002\002\133\002\249\002\147\000X\002\137\000X\000\206\0062\002\251\002\205\002\206\001\252\000\229\006F\000\214\000\246\006,\000\215\002\147\003\018\006q\0052\005&\0060\002\237\003\000\0051\003\n\006r\001\135\000X\002\158\002\238\003\016\000U\001\155\003\002\0064\003\005\0068\002j\000\217\004}\006\153\006\154\002\251\002\138\002\158\005,\002\133\000U\002\253\0050\002\137\001\135\000\206\003\018\005=\005B\005\160\005G\002\139\002\209\005J\002\255\000U\005N\002\253\005V\001\135\000X\005]\001\135\005h\003\003\003\006\000X\001\135\002\209\005\159\002\255\000U\000\200\000X\000\225\002\205\002\206\001\252\000\206\000\219\003\003\003\006\001\135\002\159\005\152\002\138\003\007\005\153\006D\001\135\002\237\005\158\005\162\001\135\002\253\005\163\000X\001\135\002\238\002\159\002\139\005\194\003\007\000\200\003\t\002\209\005\187\002\255\000U\000\206\000\219\002\251\005\188\006K\003\000\005\193\003h\003\003\003\006\002\205\002\206\001\252\003\016\000Q\001\155\003\002\000U\000V\006Z\005\214\003\000\006a\003\n\000\220\002\237\005\210\006u\005\211\003\016\003\007\001\155\003\002\002\238\005\213\005\225\003\018\005\222\005\224\003\024\000Q\005\233\006\136\000U\000V\005\235\002\251\006\014\001#\007\003\005\236\003\253\003\018\007\014\005\241\000\220\005\254\007\019\003\000\006\022\003\n\002\253\006 \002\205\002\206\001\252\003\016\006M\001\155\003\002\006G\006H\002\209\006\014\002\255\000U\006\016\006L\002\237\006\\\006}\006\135\000\229\006\139\003\003\003\006\002\238\006\152\006\161\003\018\006\245\006\017\003\023\000\000\000\000\000\000\006\019\000\000\000\000\002\251\006\026\000\000\006\016\000\000\000\000\002\253\003\007\000\000\000\000\000\000\002\205\002\206\001\252\000\000\000\000\000\000\002\209\006\017\002\255\000U\000\000\000\000\006\019\000\000\000\000\002\237\006\023\000\000\003\003\003\006\000\000\000\000\000\000\002\238\003\000\000\000\003\n\000\000\002j\003G\004\128\000\000\003\016\000\000\001\155\003\002\002\251\002\133\000\000\000\000\003\007\002\137\000\000\000\206\000\000\002j\000\000\004\131\002\253\000\000\000\000\000\000\000\000\000\000\002\133\003\018\000\000\000\000\002\137\002\209\000\206\002\255\000U\000\000\000\000\002\205\002\206\001\252\003\000\000\000\003\n\003\003\003\006\000\000\000\000\000\000\003\016\000\000\001\155\003\002\002\237\000\000\000\000\002\138\000\000\000\000\000\000\000\000\002\238\000\000\000\000\000\000\000\000\003\007\003J\002\253\000\000\000\000\002\139\003\018\002\138\002\251\000\000\000\000\000\000\000\000\002\209\000\000\002\255\000U\000\000\000\000\002\205\002\206\001\252\002\139\000\000\000\000\003\003\003\006\000\000\003\000\000\000\003\n\000\000\000\000\000\000\002\237\000\000\003\016\000\000\001\155\003\002\000\000\000\000\002\238\000\000\000\000\000\000\000\000\003\007\003^\000\000\000\000\000\000\006N\000\000\000\000\002\251\000\000\000\000\000\000\003\018\000\000\002\205\002\206\001\252\000\000\000\000\000\000\002\253\000\000\000\000\007\000\000\000\000\000\006Q\000\000\003\000\002\237\003\n\002\209\000\000\002\255\000U\006R\003\016\002\238\001\155\003\002\000\000\000\000\000\000\003\003\003\006\000\000\000\000\003f\000\000\000\000\002\251\002\205\002\206\001\252\000\000\000\000\000\000\000\000\000\000\003\018\002j\000\000\004\226\000\000\006S\003\007\002\237\002\253\000\000\002\133\000\000\000\000\000\000\002\137\002\238\000\206\000\000\000\000\002\209\000\000\002\255\000U\000\000\000\000\003j\000\000\000\000\002\251\000\000\000\000\003\003\003\006\000\000\003\000\000\000\003\n\000\000\000\000\006T\000\000\000\000\003\016\000\000\001\155\003\002\000\000\006U\000\000\000\000\002\253\000\000\000\000\003\007\000\000\000\000\002\138\002\205\002\206\001\252\000\000\002\209\000\000\002\255\000U\003\018\006V\003\006\000\000\000\000\007\001\002\139\002\237\003\003\003\006\000\000\000\000\000\000\000\000\000\000\002\238\003\000\000\000\003\n\002\205\002\206\001\252\002\253\006X\003\016\003l\001\155\003\002\002\251\000\000\003\007\000\000\006Y\002\209\002\237\002\255\000U\006[\002\205\002\206\001\252\000\000\002\238\000\000\000\000\003\003\003\006\003\018\006]\000\000\000\000\000\000\003o\002\237\000\000\002\251\000\000\000\000\003\000\000\000\003h\002\238\000\000\000\000\006^\000\000\003\016\003\007\001\155\003\002\000\000\003v\000\000\000\000\002\251\000\000\000\000\000\000\000\000\002j\000\000\005(\000\000\000\000\002\205\002\206\001\252\002\253\002\133\003\018\000\000\000\000\002\137\000\000\000\206\003\000\000\000\003h\002\209\002\237\002\255\000U\000\000\003\016\000\000\001\155\003\002\002\238\000\000\000\000\003\003\003\006\000\000\000\000\002\253\000\000\000\000\003{\000\000\000Q\002\251\000\000\000U\000V\000\000\002\209\003\018\002\255\000U\000\000\000\000\000\000\003\007\002\253\002\138\000\000\000\000\003\003\003\006\000\000\002\205\002\206\001\252\000\000\002\209\000\000\002\255\000U\000\000\002\139\000\000\000\000\006\014\000\000\000\000\002\237\003\003\003\006\000\000\003\007\003\000\000\000\003h\002\238\000\000\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\003\128\000\000\000\000\002\251\000\000\003\007\002\253\000\000\006\016\000\000\000\000\002\205\002\206\001\252\003\000\000\000\003h\002\209\003\018\002\255\000U\000\000\003\016\006\017\001\155\003\002\002\237\000\000\006\019\003\003\003\006\000\000\006\020\003\000\002\238\003h\000\000\000\000\000\000\000\000\003\134\003\016\000\000\001\155\003\002\003\018\000\000\002\251\000\000\000\000\000\000\003\007\000\000\000\000\000\000\002\205\002\206\001\252\000\000\002\205\002\206\001\252\002\253\000\000\003\018\000\000\000\000\000\000\000\000\000\000\002\237\000\000\000\000\002\209\002\237\002\255\000U\000\000\002\238\003\000\000\000\003h\002\238\000\000\003\139\003\003\003\006\003\016\000\000\001\155\003\002\002\251\003\151\000\000\000\000\002\251\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\206\001\252\002\253\003\007\000\000\000\000\003\018\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\237\002\255\000U\000\000\000\000\000\000\000\000\000\000\002\238\000\000\000\000\003\003\003\006\000\000\000\000\000\000\000\000\003\000\003\156\003h\000Q\002\251\000\000\000U\000V\003\016\000\000\001\155\003\002\002\205\002\206\001\252\002\253\003\007\000\000\000\000\002\253\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\237\002\255\000U\002\209\003\018\002\255\000U\000\000\002\238\006\014\000\000\003\003\003\006\000\000\000\000\003\003\003\006\003\000\003\161\003\n\000\000\002\251\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\000\000\000\000\000\000\003\007\000\000\000\000\002\253\003\007\006\016\000\000\000\000\002\205\002\206\001\252\000\000\000\000\000\000\002\209\003\018\002\255\000U\000\000\000\000\006\017\000\000\000\000\002\237\000\000\006\019\003\003\003\006\003\000\006\030\003\n\002\238\003\000\000\000\003h\000\000\003\016\000\000\001\155\003\002\003\016\003\176\001\155\003\002\002\251\000\000\000\000\002\253\003\007\002\205\002\206\001\252\000\000\000\000\002\205\002\206\001\252\000\000\002\209\003\018\002\255\000U\000\000\003\018\002\237\000\000\002j\000\000\005.\002\237\003\003\003\006\002\238\000\000\000\000\002\133\003\000\002\238\003h\002\137\000\000\000\206\003\179\003\184\003\016\002\251\001\155\003\002\000\000\000\000\002\251\002j\003\007\0057\000\000\000\000\002\205\002\206\001\252\000\000\002\133\000\000\000\000\002\253\002\137\000\000\000\206\003\018\000\000\000\000\000\000\002\237\000\000\000\000\002\209\000\000\002\255\000U\000\000\002\238\003\000\002\138\003h\000\000\000\000\003\187\003\003\003\006\003\016\000\000\001\155\003\002\002\251\000\000\000\000\000\000\002\139\000\000\000\214\000\000\000\000\005\172\000\000\000\000\002\253\000\000\002\138\000\000\003\007\002\253\000\000\003\018\000\000\000\000\000\000\002\209\000\000\002\255\000U\000\000\002\209\002\139\002\255\000U\000\000\000\217\000\000\003\003\003\006\000\000\000\000\000\000\003\003\003\006\000\000\000\000\003\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\003\007\000\000\002\253\000\000\000\000\003\007\000\000\000\000\000\000\002\205\002\206\001\252\000\000\002\209\000\000\002\255\000U\000\000\003\018\005\174\000\000\000\000\000\000\000\000\002\237\003\003\003\006\000\000\003\000\000\000\003h\000\000\002\238\003\000\000\000\003\n\003\016\000\000\001\155\003\002\000\000\003\016\003\196\001\155\003\002\002\251\000\000\003\007\000\200\000\000\000\000\002\205\002\206\001\252\000\206\005\177\002\205\002\206\001\252\003\018\000\000\000\000\000\000\000\000\003\018\000\000\002\237\002j\000Q\005?\000\000\000U\000V\000\000\002\238\003\000\002\133\003\n\000\000\003\168\002\137\000\000\000\206\003\016\003\200\001\155\003\002\002\251\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\206\001\252\000\000\006\014\000\000\003\169\002\253\000\000\003\018\000\000\000\000\005\178\000\000\000\000\002\237\000\000\000\000\002\209\000\000\002\255\000U\000\000\002\238\005}\002\138\005\182\000\000\005\180\003\232\003\003\003\006\000\000\006\016\000\000\000\000\002\251\000\000\000\000\000\229\002\139\002\205\002\206\001\252\000\000\000\000\000\000\000\000\006\017\002\253\000\000\000\000\003\007\006\019\002\208\000\000\002\237\006.\000\000\000\000\002\209\000\000\002\255\000U\002\238\002\209\000\000\002\255\000U\000\000\003\234\000\000\003\003\003\006\002\205\002\206\001\252\002\251\000\000\000\000\003\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\003\016\002\237\001\155\003\002\000\000\000\000\003\007\002\253\000\000\002\238\000\000\000\000\000\000\000\000\003\171\003\238\000\000\000\000\002\209\000\000\002\255\000U\002\251\003\018\000\000\000\000\000\000\000\000\000\000\000\000\003\003\003\006\000\000\000\000\003\000\000\000\003h\000\000\000\000\003\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\003\001\002\253\001\155\003\002\000\000\003\007\000\000\000\000\000\000\000\000\000\000\000\000\002\209\000\000\002\255\000U\000\000\002j\003\018\006\157\000\000\000\000\000\000\000\000\003\003\003\006\002\133\002\205\002\206\001\252\002\137\000\000\000\206\003\000\002\253\003\n\000\000\000\000\000\000\000\000\000\000\003\016\002\237\001\155\003\002\002\209\003\007\002\255\000U\000\000\002\238\000\000\002\205\002\206\001\252\000\000\003\241\003\003\003\006\000\000\000\000\000\000\000Q\002\251\003\018\000U\000V\002\237\002\205\002\206\001\252\000\000\002\138\000\000\003\000\002\238\003\n\000\000\000\000\003\007\000\000\003\243\003\016\002\237\001\155\003\002\000\000\002\139\002\251\000\000\000\000\002\238\000\000\000\000\000\000\006\014\000\000\003\245\006N\000\000\000\000\000\000\000\000\000\000\002\251\003\018\000\000\003\000\000\000\003\n\000\000\000\000\000\000\007\t\000\000\003\016\007\nn\000\000\006U\000\000\002\238\000\000\003\016\000\000\001\155\003\002\003\255\003\007\000\000\000\000\000\000\000\000\000\000\002\251\000\000\000\000\000\000\006V\003\006\003\000\007\015\003\n\000\000\000\000\000\000\003\018\000\000\003\016\000\000\001\155\003\002\000\000\002\205\002\206\001\252\003\000\000\000\003\nn\000\000\000\000\003\003\003\006\000\000\003\016\000\000\001\155\003\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\253\000\000\000\000\000\000\000\000\002\253\000\000\000\000\003\007\000\000\000\000\002\209\003\018\002\255\000U\000\000\002\209\000\000\002\255\000U\002\205\002\206\001\252\003\003\003\006\002\205\002\206\001\252\003\003\003\006\000\000\000\000\000\000\000\000\000\000\002\237\003\000\000\000\003\n\000\000\002\237\002\004\000\000\002\238\003\016\003\007\001\155\003\002\002\238\004D\003\007\000\000\002\005\000\000\004N\000U\002\251\000\000\000\000\000\000\000\000\002\251\002\205\002\206\001\252\000\000\000\000\003\018\000\000\000\000\000\000\000\000\000\000\003\000\000\000\003\n\000\000\002\237\003\000\000\000\003\ng\005\195\000\000\000\000\000\000\000\000\000\000\002\251\000\000\000\000\000\000\002\253\000\000\000\214\003\007\000\000\000\215\000\000\000\000\003\007\000\000\000\000\002\209\000\000\002\255\000U\000\000\000\000\000\000\005\196\006\188\005\197\000\000\000\000\003\003\003\006\002\205\002\206\001\252\000\000\000\217\000\000\003\000\000\000\003\n\000\000\000\000\003\000\000\000\003\n\003\016\002\237\001\155\003\002\000\000\003\016\003\007\001\155\003\002\002\238\005\198\000\000\000\000\000\000\000\000\004l\002\253\000\000\000\000\000\000\000\000\000\000\002\251\003\018\000\000\000\000\000\000\002\209\003\018\002\255\000U\000\000\000\000\000\225\003\000\000\000\003\n\000\000\000\000\003\003\003\006\000\000\003\016\005\199\001\155\003\002\000\000\000\000\000\000\002\205\002\206\001\252\005\200\000\000\005\201\000\000\000\000\000\000\000\000\000\000\000\000\003\007\000\200\000\000\002\237\003\018\000\000\000\000\000\206\000\219\000\000\000\000\002\238\000\000\000\000\000\000\000\000\000\000\004o\005\230\000\000\002\253\000\000\000\000\000\000\002\251\002\205\002\206\001\252\003\000\000\000\003\n\002\209\000\000\002\255\000U\000\000\003\016\000\000\001\155\003\002\002\237\005\203\006\190\003\003\003\006\000\000\005\205\005\215\002\238\000\000\000\000\002\205\002\206\001\252\004\148\000\245\000\000\005\226\000\000\003\018\000\000\002\251\000\220\000\000\000\000\003\007\002\237\000\000\000\000\000\000\000\000\000\000\000\000\005\227\002\238\000\000\000\000\000\000\000\000\000\000\004\151\000\000\000\000\002\253\000\000\000\000\000\000\002\251\000\000\000\229\000\000\000\000\001\019\003\000\002\209\003\n\002\255\000U\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\003\003\003\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\253\000\000\000\000\000\000\003\018\002\205\002\206\001\252\003\007\000\000\000\000\002\209\000\000\002\255\000U\000\000\000\000\000\000\000\000\000\000\002\237\000\000\000\000\003\003\003\006\000\000\002\253\000\214\002\238\000\000\000\215\000\000\000\000\000\000\004\166\000\000\003\000\002\209\003\n\002\255\000U\002\251\000\000\000\000\003\016\003\007\001\155\003\002\000\000\003\003\003\006\002\205\002\206\001\252\000\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\015\000\000\002\237\003\018\000\000\000\000\000\000\003\007\000\000\003\000\002\238\003\n\000\000\000\000\001\020\000\000\004\169\003\016\000\000\001\155\003\002\000\000\000\000\002\251\000\000\000\000\000\000\000\000\000\000\002\205\002\206\001\252\000\000\000\225\000\000\003\000\002\253\003\nn\000\000\000\000\004\187\000\000\000\245\003\016\000\000\001\155\003\002\002\251\000\000\000\220\002\253\000\000\000\000\003\007\000\000\000\000\000\000\002\205\002\206\001\252\000\000\002\209\000\000\002\255\000U\000\000\003\018\000\000\000\000\000\000\000\000\000\000\002\237\003\003\003\006\000\000\000\229\000\000\000\000\001\029\002\238\003\000\000\000\003\n\000\000\000\000\004\209\000\000\000\000\003\016\000\000\001\155\003\002\002\251\000\000\003\007\000\000\000\000\000\000\002\205\002\206\001\252\000\000\002\205\002\206\001\252\002\253\000\000\000\000\000\000\000\000\000\000\003\018\000\000\002\237\000\000\000\000\002\209\002\237\002\255\000U\000\000\002\238\003\000\000\000\003\n\002\238\000\000\004\212\003\003\003\006\003\016\004\219\001\155\003\002\002\251\000\000\001\251\001\252\002\251\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\007\002\253\000\214\003\018\000\000\000\215\001\253\002V\000\000\001\255\002\000\000\000\002\209\000\000\002\255\000U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\003\003\006\000\000\000\000\003\000\000\217\003\n\000\000\000\000\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\000\000\000\000\002\253\000\000\000\000\003\007\002\253\000\000\000\000\002\205\002\206\001\252\000\000\002\209\000\000\002\255\000U\002\209\003\018\002\255\000U\000\000\000\000\000\000\002\237\003\003\003\006\000\000\000\000\003\003\003\006\000\225\002\238\003\000\000\000\003\n\000\000\000\000\005\244\002\004\000\000\003\016\000\000\001\155\003\002\002\251\000\000\003\007\000\000\000\000\002\005\003\007\000\000\000U\000\000\002\205\002\206\001\252\000\000\000\000\000\200\000\000\000\000\000\000\003\018\000\000\000\206\000\219\000\000\000\000\002\237\000\000\000\000\000\000\000\000\003\000\000\000\003\n\002\238\003\000\000\000\003\ns\000\000\000\000\000\000\000\000\000\000\002\237\000\000\000\000\000\000\002\209\000\000\002\255\000U\002\238\000\000\000\000\000\000\000\000\000\000\006\180\000\000\003\003\003\006\000\000\000\000\003\000\002\251\003\n\000\000\000\000\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\000\000\002\253\000\000\000\000\000\000\003\007\002\253\000\000\000\000\000\000\000\000\000\000\002\209\000\000\002\255\000U\000\000\002\209\003\018\002\255\000U\000\000\000\000\000\000\003\003\003\006\000\000\000\000\000\214\003\003\003\006\000\215\000\000\003\000\000\000\003\n\000\000\000\000\000\000\000\000\000\000\003\016\000\000\001\155\003\002\000\000\003\007\002\253\000\000\000\000\000\000\003\007\000\000\000\000\000\000\000\217\000\000\000\000\002\209\000\214\002\255\000U\000\215\000\000\003\018\002\205\002\206\001\252\000\000\000\000\003\003\003\006\001Y\000\000\003\000\000\000\003\n\000\000\000\000\003\000\002\237\003\n\003\016\000\000\001\155\003\002\000\217\003\016\002\238\001\155\003\002\000\000\003\007\000\000\006\182\000\000\000\000\000\000\000\225\000\000\000\000\002\251\000\000\001Y\000\000\003\018\000\000\000\000\000\000\000\000\003\018\000\000\001g\000\000\000\000\000\214\000\000\000\000\000\215\000\000\003\000\000\000\003\n\000\000\000\000\000\000\000\000\000\200\003\016\000\225\001\155\003\002\000\000\000\206\000\219\000\000\000\000\000\000\000\000\002\205\002\206\001\252\000\217\001w\002\205\002\206\001\252\000\000\000\000\000\000\000\000\003\018\001\015\000\000\002\237\000\000\000\000\000\000\000\200\002\237\002\253\000\000\002\238\000\000\000\206\000\219\0018\002\238\000\000\000\000\000\000\002\209\000\000\002\255\000U\002\251\001\\\001]\000\000\000\000\002\251\000\245\000\000\003\003\003\006\000\225\000\000\000\000\000\220\000\000\000\000\000\000\001h\001u\000\000\000\000\000\000\001`\001X\000\000\000\000\000\000\000\000\000\000\000\000\003\007\000\000\001\\\001]\000\000\000\000\000\000\000\245\000\000\000\200\000\229\000\000\000\000\000\255\000\220\000\206\000\219\000\000\001h\001u\000\000\000\000\000\000\001`\001X\000\000\000\000\000\000\003\000\002\253\003\nz\000\000\000\000\003\000\000\000\004sba\000\000\000\000\003\007\000\000\000\000\003\016\002\238\001\155\003\002\000\000\000\000\000\000\002\253\000\000\000\000\000\000\002\205\002\206\001\252\002\251\000\000\000\000\000\000\002\209\000\000\002\255\000U\000\000\003\018\004\001\003\000\002\237\003y\000\000\000\000\003\003\003\006\000\000\003\016\002\238\001\155\003\002\000\000\000\000\000\000\002\253\000\000\000\000\000\000\004\002\000\000\000\000\002\251\000\000\000\000\002\022\002\209\003\007\002\255\000U\000\000\003\018\000\000\002*\000\000\001\155\002\003\000\000\003\003\003\006\000\000\002\205\002\206\001\252\000\000\000\000\000\000\000\000\002\253\000\000\000\000\000\000\000\000\000\000\000\000\003\000\002\237\003~}h\001u\000\000\000\000\000\000\001`\001X\005\230\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\000\004#\001\\\001]\000\000\002C\001\252\000\245\000\229\000\000\000\000\000\255\000\000\000\000\000\220\005\203\000\000\000\000\001h\001u\005\205\005\215\000\000\001`\001X\001\253\002\225\000\200\001\255\002\000\000\000\005\226\000\000\000\206\000\219\000\000\000\000\001\251\001\252\000\000\000\000\000\229\001\251\001\252\000\255\000\000\000\000\005\227\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\253\002\012\000\000\001\255\002\000\001\253\002\012\000\000\001\255\002\000\003\182\003T\003U\000\000\000\000\000\000\002\208\000\000\000\000\001\\\001]\000\000\000\000\004\020\000\245\000\000\000\000\002\209\004v\002\255\000U\000\220\000\000\000\000\000\000\001^\001_\000\000\000\000\000\000\001`\001X\002\020\002\r\000\000\002\014\002\184\000\000\002\ry\002\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\023\000\000\001\155\002\003\001\253\002\012\000\000\001\255\002\000\000\000\000\000\002\r\000\000\002\014\002\184\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\022\000\000\000\000\006\165\000\000\002\022\000\000\000\000\002\023\000\000\001\155\002\003\000\000\002\023\000\000\001\155\002\003\000\000\002\020\000\000\000\000\0025\001\252\002\rr\000\000\002\014\002\184\000\000\002\r\002\020\002\014\004\005\000\000\000\000\000\000\002\r\000\000\002\014\002&\000\000\002\005\002\022\000\000\000U\000\000\000\000\000\000\000\000\000\000\002\023\000\000\001\155\002\003\000\140\002\020\000\000\000\000\000\000\000\000\002\020\000\000\000\000\000\000\001\251\001\252\002\005\002\020\000\000\000U\000\000\002\005\000\000\000\000\000U\000\000\004q\004\023\002\005\000\000\000\000\000U\000\000\000\000\001\253\002\012\000\000\001\255\002\000\000\000\000\000\000\000\000\000\000\000\002$\000\000\001\251\001\252\000\000\000\000\000\000\001\251\001\252\002\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\023\000\000\001\155\002\003\000\000\001\253\002\012\000\000\001\255\002\000\001\253\002\012\000\000\001\255\002\000\002(\002\r\002\022\002\014\002&\000\000\000\000\002\022\000\000\000\000\002\023\000\000\001\155\002\003\002\022\002\023\000\000\001\155\002\003\000\000\000\214\000\000\002\023\005\172\001\155\002\003\000\000\000\000\001\251\001\252\000\000\000\000\002\020\002\r\000\000\002\014\002&\004U\002\rr\000\000\002\014\002\184\000\000\002\005\000\000\000\000\000U\002\022\000\000\000\000\003C\002\012\002\022\001\255\002\000\002\023\000\000\001\155\002\003\000\000\002\023\000\000\001\155\002\003\0025\001\252\000\000\000\000\000\000\002\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004Y\002\005\000\000\000\000\000U\003C\002\012\000\000\001\255\002\000\000\000\005\178\004\019\003H\003T\003U\000\000\000\000\000\000\001\251\001\252\004[\000\000\005}\000\000\005\179\002\022\005\180\000\000\000\000\000\000\000\000\000\000\000\000\002*\000\000\001\155\002\003\000\229\001\253\002\012\000\000\001\255\002\000\000\000\002\020\000\000\003H\003T\003U\000\000\000\000\000\000\000\000\000\000\000\000\002\005\000\000\000\000\000U\000\000\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\023\000\000\001\155\002\003\0025\001\252\000\000\000\000\002\020\000\000\000\000\002\r\000\000\002\014\002\184\000\000\000\000\000\000\000\000\002\005\003X\000\000\000U\000\000\003C\002\012\000\000\001\255\002\000\000\000\000\000\000\000\000\000\000\214\000\000\000\000\000\215\000\000\000\000\000\000\000\000\000\000\002\020\000\000\000\000\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000\000\002\005\003\189\002\023\000U\001\155\002\003\000\000\000\217\000\000\001\251\001\252\004\022\000\000\003H\003T\003U\000\000\004hrr\000\000\002\014\004\136\000\000\005\198\000\000\001\253\002\012\000\229\001\255\002\000\000\255\000\000\000\000\000\000\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\023\000\000\001\155\002\003\000\000\002\020\000\245\002\r\000\000\002\014\002+\000\000\005\199\000\220\000\000\000\000\002\005\000\253\000\000\000U\000\000\005\200\000\000\005\201\002\rr\000\000\002\014\002\025\005\227\002\r\000\000\002\014\002\016\000\000\000\000\000\000\002\022\001\253\002\012\000\000\001\255\002\000\000\000\000\000\002\023\000\000\001\155\002\003\000\000\000\000\000\000\000\000\000\000\002\022\000\000\002\020\000\000\000\000\000\000\000\000\002\020\002\023\000\000\001\155\002\003\000\000\002\005\000\000\000\000\000U\000\000\002\005\000\000\000\000\000U\000\000\000\000\000\000\000\000\000\000\002\rr\000\000\002\014\002\021\000\000\000\000\000\000\002\r\000\000\002\014\002\024\000\000\002\r\000\000\002\014\002\029\000\000\001\253\002\012\000\000\001\255\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\020\000\000\000\000\000\000\000\000\002\022\000\000\002\020\000\000\000\000\000\000\002\005\002\020\002\023\000U\001\155\002\003\000\000\002\005\001\251\001\252\000U\000\000\002\005\000\000\000\000\000U\000\000\004m\002\r\000\000\002\014\002\031\000\000\001\251\001\252\004p\000\000\000\000\001\253\004\000\000\000\001\255\002\000\000\000\000\000\001\251\001\252\000\000\000\000\000\000\000\000\000\000\000\000\001\253\002\012\000\000\001\255\002\000\000\000\002\020\000\000\000\000\000\000\000\000\000\000\001\253\002\012\000\000\001\255\002\000\002\005\000\000\002\022\000U\000\000\000\000\000\000\000\000\000\000\002\022\002\023\000\000\001\155\002\003\002\022\000\000\000\000\002\023\000\000\001\155\002\003\000\000\002\023\000\000\001\155\002\003\002\r\000\000\002\014\002\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\rr\000\000\002\014\003L\000\000\001\251\001\252\001\253\002\012\002\022\001\255\002\000\001\253\002\012\000\000\001\255\002\000\002*\000\000\001\155\002\003\000\000\000\000\000\000\002\022\001\253\002\012\000\000\001\255\002\000\000\000\002\020\002\023\000\000\001\155\002\003\002\022\000\000\002\r\000\000\002\014\003N\002\005\000\000\002\023\000U\001\155\002\003\000\000\000\000\002\r\000\000\002\014\003P\000\000\002\r\000\000\002\014\003W\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\020\002\014\004\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\214\002\005\002\020\000\215\000U\000\000\001\000\002\020\000\000\000\000\000\000\000\000\000\000\002\005\000\000\000\000\000U\000\000\002\005\000\000\002\020\000U\000\000\000\000\000\000\002\022\001\002\000\217\000\000\000\000\000\000\002\005\005v\002\023\000U\001\155\002\003\000\000\006N\000\214\000\000\000\000\000\215\000\000\000\000\000\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\t\000\000\000\000\007\n\000\000\000\000\006Q\000\000\000\000\000\000\002\022\000\000\000\238\000\217\000\000\006R\000\000\000\225\002\023\000\000\001\155\002\003\002\022\000\000\000\000\000\000\000\000\002\022\000\000\000\000\002\023\000\000\001\155\002\003\000\239\002\023\000\000\001\155\002\003\000\000\002\022\000\000\000\000\000\000\006S\000\000\000\200\000\000\002\023\000\000\001\155\002\003\000\206\000\219\000\000\000\000\000\225\000\000\000\000\001\251\001\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\000\000\000\000\004\\\000\000\006T\001\253\004\000\000\000\001\255\002\000\000\000\000\200\006U\000\000\000\000\000\000\000\000\000\206\000\219\000\000\000\000\000\000\000\000\001\251\001\252\000\000\000\245\000\000\001\251\001\252\000\000\006V\003\006\000\220\007\020\001\251\001\252\005\171\000\000\000\000\004\189\000\000\000\000\001\253\004\000\004\213\001\255\002\000\001\253\004\000\000\000\001\255\002\000\006X\000\000\001\253\004\000\000\000\001\255\002\000\000\229\000\000\006Y\000\255\000\000\000\245\000\000\006[\000\000\000\000\000\000\000\000\000\220\002\205\002\206\001\252\000\253\000\000\006]\002\004\001\251\001\252\000\000\000\000\000\000\000\000\001\251\001\252\000\000\000\000\002\005\000\000\000\000\000U\006^\000\000\003\168\000\000\000\000\000\229\001\253\004\000\000\255\001\255\002\000\000\000\001\253\004\000\000\000\001\255\002\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\000\000\000\006\018\000\000\002\004\000\000\001\251\001\252\004Y\000\000\002\005\002\004\000\000\000U\000\000\002\005\000\214\000\000\000U\000\215\000\000\000\000\002\005\000\000\000\000\000U\001\253\004\000\000\000\001\255\002\000\000\000\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002*\000\217\001\155\002\003\004Y\000\000\000\000\000\000\002\208\004Y\000\000\004\182\000\000\000\000\002\004\000\000\006A\000\000\000\000\002\209\002\004\002\255\000U\000\000\000\000\002\005\004\185\000\000\000U\000\000\002\022\002\005\000\000\000\000\000U\002\022\000\000\000\000\002*\000\000\001\155\002\003\002\022\002*\000\225\001\155\002\003\000\000\000\000\000\000\002*\000\000\001\155\002\003\001\251\001\252\003\171\000\000\002\004\000\000\000\000\006\012\000\000\000\000\006C\000\000\000\000\006\012\000\000\002\005\000\000\000\000\000U\000\200\001\253\004\000\000\000\001\255\002\000\000\206\000\219\003\000\000\000\000\000\000\000\000\000\000\000\002\022\006N\003\001\000\000\001\155\003\002\002\022\000\000\002*\000\000\001\155\002\003\000\000\000\000\002*\000\000\001\155\002\003\006A\006O\000\000\006\025\006Q\000\000\000\000\000\000\000\000\006\024\000\000\000\000\000\000\006R\000\000\000\000\000\000\000\000\000\000\000\000\006N\000\000\000\245\000\000\000\000\000\000\002\022\000\000\000\000\000\220\000\000\000\000\000\000\004\188\002*\000\000\001\155\002\003\006O\000\000\000\000\006Q\006S\002\004\000\000\000\000\000\000\000\000\006B\000\000\006R\000\000\000\000\006N\002\005\000\000\000\229\000U\000\000\000\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006O\000\000\000\000\006Q\000\000\006T\000\000\000\000\006S\000\000\000\000\000\000\006R\006U\001\251\001\252\000\000\000\000\000\000\006A\000\000\000\000\000\214\000\000\000\000\000\215\000\000\000\000\000\000\000\000\000\000\000\000\006V\003\006\001\253\004\000\000\000\001\255\002\000\006W\000\000\006S\006T\000\000\000\000\002\022\000\000\000\000\000\000\000\217\006U\000\000\000\000\002*\006X\001\155\002\003\000\000\000\000\004\182\000\000\000\214\000\000\006Y\000\215\000\000\000\000\006J\006[\006V\003\006\000\000\000\000\000\000\004\200\006T\006b\000\000\000\000\006]\000\000\000\000\000\000\006U\000\000\000\000\000\000\000\000\000\217\000\000\000\000\006X\000\225\000\000\000\000\006^\000\000\000\000\004\182\000\000\006Y\000\000\006V\003\006\000\000\006[\000\000\000\000\002\004\006v\000\000\000\000\000\000\004\210\000\000\000\000\006]\000\214\000\000\002\005\000\215\000\200\000U\000\000\006X\000\000\000\000\000\206\000\219\000\000\000\000\000\225\006^\006Y\000\214\000\000\000\000\000\215\006[\000\000\000\000\000\000\000\000\000\000\000\217\000\000\000\000\000\000\000\000\006]\000\000\000\000\000\000\000\000\004\182\004\011\000\214\000\000\000\000\000\215\000\200\000\217\000\000\001&\000\000\006^\000\206\000\219\000\000\005k\000\000\000\000\000\000\000\214\000\000\000\245\000\215\000\000\000\000\000\000\000\000\002\022\000\220\000\217\000\000\000\000\004\188\000\225\005v{{sb\000\220\000\000\000\200\000\000\004e\000\000\000\000\000\000\000\206\000\219\000\245\000\000\000\000\000\229\000\225\000\214\000\255\000\220\000\215\000\225\000\000\004j`z\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\245\000\000\000\206\005\177\000\000\000\000\000\000\000\220\000\000\000\000\000\000\005\138\000\000\000\000\000\000\000\229\000\000\000\000\000\255\000\000\000\000\000\000\000\000\000\000\000\000\005\174\005\178\000\225\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\000\000\255\005}\000\000\005\191\000\000\005\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\200\000\000\000\200\005\178\000\000\000\000\000\206\005\177\000\206\000\219\000\000\000\000\000\000\000\000\000\000\005}\000\000\006&\000\000\005\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\000\005\178\000\000\000\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005}\000\000\006>\000\000\005\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\229\000\000\000\000\002u"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3824 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+" )
# 1439 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3825 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+." )
# 1464 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3379 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let tyvar : (string) = Obj.magic tyvar in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tyvar_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3382 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_alias(ty, tyvar) )
# 1536 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_tyvar_, _startpos_ty_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1545 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3384 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1551 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.let_binding) = let attrs2 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1599 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined2_ in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1608 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2654 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklb ~loc:_sloc false body attrs
    )
# 1620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3712 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1645 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3713 "src/ocaml/preprocess/parser_raw.mly"
                                 ( Lident _1 )
# 1670 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 3440 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 1709 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _1 =
            let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 1772 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1780 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1786 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1796 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 1802 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3442 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 1811 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3445 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_var _2 )
# 1844 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1853 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1859 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3447 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_any )
# 1885 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1893 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1899 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1930 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3492 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 1936 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3450 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 1941 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1950 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1956 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 1994 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3494 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2000 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3450 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2005 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_ty_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2015 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2021 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2074 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2082 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1075 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2087 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3496 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2093 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3450 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2099 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2109 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2115 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3452 "src/ocaml/preprocess/parser_raw.mly"
        ( let (f, c) = _2 in Ptyp_object (f, c) )
# 2155 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2164 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2170 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3454 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_object ([], Closed) )
# 2203 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2212 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2218 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2256 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3492 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 2262 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3458 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2267 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2277 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2283 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2328 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3494 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2334 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3458 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2339 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_ty_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2349 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2355 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let cid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2415 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2423 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1075 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2428 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3496 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2434 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3458 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2450 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2456 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3461 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([_2], Closed, None) )
# 2496 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2505 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2511 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2561 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2566 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2572 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3463 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, None) )
# 2578 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2588 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2594 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _4 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2651 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2656 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2662 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3465 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_2 :: _4, Closed, None) )
# 2668 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2678 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2684 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2734 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2739 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2745 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3467 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Open, None) )
# 2751 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2761 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2767 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3469 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([], Open, None) )
# 2800 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2809 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2815 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2865 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2870 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2876 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3471 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some []) )
# 2882 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2892 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2898 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let xs_inlined1 : (string list) = Obj.magic xs_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _5 =
              let xs = xs_inlined1 in
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2963 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2968 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3534 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2974 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2982 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2987 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2993 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3473 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some _5) )
# 2999 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3009 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3015 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3475 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_extension _1 )
# 3041 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3049 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3477 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3055 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string Location.loc) = let _1 =
          let _1 = 
# 3891 "src/ocaml/preprocess/parser_raw.mly"
                     ( _1 )
# 3081 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 943 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3089 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3893 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3095 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string Location.loc) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string Location.loc) = let _1 =
          let _1 = 
# 3892 "src/ocaml/preprocess/parser_raw.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 3135 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 943 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3144 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3893 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3150 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3897 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 3199 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1877 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3224 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3265 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1879 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 3274 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1881 "src/ocaml/preprocess/parser_raw.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 3316 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3381 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3389 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined1_ in
        let _3 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3396 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1883 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3406 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3478 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3486 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _3 =
          let _1 = _1_inlined1 in
          
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3495 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1883 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3506 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1887 "src/ocaml/preprocess/parser_raw.mly"
      ( Cl.attr _1 _2 )
# 3538 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 =
            let _2 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 3573 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3578 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1890 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_apply(_1, _2) )
# 3584 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3594 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1893 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3600 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1892 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_extension _1 )
# 3626 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3634 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1893 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3640 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3695 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__1_inlined2_ in
        let _3 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3704 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3710 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1948 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3719 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3781 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__1_inlined3_ in
        let _3 =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3790 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3798 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1948 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3808 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _1_inlined1 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3850 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1951 "src/ocaml/preprocess/parser_raw.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 3862 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _1_inlined1 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3904 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1955 "src/ocaml/preprocess/parser_raw.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 3916 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3964 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3973 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1959 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 3983 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4031 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4040 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1962 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 4050 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_field) = let _2 =
          let _1 = _1_inlined1 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4084 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1965 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 4095 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_field) = let _1 =
          let _1 = 
# 1968 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcf_attribute _1 )
# 4121 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 964 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcf ~loc:_sloc _1 )
# 4129 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1969 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4135 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1857 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4167 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1860 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_4, _2) )
# 4214 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4223 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1863 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4229 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1862 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 4262 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1863 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4277 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1924 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4317 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_e_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4326 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1925 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4332 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1924 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4365 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_e_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4374 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1925 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4380 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3703 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _1 )
# 4405 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1933 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 4447 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 1935 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 4501 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 4510 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1936 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4516 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__0_ in
        let _symbolstartpos = _endpos in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1938 "src/ocaml/preprocess/parser_raw.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 4537 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 2065 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4576 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 2066 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ptyp_any )
# 4595 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 4604 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2067 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4610 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4658 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4667 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2075 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 4677 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = flags;
                  MenhirLib.EngineTypes.startp = _startpos_flags_;
                  MenhirLib.EngineTypes.endp = _endpos_flags_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4737 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4750 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined3_ in
        let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let label =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 4760 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4768 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2100 "src/ocaml/preprocess/parser_raw.mly"
  (
    let mut, virt = flags in
    label, mut, virt, ty
  )
# 4777 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4785 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2078 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 4795 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4855 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.class_type_field) = let _7 =
          let _1 = _1_inlined4 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4868 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__1_inlined4_ in
        let _6 =
          let _1 = _1_inlined3 in
          
# 3345 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4877 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 4885 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4893 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4901 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2082 "src/ocaml/preprocess/parser_raw.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 4912 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4960 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4969 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2086 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4979 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_type_field) = let _2 =
          let _1 = _1_inlined1 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5013 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2089 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 5024 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type_field) = let _1 =
          let _1 = 
# 2092 "src/ocaml/preprocess/parser_raw.mly"
      ( Pctf_attribute _1 )
# 5050 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 962 "src/ocaml/preprocess/parser_raw.mly"
    ( mkctf ~loc:_sloc _1 )
# 5058 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2093 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5064 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5095 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys = 
# 2051 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5102 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2057 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5107 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2032 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5113 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 960 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5122 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2035 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5128 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let cid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5181 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let params =
                  let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 5190 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5195 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2053 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5201 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2057 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5207 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2032 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5213 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 960 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5223 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2035 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5229 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 = 
# 2034 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_extension _1 )
# 5255 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 960 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5263 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2035 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5269 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_type_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _3 =
          let _1 = _1_inlined2 in
          let _2 =
            let _1 =
              let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 5326 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2071 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5331 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 908 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5340 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2061 "src/ocaml/preprocess/parser_raw.mly"
      ( Csig.mk _1 _2 )
# 5346 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5354 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2037 "src/ocaml/preprocess/parser_raw.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 5363 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 2043 "src/ocaml/preprocess/parser_raw.mly"
      ( Cty.attr _1 _2 )
# 5395 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5460 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5468 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined1_ in
        let _3 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 5475 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2045 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5485 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5557 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5565 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _3 =
          let _1 = _1_inlined1 in
          
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 5574 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2045 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__4_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5585 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1897 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 5624 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5655 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys = 
# 2051 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5662 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2057 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5667 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1904 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5673 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5682 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1915 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5688 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 =
            let cid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5741 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let params =
                  let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 5750 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5755 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2053 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5761 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2057 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5767 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1904 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5773 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5783 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1915 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5789 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.class_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1910 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_2, _4) )
# 5843 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 966 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5852 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1915 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5858 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.pattern) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _3 =
          let _1 = _1_inlined2 in
          let _2 =
            let _1 =
              let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 5915 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1942 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5920 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 907 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 5929 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1929 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 5935 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5943 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1917 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 5952 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 2020 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5977 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let label = 
# 3408 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 6025 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2026 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6030 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 960 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6040 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2027 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6046 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6095 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let label = 
# 3410 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 6105 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2026 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6110 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 960 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6120 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2027 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6126 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let label = 
# 3412 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 6167 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2026 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6172 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_domain_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 960 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6182 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2027 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6188 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_type_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _8 : unit = Obj.magic _8 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6273 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (string Location.loc option * Parsetree.class_type_declaration list) = let _1 =
          let a =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6291 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6303 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6311 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2167 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
    )
# 6326 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 6332 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2155 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6338 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3700 "src/ocaml/preprocess/parser_raw.mly"
                                           ( _1 )
# 6363 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 713 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 6384 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3580 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 6392 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 672 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 6413 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3581 "src/ocaml/preprocess/parser_raw.mly"
                 ( Pconst_char _1 )
# 6421 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 765 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 6442 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3582 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (s, strloc, d) = _1 in Pconst_string (s, strloc, d) )
# 6450 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 692 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 6471 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3583 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 6479 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3655 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "[]" )
# 6511 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3656 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "()" )
# 6543 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3657 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "false" )
# 6568 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3658 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "true" )
# 6593 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6614 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3661 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 6622 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = let _1 = 
# 3652 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 6661 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3662 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 6666 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3663 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 6691 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3666 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 6716 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _3 =
          let (_2, _1) = (_2_inlined1, _1_inlined1) in
          
# 3652 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 6771 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1,_3) )
# 6777 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _1 = 
# 3652 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 6816 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3668 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 6821 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3669 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 6846 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 2111 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3 )
# 6885 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let xs =
            let xs = 
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 6912 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 253 "<standard.mly>"
    ( List.rev xs )
# 6917 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6923 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3215 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 6929 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let xs =
            let xs = 
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 6970 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 253 "<standard.mly>"
    ( List.rev xs )
# 6975 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6981 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3215 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 6987 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 3217 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_record _2 )
# 7026 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 3136 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 7051 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.constructor_declaration list) = let cs = 
# 1136 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 7076 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3138 "src/ocaml/preprocess/parser_raw.mly"
      ( cs )
# 7081 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 = 
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7106 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3360 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 7111 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 3362 "src/ocaml/preprocess/parser_raw.mly"
      ( Typ.attr _1 _2 )
# 7143 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3761 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Upto )
# 7168 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3762 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Downto )
# 7193 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3969 "src/ocaml/preprocess/parser_raw.mly"
    ( expr_of_lwt_bindings ~loc:_loc _1 (merloc _endpos__2_ _3) )
# 7235 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 7297 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7302 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2695 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7308 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos_xs_ in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7319 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7325 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3971 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
          (Pexp_match(Fake.app Fake.Lwt.un_lwt _3, List.rev _5)) _2 in
      Fake.app Fake.Lwt.in_lwt expr )
# 7336 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7386 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7392 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3975 "src/ocaml/preprocess/parser_raw.mly"
    ( reloc_exp ~loc:_loc (Fake.app Fake.Lwt.in_lwt _3) )
# 7401 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 7463 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7468 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2695 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7474 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos_xs_ in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7485 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7491 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3977 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
        (Pexp_try(Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 )
# 7501 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7565 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7571 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3980 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.app (Fake.app Fake.Lwt.finally_ _3) _5 )
# 7577 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 7653 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7658 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2695 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7664 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7674 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7680 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3982 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
        (Pexp_try (Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 in
      Fake.app (Fake.app Fake.Lwt.finally_ expr) _7 )
# 7691 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7762 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7768 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3986 "src/ocaml/preprocess/parser_raw.mly"
  ( let expr = Pexp_while (_3, Fake.(app Lwt.un_lwt _5)) in
    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 7778 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7877 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7883 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__10_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3989 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = Pexp_for (_3, _5, _7, _6, Fake.(app Lwt.un_lwt _9)) in
      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 7893 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7978 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 7984 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3992 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
          (Pexp_let (Nonrecursive, [Vb.mk _3 (Fake.(app Lwt.un_stream _5))],
             Fake.(app Lwt.unit_lwt _7)))
          _2
    )
# 7997 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2258 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 8022 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8102 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8112 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8118 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2308 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7)), _3 )
# 8124 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8135 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _2_inlined1 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2_inlined1 in
        let _1_inlined3 : (string) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_endpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _2, _1) = (_endpos__1_inlined4_, _endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined4, _2_inlined1, _1_inlined3) in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8221 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__1_inlined1_ in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8232 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3200 "src/ocaml/preprocess/parser_raw.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 8242 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8252 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8258 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2310 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 8264 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__6_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8275 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8347 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8353 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 8359 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 2312 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 8366 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8377 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (string Location.loc option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_1_inlined1, _1) = (_1_inlined3, _1_inlined2) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8456 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 8470 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2312 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 8478 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let xs =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 8538 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8543 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2695 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8549 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8559 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8565 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2316 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_function _3, _2 )
# 8571 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8582 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8640 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8646 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2318 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 8653 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__4_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8664 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = 
# 2590 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8739 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8748 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8754 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2321 "src/ocaml/preprocess/parser_raw.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 8763 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8774 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 =
            let xs =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 8837 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8842 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2695 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8848 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8858 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8864 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2323 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_match(_3, _5), _2 )
# 8870 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8881 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 =
            let xs =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 8944 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8949 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2695 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8955 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8965 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8971 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2325 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_try(_3, _5), _2 )
# 8977 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8988 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9067 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9073 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2331 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7)), _2 )
# 9079 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9090 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9155 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9161 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2333 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None), _2 )
# 9167 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__5_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9250 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9256 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2335 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_while(_3, (merloc _endpos__4_ _5)), _2 )
# 9262 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__6_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9273 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9373 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9379 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2338 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9)), _2 )
# 9385 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9396 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9447 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9453 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2340 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_assert _3, _2 )
# 9459 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9470 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9521 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9527 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2342 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_lazy _3, _2 )
# 9533 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9544 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined3 : (Parsetree.pattern) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let _1 = _1_inlined3 in
            let _2 =
              let _1 =
                let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 9609 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1942 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9614 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 907 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 9623 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1929 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 9629 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9639 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9645 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2344 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_object _3, _2 )
# 9651 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__4_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2260 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9662 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 9697 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9702 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2352 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, _2) )
# 9708 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 9718 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 9724 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let es =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 9753 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1075 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9758 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2723 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 9764 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2354 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_tuple(_1) )
# 9770 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 9780 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 9786 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 9824 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2356 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, Some _2) )
# 9830 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 9840 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 9846 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2358 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, Some _2) )
# 9879 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 9888 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 9894 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 9928 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3626 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 9940 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 9949 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 9955 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 9965 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 9971 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 704 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10005 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3627 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10017 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10026 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10032 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10042 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10048 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 705 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10082 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3628 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10094 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10103 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10109 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10119 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10125 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 706 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10159 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3629 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10171 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10180 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10186 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10196 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10202 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 707 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10236 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3630 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10248 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10257 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10263 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10273 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10279 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3631 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 10321 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10329 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10335 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10345 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10351 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3632 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 10393 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10401 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10407 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10417 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10423 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3633 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 10465 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10473 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10479 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10489 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10495 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3634 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 10537 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10545 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10551 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10561 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10567 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3635 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 10609 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10617 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10623 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10633 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10639 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3636 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 10681 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10689 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10695 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10705 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10711 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3637 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 10753 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10761 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10767 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10777 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10783 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3638 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 10825 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10833 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10839 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10849 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10855 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3639 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 10897 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10905 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10911 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10921 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10927 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3640 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 10969 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10977 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10983 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10993 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10999 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3641 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 11041 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11049 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11055 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11065 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11071 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3642 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 11113 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11121 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11127 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11137 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11143 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3643 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 11185 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11193 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11199 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11209 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11215 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3644 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 11257 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11265 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11271 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11281 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11287 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3645 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 11329 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11337 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2360 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11343 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11353 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11359 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2362 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 11394 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11404 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11410 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2364 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 11445 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11455 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2263 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11461 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2265 "src/ocaml/preprocess/parser_raw.mly"
      ( expr_of_let_bindings ~loc:_sloc _1 (merloc _endpos__2_ _3) )
# 11503 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.expression) = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _1 : (
# 709 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 11545 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.expression) = let pbop_op =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 11557 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_pbop_op_ = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_pbop_op_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2267 "src/ocaml/preprocess/parser_raw.mly"
      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
        let ands = List.rev rev_ands in
        let pbop_loc = make_loc _sloc in
        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
# 11571 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2273 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;(merloc _endpos__2_ _3)])) )
# 11614 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 11649 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 11658 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 11666 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2275 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 11675 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 11733 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2277 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 11742 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2279 "src/ocaml/preprocess/parser_raw.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 11812 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2281 "src/ocaml/preprocess/parser_raw.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 11882 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2283 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 11952 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12014 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12023 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2285 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident bracket _2 _1 _4 _7 )
# 12031 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12093 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12102 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2287 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident paren _2 _1 _4 _7 )
# 12110 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12172 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12181 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2289 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident brace _2 _1 _4 _7 )
# 12189 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12263 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12274 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2292 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) bracket _4 _1 _6 _9 )
# 12282 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12356 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12367 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2295 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) paren _4 _1 _6 _9  )
# 12375 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12449 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12460 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2298 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) brace _4 _1 _6 _9 )
# 12468 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2300 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.attr _1 _2 )
# 12500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 3917 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 12518 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Location.loc option) = 
# 3918 "src/ocaml/preprocess/parser_raw.mly"
                    ( Some _2 )
# 12550 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3928 "src/ocaml/preprocess/parser_raw.mly"
                                             ( (_2, _3) )
# 12596 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 767 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 12617 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3930 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 12628 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _1_inlined3 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 12683 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined3_ in
        let lid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12695 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let cid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12706 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3284 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 12716 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 12764 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined2_ in
        let lid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12776 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let cid =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12786 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__1_ in
        let _1 = 
# 3737 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 12793 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3284 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 12802 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3905 "src/ocaml/preprocess/parser_raw.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 12852 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params = 
# 2051 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 12870 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1868 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 12875 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let params =
          let params =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 12916 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 12921 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2053 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 12927 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1868 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 12933 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2681 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12958 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2683 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _3 _1 )
# 13000 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
      ( (merloc _endpos__1_ _2) )
# 13032 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2710 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint ((merloc _endpos__3_ _4), _2) )
# 13079 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 13088 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2711 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 13094 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2714 "src/ocaml/preprocess/parser_raw.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 13132 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 = 
# 2590 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 13185 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2719 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 13193 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3396 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 13218 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain = 
# 911 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 13266 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3408 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 13271 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3402 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 13276 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 13286 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3404 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13292 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13341 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain = 
# 911 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 13351 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3410 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 13356 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3402 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 13361 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 13371 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3404 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13377 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain = 
# 911 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 13418 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3412 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 13423 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3402 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, domain, codomain) )
# 13428 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 13438 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3404 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13444 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.functor_parameter) = 
# 1287 "src/ocaml/preprocess/parser_raw.mly"
      ( Unit )
# 13476 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.functor_parameter) = let x =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13534 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1290 "src/ocaml/preprocess/parser_raw.mly"
      ( Named (x, mty) )
# 13540 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.functor_parameter list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.functor_parameter list) = 
# 1279 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13565 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3204 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],None) )
# 13583 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3205 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,None) )
# 13615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3207 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,Some _4) )
# 13661 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3209 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 13693 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13743 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined2_ in
        let cid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13755 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3152 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 13769 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13812 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined1_ in
        let cid =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13823 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__1_ in
        let _1 = 
# 3737 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 13830 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3152 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 13843 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13916 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13931 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 13940 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 13945 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13951 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let kind_priv_manifest =
          let _1 = _1_inlined3 in
          
# 3103 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 13959 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13970 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag = 
# 3757 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 13976 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13983 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3040 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 13999 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined4;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined4 : unit = Obj.magic _1_inlined4 in
        let _1_inlined3 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14078 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined5 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14094 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined5_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14103 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14108 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14114 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let kind_priv_manifest =
          let _1 = _1_inlined4 in
          
# 3103 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 14122 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14133 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 3758 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 14144 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14152 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3040 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14168 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14234 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14249 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14258 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14263 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14269 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14280 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag = 
# 3753 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 14286 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14293 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3040 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14309 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined3 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14381 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14397 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14406 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14411 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14417 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14428 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          let _1 = _1_inlined2 in
          
# 3754 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 14436 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14444 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3040 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14460 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14481 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 14489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14510 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3597 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 14518 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure) = 
# 1168 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14550 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string) = 
# 3648 "src/ocaml/preprocess/parser_raw.mly"
  ( "" )
# 14568 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3649 "src/ocaml/preprocess/parser_raw.mly"
              ( ";.." )
# 14600 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature) = 
# 1174 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14632 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3933 "src/ocaml/preprocess/parser_raw.mly"
                                                    ( (_2, _3) )
# 14678 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 770 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 14699 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3935 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 14710 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14758 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.label_declaration) = let _5 =
          let _1 = _1_inlined3 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14769 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _4 =
          let _1 = _1_inlined2 in
          
# 3349 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14778 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 14786 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14794 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_inlined1_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3226 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Type.field _2 _4 ~mut:_1 ~attrs:_5 ~loc:(make_loc _sloc) ~info )
# 14808 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14870 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.label_declaration) = let _7 =
          let _1 = _1_inlined4 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14881 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__1_inlined4_ in
        let _5 =
          let _1 = _1_inlined3 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14890 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _4 =
          let _1 = _1_inlined2 in
          
# 3349 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14899 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 14907 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14915 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_inlined1_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3231 "src/ocaml/preprocess/parser_raw.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info )
# 14933 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3220 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 14958 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3221 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 14983 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 3222 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 :: _2 )
# 15015 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15036 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15049 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2246 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15058 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2238 "src/ocaml/preprocess/parser_raw.mly"
      ( x )
# 15064 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cty : (Parsetree.core_type) = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15099 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15112 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2246 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15121 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_x_ = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _symbolstartpos = _startpos_x_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2240 "src/ocaml/preprocess/parser_raw.mly"
      ( let lab, pat = x in
        lab,
        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
# 15133 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3679 "src/ocaml/preprocess/parser_raw.mly"
                                        ( _1 )
# 15158 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2576 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, _1) )
# 15183 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15211 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2578 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, _2) )
# 15219 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15246 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2580 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Labelled label, mkexpvar ~loc label) )
# 15257 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15284 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2583 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Optional label, mkexpvar ~loc label) )
# 15295 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 744 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15323 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2586 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _2) )
# 15331 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
          let _1 = _1_inlined1 in
          
# 2234 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15386 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2208 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _3), _4, snd _3) )
# 15392 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15419 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15434 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2246 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15443 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2210 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _2), None, snd _2) )
# 15449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 744 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15498 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _4 =
          let _1 = _1_inlined1 in
          
# 2234 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15508 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2212 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _4, _3) )
# 15514 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 744 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15542 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2214 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, None, _2) )
# 15550 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2216 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _3), None, snd _3) )
# 15596 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15623 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15638 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2246 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15647 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2218 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 15653 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15681 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2220 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, None, _2) )
# 15689 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2222 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, None, _1) )
# 15714 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2593 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 15750 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2597 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _2) )
# 15756 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2593 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 15806 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2599 "src/ocaml/preprocess/parser_raw.mly"
      ( let v = _1 in (* PR#7344 *)
        let t =
          match _2 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__1_, _endpos__2_) in
        (ghpat ~loc:patloc (Ppat_constraint(v, typ)),
         mkexp_constraint ~loc:_sloc _4 _2) )
# 15826 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _3 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 15895 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 15900 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3331 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15906 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__3_ = _startpos_xs_ in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2593 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 15917 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2615 "src/ocaml/preprocess/parser_raw.mly"
      ( let typloc = (_startpos__3_, _endpos__5_) in
        let patloc = (_startpos__1_, _endpos__5_) in
        (ghpat ~loc:patloc
           (Ppat_constraint(_1, ghtyp ~loc:typloc (Ptyp_poly(_3,_5)))),
         _7) )
# 15927 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 = 
# 2590 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 16001 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2593 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16010 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2621 "src/ocaml/preprocess/parser_raw.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 16022 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2626 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _3) )
# 16061 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2628 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 16115 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16178 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16187 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2644 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 16199 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2634 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 16205 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2635 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 16237 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16293 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16302 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let ext = 
# 3921 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 16308 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2644 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 16319 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2634 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 16325 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16395 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let attrs1 =
            let _1 = _1_inlined2 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16404 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let ext =
            let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__2_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 3922 "src/ocaml/preprocess/parser_raw.mly"
                    ( not_expecting _loc "extension"; None )
# 16415 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2644 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 16427 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2634 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 16433 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2635 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 16465 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2250 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 16490 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2252 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_1, _3) )
# 16530 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 16539 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2253 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 16545 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let pat =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2593 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16581 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2661 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 16587 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : (Parsetree.core_type) = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2663 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos_pat_, _endpos_typ_) in
        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
# 16641 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pat;
              MenhirLib.EngineTypes.startp = _startpos_pat_;
              MenhirLib.EngineTypes.endp = _endpos_pat_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2666 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 16680 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
# 2670 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp = body in
        let_pat, let_exp, [] )
# 16706 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1 : (
# 710 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16740 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = let pbop_op =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16753 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_bindings_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2673 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp, rev_ands = bindings in
        let pbop_pat, pbop_exp = body in
        let pbop_loc = make_loc _sloc in
        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        let_pat, let_exp, and_ :: rev_ands )
# 16766 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 16784 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16850 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_declaration list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16865 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16877 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16885 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1846 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
  )
# 16900 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 16906 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_description list) = 
# 211 "<standard.mly>"
    ( [] )
# 16924 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_description list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16997 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_description list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17012 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17024 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17032 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2145 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
    )
# 17047 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17053 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 17071 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 17144 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_declaration list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17159 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17171 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17179 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2184 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
    )
# 17194 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17200 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_binding list) = 
# 211 "<standard.mly>"
    ( [] )
# 17218 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_binding list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_binding list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17281 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let name =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17293 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17301 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1522 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Mb.mk name body ~attrs ~loc ~text ~docs
  )
# 17316 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17322 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 17340 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_declaration list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17410 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let name =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17422 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17430 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1804 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let loc = make_loc _sloc in
    let text = symbol_text _symbolstartpos in
    Md.mk name mty ~attrs ~loc ~text ~docs
  )
# 17445 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17451 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "<standard.mly>"
    ( [] )
# 17469 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 17501 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 17519 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = kind_priv_manifest;
                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 17586 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let xs = xs_inlined1 in
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17601 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let cstrs =
            let _1 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 17610 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17615 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17621 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17632 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17640 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3057 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 17656 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17662 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 17680 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = params;
                      MenhirLib.EngineTypes.startp = _startpos_params_;
                      MenhirLib.EngineTypes.endp = _endpos_params_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 17754 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let xs = xs_inlined1 in
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17769 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs =
            let _1 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 17778 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17783 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17789 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let kind_priv_manifest =
            let _1 = _1_inlined3 in
            
# 3103 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 17797 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17808 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17816 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3057 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 17832 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17838 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "<standard.mly>"
    ( [] )
# 17856 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 17888 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list list) = 
# 211 "<standard.mly>"
    ( [] )
# 17906 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _1 =
            let _startpos = _startpos__1_ in
            
# 923 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos )
# 17941 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1664 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 17947 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 17953 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : (Parsetree.signature_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _1 =
            let _startpos = _startpos__1_ in
            
# 921 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos @ [_1] )
# 17988 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1664 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 17994 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18000 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "<standard.mly>"
    ( [] )
# 18018 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _1 =
            let ys =
              let items = 
# 983 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 18053 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1406 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 18058 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos = _startpos__1_ in
              
# 919 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 18066 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 18072 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1422 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18078 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18084 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _1 =
            let ys =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              let items =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18138 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1413 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 18143 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 917 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 18151 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 936 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 18161 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 985 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 18167 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1406 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 18173 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos = _startpos__1_ in
              
# 919 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 18181 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 18187 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1422 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18193 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18199 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _1 =
            let _startpos = _startpos__1_ in
            
# 917 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 18234 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1422 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18240 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18246 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list list) = 
# 211 "<standard.mly>"
    ( [] )
# 18264 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_type_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_field list list) = let x =
          let _startpos = _startpos__1_ in
          
# 931 "src/ocaml/preprocess/parser_raw.mly"
  ( text_csig _startpos @ [_1] )
# 18298 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18304 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list list) = 
# 211 "<standard.mly>"
    ( [] )
# 18322 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_field list list) = let x =
          let _startpos = _startpos__1_ in
          
# 929 "src/ocaml/preprocess/parser_raw.mly"
  ( text_cstr _startpos @ [_1] )
# 18356 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18362 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "<standard.mly>"
    ( [] )
# 18380 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos = _startpos__1_ in
          
# 917 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 18414 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18420 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list list) = 
# 211 "<standard.mly>"
    ( [] )
# 18438 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let x =
              let _1 = 
# 983 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 18473 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18478 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 183 "<standard.mly>"
    ( x )
# 18484 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1225 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18490 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18496 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let x =
              let _1 = _1_inlined1 in
              let _1 =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18550 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1413 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 18555 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    
# 927 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 18561 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _startpos = _startpos__1_ in
                  
# 925 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 18569 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 985 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 18575 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18581 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 183 "<standard.mly>"
    ( x )
# 18587 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1225 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18593 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18599 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let _1 = 
# 927 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 18633 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _startpos = _startpos__1_ in
            
# 925 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 18639 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1225 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18645 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18651 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 936 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 18689 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos = _startpos__1_ in
            
# 925 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 18696 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1225 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 18702 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18708 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = opat;
          MenhirLib.EngineTypes.startp = _startpos_opat_;
          MenhirLib.EngineTypes.endp = _endpos_opat_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = octy;
            MenhirLib.EngineTypes.startp = _startpos_octy_;
            MenhirLib.EngineTypes.endp = _endpos_octy_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_opat_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 18747 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18757 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2946 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 18776 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1152 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 18782 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = opat;
            MenhirLib.EngineTypes.startp = _startpos_opat_;
            MenhirLib.EngineTypes.endp = _endpos_opat_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = octy;
              MenhirLib.EngineTypes.startp = _startpos_octy_;
              MenhirLib.EngineTypes.endp = _endpos_octy_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 = 
# 126 "<standard.mly>"
    ( Some x )
# 18828 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18838 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2946 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 18857 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1152 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 18863 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = opat;
                MenhirLib.EngineTypes.startp = _startpos_opat_;
                MenhirLib.EngineTypes.endp = _endpos_opat_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = octy;
                  MenhirLib.EngineTypes.startp = _startpos_octy_;
                  MenhirLib.EngineTypes.endp = _endpos_octy_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit option) = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18928 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2946 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 18947 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1154 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], Some y )
# 18953 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = opat;
              MenhirLib.EngineTypes.startp = _startpos_opat_;
              MenhirLib.EngineTypes.endp = _endpos_opat_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = octy;
                MenhirLib.EngineTypes.startp = _startpos_octy_;
                MenhirLib.EngineTypes.endp = _endpos_octy_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19011 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2946 "src/ocaml/preprocess/parser_raw.mly"
    ( let pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it. *)
            pat_of_label ~loc:_sloc label
        | Some pat ->
            pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 19030 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1158 "src/ocaml/preprocess/parser_raw.mly"
    ( let xs, y = tail in
      x :: xs, y )
# 19037 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Ast_helper.let_bindings) = let _5 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19099 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19110 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 19116 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc = (_startpos, _endpos) in
        
# 3959 "src/ocaml/preprocess/parser_raw.mly"
      ( let (ext, attr) = _2 in
        mklbs ~loc:_loc ext _3 (mklb ~loc:_loc__4_ true _4 (attr@_5)) )
# 19127 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast_helper.let_bindings) = 
# 3963 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 19152 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 3964 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 19184 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 2699 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_ _3) )
# 19223 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 2701 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )
# 19276 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2703 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_
                       (Exp.unreachable ~loc:(make_loc _loc__3_) ())) )
# 19317 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19380 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _6 =
            let _1 = _1_inlined3 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19391 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19400 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3349 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19409 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 19416 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19424 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3559 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 19439 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3540 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 19445 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3570 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 19488 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3540 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 19494 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19550 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _6 =
            let _1 = _1_inlined3 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19561 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19570 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3349 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19579 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 19586 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19594 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3559 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 19609 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3543 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 19615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3570 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 19651 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3543 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 19657 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19699 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _4 =
            let _1 = _1_inlined2 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19710 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3349 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19719 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 19726 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19734 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3552 "src/ocaml/preprocess/parser_raw.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 19745 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3546 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 19751 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3570 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 19780 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3546 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 19786 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 3548 "src/ocaml/preprocess/parser_raw.mly"
      ( [], Open )
# 19811 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = private_;
                MenhirLib.EngineTypes.startp = _startpos_private__;
                MenhirLib.EngineTypes.endp = _endpos_private__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19858 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let ty =
          let _1 = _1_inlined2 in
          
# 3345 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19871 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let label =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 19879 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19887 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19893 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 19898 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1990 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, private_, Cfk_virtual ty), attrs )
# 19903 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 19943 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 19956 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19964 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19970 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 19975 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1992 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 19983 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20029 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20043 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20051 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20059 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 20065 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1992 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 20073 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20134 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _1_inlined2 in
          
# 3345 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20147 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__1_inlined2_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20156 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20164 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20170 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 20175 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1998 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 20183 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20250 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _1_inlined3 in
          
# 3345 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20264 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__1_inlined3_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20273 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20281 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20289 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 20295 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1998 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 20303 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20385 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 = 
# 2590 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 20396 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _startpos__7_ = _startpos_xs_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20404 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20412 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined1_ in
        let _2 = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20419 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
        let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 20425 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2004 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 20452 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined2;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20540 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 = 
# 2590 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 20552 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _startpos__7_ = _startpos_xs_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20560 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20568 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20577 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
        let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 20584 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2004 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 20610 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20631 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 20639 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20672 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 20682 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20703 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 20711 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20744 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 20754 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = let _1 = 
# 3711 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 20779 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 20784 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _1 =
          let _1 = 
# 3652 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 20824 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3711 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 20829 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 20835 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = let _1 = 
# 3711 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 20860 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 20865 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Longident.t) = let _3 =
          let _1 = _1_inlined1 in
          
# 3711 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 20906 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 20912 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _3 =
          let (_2, _1) = (_2_inlined1, _1_inlined1) in
          let _1 = 
# 3652 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 20967 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3711 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 20972 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 20978 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Longident.t) = let _3 =
          let _1 = _1_inlined1 in
          
# 3711 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 21019 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 21025 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 21050 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 21089 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21110 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 21118 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21151 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 21161 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21182 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 21190 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21223 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 21233 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3672 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 21258 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3673 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 21297 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3688 "src/ocaml/preprocess/parser_raw.mly"
                                            ( _1 )
# 21322 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 21371 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3685 "src/ocaml/preprocess/parser_raw.mly"
                                        ( _1 )
# 21396 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1482 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 21428 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _3 : unit = Obj.magic _3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1485 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_constraint(me, mty) )
# 21475 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_me_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 956 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 21484 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1488 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21490 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg;
            MenhirLib.EngineTypes.startp = _startpos_arg_;
            MenhirLib.EngineTypes.endp = _endpos_arg_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let arg : (Parsetree.functor_parameter) = Obj.magic arg in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1487 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_functor(arg, body) )
# 21523 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 956 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 21532 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1488 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21538 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = 
# 1729 "src/ocaml/preprocess/parser_raw.mly"
      ( mty )
# 21570 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg;
            MenhirLib.EngineTypes.startp = _startpos_arg_;
            MenhirLib.EngineTypes.endp = _endpos_arg_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_type) = Obj.magic body in
        let arg : (Parsetree.functor_parameter) = Obj.magic arg in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 = 
# 1732 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_functor(arg, body) )
# 21603 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 958 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 21612 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1734 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21618 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.structure) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21666 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1313 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
# 21675 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let args : (Parsetree.functor_parameter list) = Obj.magic args in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21730 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_me_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1319 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mod_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc arg ->
            mkmod ~loc:_sloc (Pmod_functor (arg, acc))
          ) me args
        ) )
# 21743 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1325 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 21768 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let attr : (Parsetree.attribute) = Obj.magic attr in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : (Parsetree.module_expr) = 
# 1327 "src/ocaml/preprocess/parser_raw.mly"
      ( Mod.attr me attr )
# 21800 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 =
            let x =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21831 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1331 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_ident x )
# 21837 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 956 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 21846 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1343 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21852 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me2;
          MenhirLib.EngineTypes.startp = _startpos_me2_;
          MenhirLib.EngineTypes.endp = _endpos_me2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me1;
            MenhirLib.EngineTypes.startp = _startpos_me1_;
            MenhirLib.EngineTypes.endp = _endpos_me1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me2 : (Parsetree.module_expr) = Obj.magic me2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos_me2_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1334 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_apply(me1, me2) )
# 21885 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_me2_, _startpos_me1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 956 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 21894 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1343 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21900 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me1;
              MenhirLib.EngineTypes.startp = _startpos_me1_;
              MenhirLib.EngineTypes.endp = _endpos_me1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_me1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1337 "src/ocaml/preprocess/parser_raw.mly"
        ( (* TODO review mkmod location *)
          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 21945 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_me1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 956 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 21955 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1343 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21961 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex;
          MenhirLib.EngineTypes.startp = _startpos_ex_;
          MenhirLib.EngineTypes.endp = _endpos_ex_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ex : (Parsetree.extension) = Obj.magic ex in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex_ in
        let _endpos = _endpos_ex_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1341 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_extension ex )
# 21987 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_ex_, _startpos_ex_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 956 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 21996 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1343 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22002 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22023 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string option) = 
# 1296 "src/ocaml/preprocess/parser_raw.mly"
      ( Some x )
# 22031 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string option) = 
# 1299 "src/ocaml/preprocess/parser_raw.mly"
      ( None )
# 22056 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22116 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.module_substitution * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22129 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let body =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22141 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let uid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22152 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22160 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1764 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Ms.mk uid body ~attrs ~loc ~docs, ext
  )
# 22174 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.signature) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22222 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1613 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
# 22231 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let args : (Parsetree.functor_parameter list) = Obj.magic args in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22286 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_mty_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1621 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mty_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc arg ->
            mkmty ~loc:_sloc (Pmty_functor (arg, acc))
          ) mty args
        ) )
# 22299 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_type) = let _4 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22354 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1627 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 22363 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1629 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 22402 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1635 "src/ocaml/preprocess/parser_raw.mly"
      ( Mty.attr _1 _2 )
# 22434 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22465 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1638 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_ident _1 )
# 22471 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 958 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 22480 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1649 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22486 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.module_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 = 
# 1641 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_functor(Named (mknoloc None, _1), _3) )
# 22526 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 958 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 22535 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1649 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22541 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 =
            let _3 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 22583 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 22588 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1643 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_with(_1, _3) )
# 22594 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 958 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 22604 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1649 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22610 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 = 
# 1647 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_extension _1 )
# 22636 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 958 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 22644 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1649 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22650 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = typ;
            MenhirLib.EngineTypes.startp = _startpos_typ_;
            MenhirLib.EngineTypes.endp = _endpos_typ_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let typ : (Parsetree.module_type option) = Obj.magic typ in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.module_type_declaration * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22719 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 22731 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22739 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1559 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
  )
# 22753 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3697 "src/ocaml/preprocess/parser_raw.mly"
                                          ( _1 )
# 22778 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 3773 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable )
# 22796 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3774 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Mutable )
# 22821 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3782 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Concrete )
# 22839 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3784 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Concrete )
# 22864 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3786 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Virtual )
# 22889 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3789 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 22921 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3789 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 22953 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3746 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 22985 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23006 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string Location.loc list) = let x =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23018 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 221 "<standard.mly>"
    ( [ x ] )
# 23024 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23052 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (string Location.loc list) = let x =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23064 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 223 "<standard.mly>"
    ( x :: xs )
# 23070 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 765 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 23091 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (string list) = let x = 
# 3742 "src/ocaml/preprocess/parser_raw.mly"
    ( let body, _, _ = s in body )
# 23099 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 221 "<standard.mly>"
    ( [ x ] )
# 23104 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string list) = Obj.magic xs in
        let s : (
# 765 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 23132 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_xs_ in
        let _v : (string list) = let x = 
# 3742 "src/ocaml/preprocess/parser_raw.mly"
    ( let body, _, _ = s in body )
# 23140 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 223 "<standard.mly>"
    ( x :: xs )
# 23145 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23170 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3077 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 23175 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23207 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3077 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 23212 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23237 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 23243 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23248 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3081 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 23254 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23286 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 23292 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23297 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3081 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 23303 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23342 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 23349 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 23354 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23360 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3081 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 23366 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23412 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 23419 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 23424 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23430 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3081 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 23436 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23461 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 23467 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23472 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3085 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 23478 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23510 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 23516 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23521 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3085 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 23527 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23566 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 23573 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 23578 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23584 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3085 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 23590 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23636 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 23643 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 23648 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23654 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3085 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 23660 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23699 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 23705 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23710 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3089 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 23716 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23762 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 23768 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23773 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3089 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 23779 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 23832 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 23839 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 23844 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23850 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3089 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 23856 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 23916 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 23923 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 23928 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3093 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23934 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3089 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 23940 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined2 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23995 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined2_ in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24004 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 24010 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1578 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 24023 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24085 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let attrs1 =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24094 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override =
          let _1 = _1_inlined1 in
          
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 24102 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1578 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 24116 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24171 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24183 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24191 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 24197 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1593 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 24210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24272 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24284 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined2 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24292 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override =
          let _1 = _1_inlined1 in
          
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 24300 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1593 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 24314 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 751 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24335 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3612 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24343 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 709 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24364 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3613 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24372 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 710 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24393 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3614 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24401 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24443 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3615 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"(" ^ _3 ^ ")" )
# 24451 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24500 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3616 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "(" ^ _3 ^ ")<-" )
# 24508 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24550 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3617 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"[" ^ _3 ^ "]" )
# 24558 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24607 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3618 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "[" ^ _3 ^ "]<-" )
# 24615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24657 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3619 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"{" ^ _3 ^ "}" )
# 24665 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24714 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3620 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "{" ^ _3 ^ "}<-" )
# 24722 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 762 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24743 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3621 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24751 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3622 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "!" )
# 24776 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24797 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3626 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 24805 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24810 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 704 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24831 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3627 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 24839 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24844 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 705 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24865 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3628 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 24873 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24878 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 706 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24899 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3629 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 24907 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24912 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 707 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24933 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3630 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 24941 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24946 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3631 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 24971 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 24976 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3632 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 25001 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25006 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3633 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 25031 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25036 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3634 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 25061 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25066 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3635 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 25091 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25096 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3636 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 25121 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25126 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3637 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 25151 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25156 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3638 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 25181 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25186 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3639 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 25211 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25216 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3640 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 25241 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25246 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3641 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 25271 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25276 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3642 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 25301 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25306 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3643 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 25331 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25336 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3644 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 25361 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25366 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3645 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 25391 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3623 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25396 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 3525 "src/ocaml/preprocess/parser_raw.mly"
                                                ( true )
# 25421 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 3526 "src/ocaml/preprocess/parser_raw.mly"
                                                ( false )
# 25439 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "<standard.mly>"
    ( None )
# 25457 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "<standard.mly>"
    ( Some x )
# 25482 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "<standard.mly>"
    ( None )
# 25500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "<standard.mly>"
    ( Some x )
# 25525 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 114 "<standard.mly>"
    ( None )
# 25543 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25570 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (string Location.loc option) = let x =
          let x =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25585 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 183 "<standard.mly>"
    ( x )
# 25591 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "<standard.mly>"
    ( Some x )
# 25597 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 114 "<standard.mly>"
    ( None )
# 25615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 25647 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 25652 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "<standard.mly>"
    ( None )
# 25670 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 25702 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 25707 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 114 "<standard.mly>"
    ( None )
# 25725 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.module_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.module_type option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 25757 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 25762 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern option) = 
# 114 "<standard.mly>"
    ( None )
# 25780 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.pattern option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 25812 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 25817 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "<standard.mly>"
    ( None )
# 25835 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 25867 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 25872 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 114 "<standard.mly>"
    ( None )
# 25890 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 116 "<standard.mly>"
    ( Some x )
# 25915 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 744 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25936 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25944 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25978 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3829 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 25987 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = me;
                MenhirLib.EngineTypes.startp = _startpos_me_;
                MenhirLib.EngineTypes.endp = _endpos_me_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1352 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
# 26043 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 1359 "src/ocaml/preprocess/parser_raw.mly"
      ( me (* TODO consider reloc *) )
# 26082 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e = 
# 1382 "src/ocaml/preprocess/parser_raw.mly"
      ( e )
# 26135 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26142 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1367 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 26151 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let (_endpos__1_, _startpos__1_, _1, _2) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2, _2_inlined1) in
          let ty =
            let _1 =
              let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 26222 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 26230 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26236 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty_ = _endpos__1_ in
          let _endpos = _endpos_ty_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1384 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
# 26246 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26254 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1367 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 26263 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let (_endpos__1_inlined1_, _startpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _1, _2) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined3, _1_inlined2, _2_inlined1) in
          let ty2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 =
              let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 26349 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 26357 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26363 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1_inlined1_ in
          let ty1 =
            let _1 =
              let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 26372 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 26380 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26386 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1386 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
# 26395 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26403 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1367 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 26412 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let (_endpos__1_, _startpos__1_, _1, _2) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2, _2_inlined1) in
          let ty2 =
            let _1 =
              let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 26483 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 26491 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26497 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1_ in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1388 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
# 26507 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26515 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1367 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 26524 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1270 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26556 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1255 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26588 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 1230 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26620 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1235 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26652 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1260 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26684 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1265 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26716 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1245 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26748 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = 
# 1240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26780 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1250 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26812 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2808 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 26856 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26862 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2810 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 26894 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26899 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2812 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26924 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 26929 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 26976 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2815 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 26982 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 26992 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2826 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 26998 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27004 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2819 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 27031 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27039 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2826 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27045 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27051 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2823 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 27092 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27101 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2826 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27107 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27113 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27163 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 27169 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2798 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 27178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2926 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 27217 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2927 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 27256 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2926 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 27295 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2927 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 27334 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2831 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27359 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27397 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2834 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_construct(_1, Some _2) )
# 27403 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27413 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2837 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27419 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2836 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_variant(_1, Some _2) )
# 27452 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27461 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2837 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27467 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27517 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 27523 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2839 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 27532 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2808 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 27576 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27582 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2810 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 27614 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27619 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2812 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27644 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27649 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27696 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2815 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 27702 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27712 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2826 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27718 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27724 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2819 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 27751 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27759 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2826 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27765 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27771 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2823 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 27812 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27821 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2826 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27827 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 27833 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27854 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27868 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2227 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_var _1 )
# 27874 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27883 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2229 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27889 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2228 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_any )
# 27915 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 27923 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2229 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27929 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 3938 "src/ocaml/preprocess/parser_raw.mly"
              ( PStr _1 )
# 27954 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3939 "src/ocaml/preprocess/parser_raw.mly"
                    ( PSig _2 )
# 27986 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3940 "src/ocaml/preprocess/parser_raw.mly"
                    ( PTyp _2 )
# 28018 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3941 "src/ocaml/preprocess/parser_raw.mly"
                     ( PPat (_2, None) )
# 28050 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 3942 "src/ocaml/preprocess/parser_raw.mly"
                                   ( PPat (_2, Some _4) )
# 28096 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3339 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28121 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 28164 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 28169 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3331 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28175 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3335 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 28181 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_xs_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 28191 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3341 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28197 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 = 
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28222 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3339 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28227 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 = 
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28268 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _1 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 28275 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1015 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 28280 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3331 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28286 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3335 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 28292 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 28302 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3341 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28308 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3901 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 28357 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = prim;
            MenhirLib.EngineTypes.startp = _startpos_prim_;
            MenhirLib.EngineTypes.endp = _endpos_prim_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let prim : (string list) = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28440 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28452 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28460 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2987 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~prim ~attrs ~loc ~docs,
      ext )
# 28473 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag) = let _1 = 
# 3769 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 28491 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3766 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28496 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = let _1 = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 28521 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3766 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28526 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3792 "src/ocaml/preprocess/parser_raw.mly"
                 ( Public, Concrete )
# 28544 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3793 "src/ocaml/preprocess/parser_raw.mly"
            ( Private, Concrete )
# 28569 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3794 "src/ocaml/preprocess/parser_raw.mly"
            ( Public, Virtual )
# 28594 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3795 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 28626 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3796 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 28658 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 3749 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 28676 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 3750 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 28701 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo = 
# 124 "<standard.mly>"
    ( None )
# 28727 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2728 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 28732 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
          let x = 
# 191 "<standard.mly>"
    ( x )
# 28773 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 126 "<standard.mly>"
    ( Some x )
# 28778 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2728 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 28784 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.constructor_declaration list) = let x = 
# 3161 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 28814 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1125 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 28819 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.constructor_declaration list) = let x = 
# 3161 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 28849 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1128 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 28854 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.constructor_declaration list) = let x = 
# 3161 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 28891 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1132 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 28896 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 28927 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3267 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28932 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1125 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 28938 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3269 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28963 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1125 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 28968 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 28999 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3267 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29004 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1128 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29010 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3269 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29035 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1128 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29040 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29078 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3267 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29083 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1132 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 29089 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3269 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29121 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1132 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 29126 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29156 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1125 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29161 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29191 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1128 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 29196 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 29233 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1132 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 29238 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = 
# 991 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 29256 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = let x =
          let x =
            let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2107 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3, make_loc _sloc )
# 29315 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 183 "<standard.mly>"
    ( x )
# 29321 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 993 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29327 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.functor_parameter) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.functor_parameter list) = 
# 1005 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29352 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.functor_parameter) = Obj.magic x in
        let xs : (Parsetree.functor_parameter list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.functor_parameter list) = 
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29384 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1005 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29409 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29441 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 1005 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29466 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let xs : (string list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (string Location.loc list) = let x =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29536 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3327 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 29542 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1005 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29548 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (string Location.loc list) = let x =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29593 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3327 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 29599 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1007 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29605 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 = 
# 124 "<standard.mly>"
    ( None )
# 29630 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1096 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 29635 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_inlined1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 =
          let x = x_inlined1 in
          
# 126 "<standard.mly>"
    ( Some x )
# 29669 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1096 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 29675 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = 
# 1100 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29714 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = 
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29740 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29745 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29751 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = 
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29791 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29796 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29802 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.with_constraint list) = let xs = 
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29827 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29832 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.with_constraint list) = let xs = 
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29871 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29876 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.row_field list) = let xs = 
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29901 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29906 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.row_field list) = let xs = 
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 29945 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29950 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 29975 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29980 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30019 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30024 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type * Asttypes.variance) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs = 
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30049 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30054 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type * Asttypes.variance) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let xs = 
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30093 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30098 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30123 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30128 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30167 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 30172 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30211 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 30250 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = 
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30289 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.expression) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.expression) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.expression list) = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 30328 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30367 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1066 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 30406 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 3510 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30431 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3512 "src/ocaml/preprocess/parser_raw.mly"
      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 30459 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 30484 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v : (Parsetree.expression list) = let _2 =
          let x = x_inlined1 in
          
# 126 "<standard.mly>"
    ( Some x )
# 30523 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30529 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression list) = 
# 1087 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30568 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = oe;
          MenhirLib.EngineTypes.startp = _startpos_oe_;
          MenhirLib.EngineTypes.endp = _endpos_oe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 30596 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_oe_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 30604 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 30611 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30619 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2751 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 30637 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30643 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = oe;
            MenhirLib.EngineTypes.startp = _startpos_oe_;
            MenhirLib.EngineTypes.endp = _endpos_oe_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 30678 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 = 
# 126 "<standard.mly>"
    ( Some x )
# 30686 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 30693 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30701 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2751 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 30719 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30725 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = oe;
              MenhirLib.EngineTypes.startp = _startpos_oe_;
              MenhirLib.EngineTypes.endp = _endpos_oe_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 30767 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let x =
          let label =
            let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 30777 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30785 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2751 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 30803 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1087 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30809 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.pattern list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 30834 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30839 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v : (Parsetree.pattern list) = let _2 =
          let x = x_inlined1 in
          
# 126 "<standard.mly>"
    ( Some x )
# 30873 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30879 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.pattern list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.pattern list) = 
# 1087 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30918 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = eo;
          MenhirLib.EngineTypes.startp = _startpos_eo_;
          MenhirLib.EngineTypes.endp = _endpos_eo_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_eo_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 30957 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 30967 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2734 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 30985 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 30991 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = eo;
            MenhirLib.EngineTypes.startp = _startpos_eo_;
            MenhirLib.EngineTypes.endp = _endpos_eo_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = c;
              MenhirLib.EngineTypes.startp = _startpos_c_;
              MenhirLib.EngineTypes.endp = _endpos_c_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 = 
# 126 "<standard.mly>"
    ( Some x )
# 31037 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31047 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2734 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 31065 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1083 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31071 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = eo;
              MenhirLib.EngineTypes.startp = _startpos_eo_;
              MenhirLib.EngineTypes.endp = _endpos_eo_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = c;
                MenhirLib.EngineTypes.startp = _startpos_c_;
                MenhirLib.EngineTypes.endp = _endpos_c_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31129 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2734 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 31147 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1087 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31153 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2196 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 31178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2197 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 31210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2199 "src/ocaml/preprocess/parser_raw.mly"
    ( Pexp_sequence(_1, _3) )
# 31250 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 31259 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2200 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31265 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Location.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2202 "src/ocaml/preprocess/parser_raw.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 31323 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args_res;
              MenhirLib.EngineTypes.startp = _startpos_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_args_res_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _1_inlined4 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31392 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined4_ in
        let attrs2 =
          let _1 = _1_inlined3 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31401 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31412 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31420 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3191 "src/ocaml/preprocess/parser_raw.mly"
    ( let args, res = args_res in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs
        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
      , ext )
# 31434 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.signature_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v : (Parsetree.signature) = let _1 =
          let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 31460 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 906 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_sig _startpos _endpos _1 )
# 31468 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1655 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.signature_item) = let _2 =
          let _1 = _1_inlined1 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31508 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1670 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 31519 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1674 "src/ocaml/preprocess/parser_raw.mly"
        ( Psig_attribute _1 )
# 31545 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 954 "src/ocaml/preprocess/parser_raw.mly"
    ( mksig ~loc:_sloc _1 )
# 31553 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1676 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31559 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1679 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 31585 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 31593 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31599 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1681 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 31625 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 31633 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31639 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 31676 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 3023 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 31681 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3006 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31687 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1683 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_type _1 )
# 31693 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 31703 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31709 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 31746 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 3023 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 31751 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3011 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31757 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1685 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typesubst _1 )
# 31763 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 31773 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31779 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31866 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let cs = 
# 1136 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 31873 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31883 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 = 
# 3757 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 31889 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31896 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3260 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 31908 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3247 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31914 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1687 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 31920 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 31930 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31936 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32030 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let cs = 
# 1136 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 32037 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32047 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3758 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 32058 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32066 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3260 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 32078 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3247 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32084 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1687 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 32090 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32100 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32106 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1689 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_exception _1 )
# 32132 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32140 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32146 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_type) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined3 in
                
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32211 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let name =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32223 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32231 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1718 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 32245 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1691 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 32251 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32261 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32267 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined4 in
                
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32339 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined4_ in
              let body =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                let id =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32352 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let (_endpos_id_, _startpos_id_) = (_endpos__1_, _startpos__1_) in
                let _endpos = _endpos_id_ in
                let _symbolstartpos = _startpos_id_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1754 "src/ocaml/preprocess/parser_raw.mly"
    ( Mty.alias ~loc:(make_loc _sloc) id )
# 32362 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let name =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32373 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32381 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1745 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 32395 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1693 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 32401 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32411 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32417 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_substitution * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1695 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
# 32443 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32451 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32457 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32545 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let name =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32557 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32565 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1790 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext, Md.mk name mty ~attrs ~loc ~docs
  )
# 32579 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 32585 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1779 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32591 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1697 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
# 32597 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32607 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32613 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1699 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 32639 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32647 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32653 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1701 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_open body, ext) )
# 32679 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32687 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32693 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let thing : (Parsetree.module_type) = Obj.magic thing in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined2 in
                
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32751 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined2_ in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32760 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1543 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 32774 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1703 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_include _1 )
# 32780 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32790 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32796 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_description list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 32875 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32895 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let id =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32907 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32915 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 2128 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
    )
# 32930 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 32936 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2116 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32942 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1705 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class l, ext) )
# 32948 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32958 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32964 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1707 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
# 32990 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 971 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 32998 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1709 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33004 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3586 "src/ocaml/preprocess/parser_raw.mly"
                 ( _1 )
# 33029 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 713 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 33056 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3587 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 33065 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 692 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 33092 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3588 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 33101 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 713 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 33128 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3589 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 33137 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 692 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 33164 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3590 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 33173 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 2938 "src/ocaml/preprocess/parser_raw.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 33218 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2909 "src/ocaml/preprocess/parser_raw.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 33225 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 33235 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2923 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33241 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 = 
# 2932 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 33282 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2914 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailpat _loc__3_ _2) )
# 33288 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 33298 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2923 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33304 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 = 
# 2932 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 33345 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2918 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array _2 )
# 33350 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 33360 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2923 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33366 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2920 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array [] )
# 33399 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 33408 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2923 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33414 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        
# 3947 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.code _startpos _endpos _2 )
# 33455 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _startpos = _startpos__1_ in
        
# 3949 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.uncode _startpos _endpos _2 )
# 33489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2369 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 33531 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2375 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 33580 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2377 "src/ocaml/preprocess/parser_raw.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 33636 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2383 "src/ocaml/preprocess/parser_raw.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 33692 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33740 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 33749 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2389 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident bracket _2 _1 _4 )
# 33757 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33805 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 33814 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2395 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident paren _2 _1 _4  )
# 33822 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33870 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 33879 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2401 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident brace _2 _1 _4 )
# 33887 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 33947 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 33958 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2407 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) bracket _4 _1 _6  )
# 33966 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 34026 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 34037 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2414 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) paren _4 _1 _6 )
# 34045 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 34105 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 34116 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2421 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) brace _4 _1 _6  )
# 34124 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2428 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 34180 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let attrs =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34236 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2441 "src/ocaml/preprocess/parser_raw.mly"
      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
# 34242 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__5_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2434 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 34253 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34304 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 34310 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2443 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 34319 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2434 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 34330 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34382 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34392 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 34398 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2449 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_new(_3), _2 )
# 34404 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__1_inlined3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2434 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 34415 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34480 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 34486 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2451 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_pack _4, _3 )
# 34492 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__5_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2434 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 34503 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _6 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _1 =
              let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 34581 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 34589 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34595 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34605 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 34611 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2453 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 34620 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2434 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 34631 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34662 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2461 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ident (_1) )
# 34668 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 34677 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34683 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2463 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constant _1 )
# 34709 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 34717 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34754 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2465 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, None) )
# 34760 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 34769 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34775 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2467 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, None) )
# 34801 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 34809 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34815 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 751 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 34843 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 34857 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2469 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 34863 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 34873 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34879 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _1 = 
# 2470 "src/ocaml/preprocess/parser_raw.mly"
            ("!")
# 34914 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 34922 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2471 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 34928 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 34938 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 34944 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 = 
# 2746 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 34985 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2473 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override _2 )
# 34990 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35000 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35006 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2479 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override [] )
# 35039 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35048 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35054 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35100 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2481 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_field(_1, _3) )
# 35106 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35116 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35122 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35182 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 35191 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2483 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, _4) )
# 35197 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35207 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35213 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _4 = 
# 2746 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 35268 "src/ocaml/preprocess/parser_raw.ml"
             in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35278 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 35287 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2485 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
# 35298 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35308 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35314 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35347 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 35361 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35369 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2492 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_send(_1, _3) )
# 35375 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35385 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35391 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (
# 762 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35425 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 940 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 35441 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2494 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix _1 _2 _3 )
# 35447 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35457 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35463 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2496 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension _1 )
# 35489 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35497 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35503 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 2498 "src/ocaml/preprocess/parser_raw.mly"
      ( let id = mkrhs "merlin.hole" _loc in
        Pexp_extension (id, PStr []) )
# 35534 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35543 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35549 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
              let _1 = 
# 2500 "src/ocaml/preprocess/parser_raw.mly"
                                                    (Lident "()")
# 35599 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35608 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__2_inlined1_ in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35620 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 35629 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2501 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 35640 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35650 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35656 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2508 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 35698 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35707 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35713 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35774 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 35783 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2515 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _4 in
        (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_record(fields, exten))) )
# 35795 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35805 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35811 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35852 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2523 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array(_2) )
# 35857 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35867 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35873 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2529 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array [] )
# 35906 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 35915 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 35921 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35976 "src/ocaml/preprocess/parser_raw.ml"
             in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35986 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 35995 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2531 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array(_4))) )
# 36006 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36016 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36022 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36075 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36084 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2534 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_array [])) )
# 36095 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36105 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36111 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36152 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2542 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailexp _loc__3_ _2) )
# 36158 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36168 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36174 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _4 = 
# 2763 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 36229 "src/ocaml/preprocess/parser_raw.ml"
             in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36239 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36248 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2548 "src/ocaml/preprocess/parser_raw.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
          mkexp ~loc:_sloc tail_exp in
        Pexp_open(od, list_exp) )
# 36263 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36273 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36279 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
              let _1 = 
# 2553 "src/ocaml/preprocess/parser_raw.mly"
                                                        (Lident "[]")
# 36329 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36338 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__2_inlined1_ in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36350 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36359 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2554 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 36370 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36380 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36386 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : unit = Obj.magic _9 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.module_expr) = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _8 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _1 =
                let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 36479 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 36487 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36493 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _5 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36503 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36509 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36520 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1602 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36529 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__9_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2563 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_constraint *)
        let modexp =
          mkexp_attrs ~loc:_sloc
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(od, modexp) )
# 36543 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__9_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 946 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36553 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2437 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36559 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36590 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2843 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_var (_1) )
# 36596 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36605 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2844 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36611 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2845 "src/ocaml/preprocess/parser_raw.mly"
                             ( _1 )
# 36636 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2850 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 36678 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2852 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36703 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36768 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36778 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36784 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2854 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 36793 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined4 : (Parsetree.module_type) = Obj.magic _1_inlined4 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern) = let _6 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined4_, _startpos__1_inlined4_, _1_inlined4) in
          let _1 =
            let _1 = 
# 3501 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 36870 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 36878 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36884 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36895 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36905 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3925 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36911 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2856 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_sloc (Ppat_unpack _4), _6))
          _3 )
# 36922 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2864 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_any )
# 36948 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36956 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36962 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2866 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constant _1 )
# 36988 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 36996 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37002 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.constant) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2868 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_interval (_1, _3) )
# 37042 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37051 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37057 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37088 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2870 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_construct(_1, None) )
# 37094 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37103 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37109 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2872 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_variant(_1, None) )
# 37135 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37143 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37149 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37188 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2874 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_type (_2) )
# 37194 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37204 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37255 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2876 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open(_1, _3) )
# 37261 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37277 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
              let _1 = 
# 2877 "src/ocaml/preprocess/parser_raw.mly"
                                                     (Lident "[]")
# 37327 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37336 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__2_inlined1_ in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37347 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2878 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 37356 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37366 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37372 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_, _2, _1) = (_endpos__2_inlined1_, _startpos__1_inlined1_, _2_inlined1, _1_inlined1) in
              let _1 = 
# 2879 "src/ocaml/preprocess/parser_raw.mly"
                                                 (Lident "()")
# 37422 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37431 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__2_inlined1_ in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37442 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2880 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 37451 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37461 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37467 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37526 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2882 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open (_1, _4) )
# 37532 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37542 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37548 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2892 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 37602 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37611 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37617 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2903 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_extension _1 )
# 37643 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 948 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 37651 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2860 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37657 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 37678 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3835 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 37686 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 37707 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3836 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 37715 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3837 "src/ocaml/preprocess/parser_raw.mly"
        ( "and" )
# 37740 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3838 "src/ocaml/preprocess/parser_raw.mly"
       ( "as" )
# 37765 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3839 "src/ocaml/preprocess/parser_raw.mly"
           ( "assert" )
# 37790 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3840 "src/ocaml/preprocess/parser_raw.mly"
          ( "begin" )
# 37815 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3841 "src/ocaml/preprocess/parser_raw.mly"
          ( "class" )
# 37840 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
               ( "constraint" )
# 37865 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3843 "src/ocaml/preprocess/parser_raw.mly"
       ( "do" )
# 37890 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3844 "src/ocaml/preprocess/parser_raw.mly"
         ( "done" )
# 37915 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3845 "src/ocaml/preprocess/parser_raw.mly"
           ( "downto" )
# 37940 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3846 "src/ocaml/preprocess/parser_raw.mly"
         ( "else" )
# 37965 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3847 "src/ocaml/preprocess/parser_raw.mly"
        ( "end" )
# 37990 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3848 "src/ocaml/preprocess/parser_raw.mly"
              ( "exception" )
# 38015 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3849 "src/ocaml/preprocess/parser_raw.mly"
             ( "external" )
# 38040 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3850 "src/ocaml/preprocess/parser_raw.mly"
          ( "false" )
# 38065 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3851 "src/ocaml/preprocess/parser_raw.mly"
        ( "for" )
# 38090 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3852 "src/ocaml/preprocess/parser_raw.mly"
        ( "fun" )
# 38115 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3853 "src/ocaml/preprocess/parser_raw.mly"
             ( "function" )
# 38140 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3854 "src/ocaml/preprocess/parser_raw.mly"
            ( "functor" )
# 38165 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3855 "src/ocaml/preprocess/parser_raw.mly"
       ( "if" )
# 38190 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3856 "src/ocaml/preprocess/parser_raw.mly"
       ( "in" )
# 38215 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3857 "src/ocaml/preprocess/parser_raw.mly"
            ( "include" )
# 38240 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3858 "src/ocaml/preprocess/parser_raw.mly"
            ( "inherit" )
# 38265 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3859 "src/ocaml/preprocess/parser_raw.mly"
                ( "initializer" )
# 38290 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3860 "src/ocaml/preprocess/parser_raw.mly"
         ( "lazy" )
# 38315 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3861 "src/ocaml/preprocess/parser_raw.mly"
        ( "let" )
# 38340 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
          ( "match" )
# 38365 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
           ( "method" )
# 38390 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3864 "src/ocaml/preprocess/parser_raw.mly"
           ( "module" )
# 38415 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3865 "src/ocaml/preprocess/parser_raw.mly"
            ( "mutable" )
# 38440 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3866 "src/ocaml/preprocess/parser_raw.mly"
        ( "new" )
# 38465 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3867 "src/ocaml/preprocess/parser_raw.mly"
           ( "nonrec" )
# 38490 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3868 "src/ocaml/preprocess/parser_raw.mly"
           ( "object" )
# 38515 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3869 "src/ocaml/preprocess/parser_raw.mly"
       ( "of" )
# 38540 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3870 "src/ocaml/preprocess/parser_raw.mly"
         ( "open" )
# 38565 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3871 "src/ocaml/preprocess/parser_raw.mly"
       ( "or" )
# 38590 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3872 "src/ocaml/preprocess/parser_raw.mly"
            ( "private" )
# 38615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3873 "src/ocaml/preprocess/parser_raw.mly"
        ( "rec" )
# 38640 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3874 "src/ocaml/preprocess/parser_raw.mly"
        ( "sig" )
# 38665 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3875 "src/ocaml/preprocess/parser_raw.mly"
           ( "struct" )
# 38690 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3876 "src/ocaml/preprocess/parser_raw.mly"
         ( "then" )
# 38715 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3877 "src/ocaml/preprocess/parser_raw.mly"
       ( "to" )
# 38740 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
         ( "true" )
# 38765 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3879 "src/ocaml/preprocess/parser_raw.mly"
        ( "try" )
# 38790 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3880 "src/ocaml/preprocess/parser_raw.mly"
         ( "type" )
# 38815 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3881 "src/ocaml/preprocess/parser_raw.mly"
        ( "val" )
# 38840 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3882 "src/ocaml/preprocess/parser_raw.mly"
            ( "virtual" )
# 38865 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3883 "src/ocaml/preprocess/parser_raw.mly"
         ( "when" )
# 38890 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3884 "src/ocaml/preprocess/parser_raw.mly"
          ( "while" )
# 38915 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3885 "src/ocaml/preprocess/parser_raw.mly"
         ( "with" )
# 38940 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = 
# 3168 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38965 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _1_inlined5 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39041 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined5_ in
        let attrs2 =
          let _1 = _1_inlined4 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39050 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let lid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39061 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39072 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39080 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3177 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Te.mk_exception ~attrs
      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
    , ext )
# 39093 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2687 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 39125 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2689 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 39160 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 = 
# 2590 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 39213 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2691 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 39221 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v : (Parsetree.structure) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 39248 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let items = 
# 983 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 39254 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1406 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 39259 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 39265 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 905 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 39274 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1399 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 39280 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_xss_ in
        let _v : (Parsetree.structure) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 39321 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let items =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39331 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1413 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 39336 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 917 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 39344 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 936 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 39354 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 985 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 39360 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1406 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 39366 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 39372 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 905 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 39381 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1399 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 39387 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 3955 "src/ocaml/preprocess/parser_raw.mly"
    ( val_of_lwt_bindings ~loc:_loc _1 )
# 39415 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1428 "src/ocaml/preprocess/parser_raw.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 39443 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39479 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__2_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1431 "src/ocaml/preprocess/parser_raw.mly"
        ( let docs = symbol_docs _sloc in
          Pstr_extension (_1, add_docs_attrs docs _2) )
# 39490 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 952 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 39500 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39506 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1434 "src/ocaml/preprocess/parser_raw.mly"
        ( Pstr_attribute _1 )
# 39532 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 952 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 39540 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39546 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1438 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 39572 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 39580 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39586 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1440 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 39612 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 39620 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39626 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 39663 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 3023 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 39668 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3006 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39674 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1442 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_type _1 )
# 39680 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 39690 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39696 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39783 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let cs = 
# 1136 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 39790 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39800 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 = 
# 3757 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 39806 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39813 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3260 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 39825 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3243 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39831 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1444 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 39837 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 39847 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39853 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39947 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let cs = 
# 1136 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 39954 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39964 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3758 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 39975 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 39983 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3260 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 39995 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3243 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40001 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1444 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 40007 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40017 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40023 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1446 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_exception _1 )
# 40049 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40057 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40063 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined3 in
                
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40128 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let name =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40140 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40148 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1472 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let loc = make_loc _sloc in
      let attrs = attrs1 @ attrs2 in
      let body = Mb.mk name body ~attrs ~loc ~docs in
      Pstr_module body, ext )
# 40161 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1448 "src/ocaml/preprocess/parser_raw.mly"
        ( _1 )
# 40167 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40177 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40183 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_binding list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40264 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let name =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40276 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40284 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1506 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    ext,
    Mb.mk name body ~attrs ~loc ~docs
  )
# 40299 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 40305 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1494 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40311 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1450 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_recmodule _1 )
# 40317 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40327 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40333 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1452 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 40359 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40367 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40373 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1454 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 40399 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40407 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40413 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 40485 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40505 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let id =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40517 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40525 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1830 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext,
    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
  )
# 40540 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1144 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 40546 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1819 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40552 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1456 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class l, ext) )
# 40558 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40568 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40574 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1458 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
# 40600 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40608 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40614 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let thing : (Parsetree.module_expr) = Obj.magic thing in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined2 in
                
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40672 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined2_ in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40681 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1543 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 40695 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1460 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_include _1 )
# 40701 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 969 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 40711 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1462 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40717 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3820 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-" )
# 40742 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3821 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-." )
# 40767 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.row_field) = let _5 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40822 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined1_ in
        let _4 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 40831 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 40836 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3530 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40842 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40852 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3516 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
# 40863 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.row_field) = let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40897 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40908 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3520 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 40919 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.toplevel_phrase) = let arg = 
# 124 "<standard.mly>"
    ( None )
# 40951 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos_arg_ = _endpos__1_inlined1_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40962 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 40971 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 765 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 41004 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3724 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (s, _, _) = _1 in Pdir_string s )
# 41017 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 974 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 41025 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 41031 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41043 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 41052 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 713 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 41085 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3725 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (n, m) = _1 in Pdir_int (n ,m) )
# 41098 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 974 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 41106 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 41112 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41124 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 41133 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3726 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 41175 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 974 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 41183 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 41189 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41201 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 41210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3727 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 41252 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 974 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 41260 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 41266 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41278 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 41287 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3728 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool false )
# 41329 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 974 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 41337 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 41343 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41355 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 41364 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3729 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool true )
# 41406 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 974 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 41414 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 41420 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 41432 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 41441 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = let _1 =
          let _1 =
            let _1 =
              let attrs = 
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41483 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1413 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 41488 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_e_ in
            let _startpos = _startpos__1_ in
            
# 917 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 41496 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_e_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 905 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 41505 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1182 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 41511 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = let _1 =
          let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 41544 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 905 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 41552 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1186 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 41558 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1190 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41590 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1193 "src/ocaml/preprocess/parser_raw.mly"
    ( raise End_of_file )
# 41615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3422 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 41640 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tys =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 41668 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1075 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 41673 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3425 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_tuple tys )
# 41679 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41689 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3427 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41695 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2766 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, None) )
# 41727 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2767 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, Some _4) )
# 41773 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2768 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (None, Some _2) )
# 41805 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3097 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, Public, None) )
# 41823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3099 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 41855 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3682 "src/ocaml/preprocess/parser_raw.mly"
                                            ( _1 )
# 41880 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * Asttypes.variance) = 
# 3114 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _2, _1 )
# 41912 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 3107 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 41930 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Parsetree.core_type * Asttypes.variance) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 3109 "src/ocaml/preprocess/parser_raw.mly"
      ( [p] )
# 41955 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = let ps =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 41995 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1047 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 42000 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3111 "src/ocaml/preprocess/parser_raw.mly"
      ( ps )
# 42006 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tyvar : (string) = Obj.magic tyvar in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tyvar_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3119 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_var tyvar )
# 42039 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_tyvar_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42048 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3122 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42054 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3121 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_any )
# 42080 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 950 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42088 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3122 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42094 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance) = 
# 3126 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Invariant )
# 42112 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 3127 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Covariant )
# 42137 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 3128 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Contravariant )
# 42162 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 42196 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let _1 = 
# 983 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 42202 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42207 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 42213 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 909 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 42222 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1206 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42228 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 42276 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let _1 =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42286 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1413 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 42291 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    
# 927 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 42297 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _startpos = _startpos__1_ in
                  
# 925 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 42305 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 985 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 42311 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42317 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 42323 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 909 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 42332 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1206 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42338 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
                              ( _2 )
# 42377 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42398 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3608 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 42406 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3609 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 42431 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3676 "src/ocaml/preprocess/parser_raw.mly"
                                           ( _1 )
# 42456 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = mutable_;
                MenhirLib.EngineTypes.startp = _startpos_mutable__;
                MenhirLib.EngineTypes.endp = _endpos_mutable__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42503 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let label =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 42516 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42524 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42530 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 42535 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1976 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, mutable_, Cfk_virtual ty), attrs )
# 42540 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42587 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 42600 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42608 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42614 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 42619 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1978 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 42624 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42677 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 42691 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42699 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42707 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 42713 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1978 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 42718 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined1 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42772 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 42785 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42793 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined1_ in
        let _2 = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42800 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
        let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 42806 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1981 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 42826 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined2 : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42886 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3574 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 42900 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 42908 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42917 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
        let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 42924 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1981 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 42943 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43012 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43024 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 3914 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43032 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2968 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~attrs ~loc ~docs,
      ext )
# 43045 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 3777 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Concrete )
# 43063 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 3778 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Virtual )
# 43088 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3801 "src/ocaml/preprocess/parser_raw.mly"
            ( Immutable )
# 43113 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3802 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 43145 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3803 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 43177 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3808 "src/ocaml/preprocess/parser_raw.mly"
            ( Public )
# 43202 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3809 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 43234 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3810 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 43266 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.with_constraint) = let _6 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 43328 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 997 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 43333 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3068 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43339 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos_xs_ in
        let _5 =
          let _1 = _1_inlined2 in
          
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43348 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43359 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3293 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:_6
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 43376 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.with_constraint) = let _5 =
          let _1 = _1_inlined2 in
          
# 3370 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43431 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined2_ in
        let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43443 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3306 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 43458 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43509 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43520 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3314 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_module (_2, _4) )
# 43526 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43577 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 913 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43588 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3316 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_modsubst (_2, _4) )
# 43594 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3319 "src/ocaml/preprocess/parser_raw.mly"
                   ( Public )
# 43619 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3320 "src/ocaml/preprocess/parser_raw.mly"
                   ( Private )
# 43651 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
  module Symbols = struct
    
    type _ terminal = 
      | T_error : unit terminal
      | T_WITH : unit terminal
      | T_WHILE_LWT : unit terminal
      | T_WHILE : unit terminal
      | T_WHEN : unit terminal
      | T_VIRTUAL : unit terminal
      | T_VAL : unit terminal
      | T_UNDERSCORE : unit terminal
      | T_UIDENT : (
# 779 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43689 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_TYPE : unit terminal
      | T_TRY_LWT : unit terminal
      | T_TRY : unit terminal
      | T_TRUE : unit terminal
      | T_TO : unit terminal
      | T_TILDE : unit terminal
      | T_THEN : unit terminal
      | T_STRUCT : unit terminal
      | T_STRING : (
# 765 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 43702 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_STAR : unit terminal
      | T_SNAPSHOT : unit terminal
      | T_SIG : unit terminal
      | T_SEMISEMI : unit terminal
      | T_SEMI : unit terminal
      | T_RPAREN : unit terminal
      | T_REC : unit terminal
      | T_RBRACKET : unit terminal
      | T_RBRACE : unit terminal
      | T_QUOTED_STRING_ITEM : (
# 770 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 43716 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_QUOTED_STRING_EXPR : (
# 767 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 43721 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_QUOTE : unit terminal
      | T_QUESTIONQUESTION : unit terminal
      | T_QUESTION : unit terminal
      | T_PRIVATE : unit terminal
      | T_PREFIXOP : (
# 751 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43730 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_PLUSEQ : unit terminal
      | T_PLUSDOT : unit terminal
      | T_PLUS : unit terminal
      | T_PERCENT : unit terminal
      | T_OR : unit terminal
      | T_OPTLABEL : (
# 744 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43740 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_OPEN : unit terminal
      | T_OF : unit terminal
      | T_OBJECT : unit terminal
      | T_NONREC : unit terminal
      | T_NEW : unit terminal
      | T_MUTABLE : unit terminal
      | T_MODULE : unit terminal
      | T_MINUSGREATER : unit terminal
      | T_MINUSDOT : unit terminal
      | T_MINUS : unit terminal
      | T_METHOD : unit terminal
      | T_MATCH_LWT : unit terminal
      | T_MATCH : unit terminal
      | T_LPAREN : unit terminal
      | T_LIDENT : (
# 727 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43759 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET_LWT : unit terminal
      | T_LETOP : (
# 709 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43765 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET : unit terminal
      | T_LESSMINUS : unit terminal
      | T_LESS : unit terminal
      | T_LBRACKETPERCENTPERCENT : unit terminal
      | T_LBRACKETPERCENT : unit terminal
      | T_LBRACKETLESS : unit terminal
      | T_LBRACKETGREATER : unit terminal
      | T_LBRACKETBAR : unit terminal
      | T_LBRACKETATATAT : unit terminal
      | T_LBRACKETATAT : unit terminal
      | T_LBRACKETAT : unit terminal
      | T_LBRACKET : unit terminal
      | T_LBRACELESS : unit terminal
      | T_LBRACE : unit terminal
      | T_LAZY : unit terminal
      | T_LABEL : (
# 714 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43785 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INT : (
# 713 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 43790 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INITIALIZER : unit terminal
      | T_INHERIT : unit terminal
      | T_INFIXOP4 : (
# 707 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43797 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP3 : (
# 706 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43802 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP2 : (
# 705 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43807 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP1 : (
# 704 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43812 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP0 : (
# 703 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43817 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INCLUDE : unit terminal
      | T_IN : unit terminal
      | T_IF : unit terminal
      | T_HASHOP : (
# 762 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43825 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_HASH : unit terminal
      | T_GREATERRBRACKET : unit terminal
      | T_GREATERRBRACE : unit terminal
      | T_GREATERDOT : unit terminal
      | T_GREATER : unit terminal
      | T_FUNCTOR : unit terminal
      | T_FUNCTION : unit terminal
      | T_FUN : unit terminal
      | T_FOR_LWT : unit terminal
      | T_FOR : unit terminal
      | T_FLOAT : (
# 692 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 43840 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_FINALLY_LWT : unit terminal
      | T_FALSE : unit terminal
      | T_EXTERNAL : unit terminal
      | T_EXCEPTION : unit terminal
      | T_EQUAL : unit terminal
      | T_EOL : unit terminal
      | T_EOF : unit terminal
      | T_END : unit terminal
      | T_ELSE : unit terminal
      | T_DOWNTO : unit terminal
      | T_DOTTILDE : unit terminal
      | T_DOTOP : (
# 708 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43856 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DOTLESS : unit terminal
      | T_DOTDOT : unit terminal
      | T_DOT : unit terminal
      | T_DONE : unit terminal
      | T_DOCSTRING : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 43865 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DO : unit terminal
      | T_CONSTRAINT : unit terminal
      | T_COMMENT : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 43872 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_COMMA : unit terminal
      | T_COLONGREATER : unit terminal
      | T_COLONEQUAL : unit terminal
      | T_COLONCOLON : unit terminal
      | T_COLON : unit terminal
      | T_CLASS : unit terminal
      | T_CHAR : (
# 672 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 43883 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_BEGIN : unit terminal
      | T_BARRBRACKET : unit terminal
      | T_BARBAR : unit terminal
      | T_BAR : unit terminal
      | T_BANG : unit terminal
      | T_BACKQUOTE : unit terminal
      | T_ASSERT : unit terminal
      | T_AS : unit terminal
      | T_ANDOP : (
# 710 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 43896 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_AND : unit terminal
      | T_AMPERSAND : unit terminal
      | T_AMPERAMPER : unit terminal
    
    type _ nonterminal = 
      | N_with_type_binder : (Asttypes.private_flag) nonterminal
      | N_with_constraint : (Parsetree.with_constraint) nonterminal
      | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
      | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
      | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_val_longident : (Longident.t) nonterminal
      | N_val_ident : (string) nonterminal
      | N_val_extra_ident : (string) nonterminal
      | N_use_file : (Parsetree.toplevel_phrase list) nonterminal
      | N_type_variance : (Asttypes.variance) nonterminal
      | N_type_variable : (Parsetree.core_type) nonterminal
      | N_type_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_type_parameter : (Parsetree.core_type * Asttypes.variance) nonterminal
      | N_type_longident : (Longident.t) nonterminal
      | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
      | N_tuple_type : (Parsetree.core_type) nonterminal
      | N_toplevel_phrase : (Parsetree.toplevel_phrase) nonterminal
      | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
      | N_tag_field : (Parsetree.row_field) nonterminal
      | N_subtractive : (string) nonterminal
      | N_structure_item : (Parsetree.structure_item) nonterminal
      | N_structure : (Parsetree.structure) nonterminal
      | N_strict_binding : (Parsetree.expression) nonterminal
      | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_single_attr_id : (string) nonterminal
      | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
      | N_simple_pattern : (Parsetree.pattern) nonterminal
      | N_simple_expr : (Parsetree.expression) nonterminal
      | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
      | N_signed_constant : (Parsetree.constant) nonterminal
      | N_signature_item : (Parsetree.signature_item) nonterminal
      | N_signature : (Parsetree.signature) nonterminal
      | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_seq_expr : (Parsetree.expression) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
      | N_row_field : (Parsetree.row_field) nonterminal
      | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
      | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
      | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
      | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
      | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
      | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
      | N_reversed_nonempty_llist_functor_arg_ : (Parsetree.functor_parameter list) nonterminal
      | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
      | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
      | N_record_expr_content : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_rec_flag : (Asttypes.rec_flag) nonterminal
      | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
      | N_private_flag : (Asttypes.private_flag) nonterminal
      | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_post_item_attribute : (Parsetree.attribute) nonterminal
      | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
      | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
      | N_payload : (Parsetree.payload) nonterminal
      | N_pattern_var : (Parsetree.pattern) nonterminal
      | N_pattern_no_exn : (Parsetree.pattern) nonterminal
      | N_pattern_gen : (Parsetree.pattern) nonterminal
      | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
      | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
      | N_pattern : (Parsetree.pattern) nonterminal
      | N_parse_val_longident : (Longident.t) nonterminal
      | N_parse_pattern : (Parsetree.pattern) nonterminal
      | N_parse_mty_longident : (Longident.t) nonterminal
      | N_parse_mod_longident : (Longident.t) nonterminal
      | N_parse_mod_ext_longident : (Longident.t) nonterminal
      | N_parse_expression : (Parsetree.expression) nonterminal
      | N_parse_core_type : (Parsetree.core_type) nonterminal
      | N_parse_constr_longident : (Longident.t) nonterminal
      | N_parse_any_longident : (Longident.t) nonterminal
      | N_paren_module_expr : (Parsetree.module_expr) nonterminal
      | N_optlabel : (string) nonterminal
      | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
      | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
      | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
      | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
      | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
      | N_option_SEMI_ : (unit option) nonterminal
      | N_option_BAR_ : (unit option) nonterminal
      | N_opt_ampersand : (bool) nonterminal
      | N_operator : (string) nonterminal
      | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
      | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
      | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_nonempty_list_raw_string_ : (string list) nonterminal
      | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
      | N_name_tag : (string) nonterminal
      | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
      | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_mty_longident : (Longident.t) nonterminal
      | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
      | N_module_type : (Parsetree.module_type) nonterminal
      | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
      | N_module_name : (string option) nonterminal
      | N_module_expr : (Parsetree.module_expr) nonterminal
      | N_module_declaration_body : (Parsetree.module_type) nonterminal
      | N_module_binding_body : (Parsetree.module_expr) nonterminal
      | N_mod_longident : (Longident.t) nonterminal
      | N_mod_ext_longident : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_val_ident_ : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_UIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_LIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_ident_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident___anonymous_37_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_UIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_LIDENT_ : (Longident.t) nonterminal
      | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
      | N_match_case : (Parsetree.case) nonterminal
      | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
      | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
      | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
      | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
      | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
      | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
      | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
      | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
      | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
      | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
      | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
      | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
      | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
      | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
      | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
      | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_let_pattern : (Parsetree.pattern) nonterminal
      | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
      | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
      | N_label_longident : (Longident.t) nonterminal
      | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
      | N_label_declarations : (Parsetree.label_declaration list) nonterminal
      | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
      | N_label_declaration : (Parsetree.label_declaration) nonterminal
      | N_item_extension : (Parsetree.extension) nonterminal
      | N_interface : (Parsetree.signature) nonterminal
      | N_index_mod : (string) nonterminal
      | N_implementation : (Parsetree.structure) nonterminal
      | N_ident : (string) nonterminal
      | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
      | N_functor_args : (Parsetree.functor_parameter list) nonterminal
      | N_functor_arg : (Parsetree.functor_parameter) nonterminal
      | N_function_type : (Parsetree.core_type) nonterminal
      | N_fun_def : (Parsetree.expression) nonterminal
      | N_fun_binding : (Parsetree.expression) nonterminal
      | N_formal_class_parameters : ((Parsetree.core_type * Asttypes.variance) list) nonterminal
      | N_floating_attribute : (Parsetree.attribute) nonterminal
      | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
      | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
      | N_extension : (Parsetree.extension) nonterminal
      | N_ext : (string Location.loc option) nonterminal
      | N_expr : (Parsetree.expression) nonterminal
      | N_direction_flag : (Asttypes.direction_flag) nonterminal
      | N_core_type : (Parsetree.core_type) nonterminal
      | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
      | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
      | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
      | N_constr_longident : (Longident.t) nonterminal
      | N_constr_ident : (string) nonterminal
      | N_constr_extra_nonprefix_ident : (string) nonterminal
      | N_constant : (Parsetree.constant) nonterminal
      | N_clty_longident : (Longident.t) nonterminal
      | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
      | N_class_type : (Parsetree.class_type) nonterminal
      | N_class_simple_expr : (Parsetree.class_expr) nonterminal
      | N_class_signature : (Parsetree.class_type) nonterminal
      | N_class_sig_field : (Parsetree.class_type_field) nonterminal
      | N_class_self_type : (Parsetree.core_type) nonterminal
      | N_class_self_pattern : (Parsetree.pattern) nonterminal
      | N_class_longident : (Longident.t) nonterminal
      | N_class_fun_def : (Parsetree.class_expr) nonterminal
      | N_class_fun_binding : (Parsetree.class_expr) nonterminal
      | N_class_field : (Parsetree.class_field) nonterminal
      | N_class_expr : (Parsetree.class_expr) nonterminal
      | N_attribute : (Parsetree.attribute) nonterminal
      | N_attr_id : (string Location.loc) nonterminal
      | N_atomic_type : (Parsetree.core_type) nonterminal
      | N_any_longident : (Longident.t) nonterminal
      | N_and_let_binding : (Ast_helper.let_binding) nonterminal
      | N_alias_type : (Parsetree.core_type) nonterminal
      | N_additive : (string) nonterminal
    
  end
  
  include Symbols
  
  include MenhirLib.InspectionTableInterpreter.Make (Tables) (struct
    
    include TI
    
    include Symbols
    
    include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)
    
    let terminal =
      fun t ->
        match t with
        | 0 ->
            X (T T_error)
        | 1 ->
            X (T T_WITH)
        | 2 ->
            X (T T_WHILE_LWT)
        | 3 ->
            X (T T_WHILE)
        | 4 ->
            X (T T_WHEN)
        | 5 ->
            X (T T_VIRTUAL)
        | 6 ->
            X (T T_VAL)
        | 7 ->
            X (T T_UNDERSCORE)
        | 8 ->
            X (T T_UIDENT)
        | 9 ->
            X (T T_TYPE)
        | 10 ->
            X (T T_TRY_LWT)
        | 11 ->
            X (T T_TRY)
        | 12 ->
            X (T T_TRUE)
        | 13 ->
            X (T T_TO)
        | 14 ->
            X (T T_TILDE)
        | 15 ->
            X (T T_THEN)
        | 16 ->
            X (T T_STRUCT)
        | 17 ->
            X (T T_STRING)
        | 18 ->
            X (T T_STAR)
        | 19 ->
            X (T T_SNAPSHOT)
        | 20 ->
            X (T T_SIG)
        | 21 ->
            X (T T_SEMISEMI)
        | 22 ->
            X (T T_SEMI)
        | 23 ->
            X (T T_RPAREN)
        | 24 ->
            X (T T_REC)
        | 25 ->
            X (T T_RBRACKET)
        | 26 ->
            X (T T_RBRACE)
        | 27 ->
            X (T T_QUOTED_STRING_ITEM)
        | 28 ->
            X (T T_QUOTED_STRING_EXPR)
        | 29 ->
            X (T T_QUOTE)
        | 30 ->
            X (T T_QUESTIONQUESTION)
        | 31 ->
            X (T T_QUESTION)
        | 32 ->
            X (T T_PRIVATE)
        | 33 ->
            X (T T_PREFIXOP)
        | 34 ->
            X (T T_PLUSEQ)
        | 35 ->
            X (T T_PLUSDOT)
        | 36 ->
            X (T T_PLUS)
        | 37 ->
            X (T T_PERCENT)
        | 38 ->
            X (T T_OR)
        | 39 ->
            X (T T_OPTLABEL)
        | 40 ->
            X (T T_OPEN)
        | 41 ->
            X (T T_OF)
        | 42 ->
            X (T T_OBJECT)
        | 43 ->
            X (T T_NONREC)
        | 44 ->
            X (T T_NEW)
        | 45 ->
            X (T T_MUTABLE)
        | 46 ->
            X (T T_MODULE)
        | 47 ->
            X (T T_MINUSGREATER)
        | 48 ->
            X (T T_MINUSDOT)
        | 49 ->
            X (T T_MINUS)
        | 50 ->
            X (T T_METHOD)
        | 51 ->
            X (T T_MATCH_LWT)
        | 52 ->
            X (T T_MATCH)
        | 53 ->
            X (T T_LPAREN)
        | 54 ->
            X (T T_LIDENT)
        | 55 ->
            X (T T_LET_LWT)
        | 56 ->
            X (T T_LETOP)
        | 57 ->
            X (T T_LET)
        | 58 ->
            X (T T_LESSMINUS)
        | 59 ->
            X (T T_LESS)
        | 60 ->
            X (T T_LBRACKETPERCENTPERCENT)
        | 61 ->
            X (T T_LBRACKETPERCENT)
        | 62 ->
            X (T T_LBRACKETLESS)
        | 63 ->
            X (T T_LBRACKETGREATER)
        | 64 ->
            X (T T_LBRACKETBAR)
        | 65 ->
            X (T T_LBRACKETATATAT)
        | 66 ->
            X (T T_LBRACKETATAT)
        | 67 ->
            X (T T_LBRACKETAT)
        | 68 ->
            X (T T_LBRACKET)
        | 69 ->
            X (T T_LBRACELESS)
        | 70 ->
            X (T T_LBRACE)
        | 71 ->
            X (T T_LAZY)
        | 72 ->
            X (T T_LABEL)
        | 73 ->
            X (T T_INT)
        | 74 ->
            X (T T_INITIALIZER)
        | 75 ->
            X (T T_INHERIT)
        | 76 ->
            X (T T_INFIXOP4)
        | 77 ->
            X (T T_INFIXOP3)
        | 78 ->
            X (T T_INFIXOP2)
        | 79 ->
            X (T T_INFIXOP1)
        | 80 ->
            X (T T_INFIXOP0)
        | 81 ->
            X (T T_INCLUDE)
        | 82 ->
            X (T T_IN)
        | 83 ->
            X (T T_IF)
        | 84 ->
            X (T T_HASHOP)
        | 85 ->
            X (T T_HASH)
        | 86 ->
            X (T T_GREATERRBRACKET)
        | 87 ->
            X (T T_GREATERRBRACE)
        | 88 ->
            X (T T_GREATERDOT)
        | 89 ->
            X (T T_GREATER)
        | 90 ->
            X (T T_FUNCTOR)
        | 91 ->
            X (T T_FUNCTION)
        | 92 ->
            X (T T_FUN)
        | 93 ->
            X (T T_FOR_LWT)
        | 94 ->
            X (T T_FOR)
        | 95 ->
            X (T T_FLOAT)
        | 96 ->
            X (T T_FINALLY_LWT)
        | 97 ->
            X (T T_FALSE)
        | 98 ->
            X (T T_EXTERNAL)
        | 99 ->
            X (T T_EXCEPTION)
        | 100 ->
            X (T T_EQUAL)
        | 101 ->
            X (T T_EOL)
        | 102 ->
            X (T T_EOF)
        | 103 ->
            X (T T_END)
        | 104 ->
            X (T T_ELSE)
        | 105 ->
            X (T T_DOWNTO)
        | 106 ->
            X (T T_DOTTILDE)
        | 107 ->
            X (T T_DOTOP)
        | 108 ->
            X (T T_DOTLESS)
        | 109 ->
            X (T T_DOTDOT)
        | 110 ->
            X (T T_DOT)
        | 111 ->
            X (T T_DONE)
        | 112 ->
            X (T T_DOCSTRING)
        | 113 ->
            X (T T_DO)
        | 114 ->
            X (T T_CONSTRAINT)
        | 115 ->
            X (T T_COMMENT)
        | 116 ->
            X (T T_COMMA)
        | 117 ->
            X (T T_COLONGREATER)
        | 118 ->
            X (T T_COLONEQUAL)
        | 119 ->
            X (T T_COLONCOLON)
        | 120 ->
            X (T T_COLON)
        | 121 ->
            X (T T_CLASS)
        | 122 ->
            X (T T_CHAR)
        | 123 ->
            X (T T_BEGIN)
        | 124 ->
            X (T T_BARRBRACKET)
        | 125 ->
            X (T T_BARBAR)
        | 126 ->
            X (T T_BAR)
        | 127 ->
            X (T T_BANG)
        | 128 ->
            X (T T_BACKQUOTE)
        | 129 ->
            X (T T_ASSERT)
        | 130 ->
            X (T T_AS)
        | 131 ->
            X (T T_ANDOP)
        | 132 ->
            X (T T_AND)
        | 133 ->
            X (T T_AMPERSAND)
        | 134 ->
            X (T T_AMPERAMPER)
        | _ ->
            assert false
    
    and nonterminal =
      fun nt ->
        match nt with
        | 219 ->
            X (N N_additive)
        | 218 ->
            X (N N_alias_type)
        | 217 ->
            X (N N_and_let_binding)
        | 216 ->
            X (N N_any_longident)
        | 215 ->
            X (N N_atomic_type)
        | 214 ->
            X (N N_attr_id)
        | 213 ->
            X (N N_attribute)
        | 212 ->
            X (N N_class_expr)
        | 211 ->
            X (N N_class_field)
        | 210 ->
            X (N N_class_fun_binding)
        | 209 ->
            X (N N_class_fun_def)
        | 208 ->
            X (N N_class_longident)
        | 207 ->
            X (N N_class_self_pattern)
        | 206 ->
            X (N N_class_self_type)
        | 205 ->
            X (N N_class_sig_field)
        | 204 ->
            X (N N_class_signature)
        | 203 ->
            X (N N_class_simple_expr)
        | 202 ->
            X (N N_class_type)
        | 201 ->
            X (N N_class_type_declarations)
        | 200 ->
            X (N N_clty_longident)
        | 199 ->
            X (N N_constant)
        | 198 ->
            X (N N_constr_extra_nonprefix_ident)
        | 197 ->
            X (N N_constr_ident)
        | 196 ->
            X (N N_constr_longident)
        | 195 ->
            X (N N_constrain_field)
        | 194 ->
            X (N N_constructor_arguments)
        | 193 ->
            X (N N_constructor_declarations)
        | 192 ->
            X (N N_core_type)
        | 191 ->
            X (N N_direction_flag)
        | 190 ->
            X (N N_expr)
        | 189 ->
            X (N N_ext)
        | 188 ->
            X (N N_extension)
        | 187 ->
            X (N N_extension_constructor_rebind_BAR_)
        | 186 ->
            X (N N_extension_constructor_rebind_epsilon_)
        | 185 ->
            X (N N_floating_attribute)
        | 184 ->
            X (N N_formal_class_parameters)
        | 183 ->
            X (N N_fun_binding)
        | 182 ->
            X (N N_fun_def)
        | 181 ->
            X (N N_function_type)
        | 180 ->
            X (N N_functor_arg)
        | 179 ->
            X (N N_functor_args)
        | 178 ->
            X (N N_generalized_constructor_arguments)
        | 177 ->
            X (N N_generic_constructor_declaration_BAR_)
        | 176 ->
            X (N N_generic_constructor_declaration_epsilon_)
        | 175 ->
            X (N N_generic_type_declaration_no_nonrec_flag_type_subst_kind_)
        | 174 ->
            X (N N_generic_type_declaration_nonrec_flag_type_kind_)
        | 173 ->
            X (N N_ident)
        | 172 ->
            X (N N_implementation)
        | 171 ->
            X (N N_index_mod)
        | 170 ->
            X (N N_interface)
        | 169 ->
            X (N N_item_extension)
        | 168 ->
            X (N N_label_declaration)
        | 167 ->
            X (N N_label_declaration_semi)
        | 166 ->
            X (N N_label_declarations)
        | 165 ->
            X (N N_label_let_pattern)
        | 164 ->
            X (N N_label_longident)
        | 163 ->
            X (N N_labeled_simple_expr)
        | 162 ->
            X (N N_labeled_simple_pattern)
        | 161 ->
            X (N N_let_binding_body)
        | 160 ->
            X (N N_let_bindings_ext_)
        | 159 ->
            X (N N_let_bindings_no_ext_)
        | 158 ->
            X (N N_let_pattern)
        | 157 ->
            X (N N_letop_binding_body)
        | 156 ->
            X (N N_letop_bindings)
        | 155 ->
            X (N N_list_and_class_declaration_)
        | 154 ->
            X (N N_list_and_class_description_)
        | 153 ->
            X (N N_list_and_class_type_declaration_)
        | 152 ->
            X (N N_list_and_module_binding_)
        | 151 ->
            X (N N_list_and_module_declaration_)
        | 150 ->
            X (N N_list_attribute_)
        | 149 ->
            X (N N_list_generic_and_type_declaration_type_kind__)
        | 148 ->
            X (N N_list_generic_and_type_declaration_type_subst_kind__)
        | 147 ->
            X (N N_list_post_item_attribute_)
        | 146 ->
            X (N N_list_signature_element_)
        | 145 ->
            X (N N_list_structure_element_)
        | 144 ->
            X (N N_list_text_csig_class_sig_field__)
        | 143 ->
            X (N N_list_text_cstr_class_field__)
        | 142 ->
            X (N N_list_text_str_structure_item__)
        | 141 ->
            X (N N_list_use_file_element_)
        | 140 ->
            X (N N_listx_SEMI_record_pat_field_UNDERSCORE_)
        | 139 ->
            X (N N_lwt_binding)
        | 138 ->
            X (N N_lwt_bindings)
        | 137 ->
            X (N N_match_case)
        | 136 ->
            X (N N_meth_list)
        | 135 ->
            X (N N_method_)
        | 134 ->
            X (N N_mk_longident_mod_ext_longident_LIDENT_)
        | 133 ->
            X (N N_mk_longident_mod_ext_longident_UIDENT_)
        | 132 ->
            X (N N_mk_longident_mod_ext_longident___anonymous_37_)
        | 131 ->
            X (N N_mk_longident_mod_ext_longident_ident_)
        | 130 ->
            X (N N_mk_longident_mod_longident_LIDENT_)
        | 129 ->
            X (N N_mk_longident_mod_longident_UIDENT_)
        | 128 ->
            X (N N_mk_longident_mod_longident_val_ident_)
        | 127 ->
            X (N N_mod_ext_longident)
        | 126 ->
            X (N N_mod_longident)
        | 125 ->
            X (N N_module_binding_body)
        | 124 ->
            X (N N_module_declaration_body)
        | 123 ->
            X (N N_module_expr)
        | 122 ->
            X (N N_module_name)
        | 121 ->
            X (N N_module_subst)
        | 120 ->
            X (N N_module_type)
        | 119 ->
            X (N N_module_type_declaration)
        | 118 ->
            X (N N_mty_longident)
        | 117 ->
            X (N N_mutable_flag)
        | 116 ->
            X (N N_mutable_virtual_flags)
        | 115 ->
            X (N N_name_tag)
        | 114 ->
            X (N N_nonempty_list_mkrhs_LIDENT__)
        | 113 ->
            X (N N_nonempty_list_raw_string_)
        | 112 ->
            X (N N_nonempty_type_kind)
        | 111 ->
            X (N N_open_declaration)
        | 110 ->
            X (N N_open_description)
        | 109 ->
            X (N N_operator)
        | 108 ->
            X (N N_opt_ampersand)
        | 107 ->
            X (N N_option_BAR_)
        | 106 ->
            X (N N_option_SEMI_)
        | 105 ->
            X (N N_option_preceded_AS_mkrhs_LIDENT___)
        | 104 ->
            X (N N_option_preceded_COLON_core_type__)
        | 103 ->
            X (N N_option_preceded_EQUAL_expr__)
        | 102 ->
            X (N N_option_preceded_EQUAL_module_type__)
        | 101 ->
            X (N N_option_preceded_EQUAL_pattern__)
        | 100 ->
            X (N N_option_preceded_EQUAL_seq_expr__)
        | 99 ->
            X (N N_option_type_constraint_)
        | 98 ->
            X (N N_optlabel)
        | 97 ->
            X (N N_paren_module_expr)
        | 96 ->
            X (N N_parse_any_longident)
        | 95 ->
            X (N N_parse_constr_longident)
        | 94 ->
            X (N N_parse_core_type)
        | 93 ->
            X (N N_parse_expression)
        | 92 ->
            X (N N_parse_mod_ext_longident)
        | 91 ->
            X (N N_parse_mod_longident)
        | 90 ->
            X (N N_parse_mty_longident)
        | 89 ->
            X (N N_parse_pattern)
        | 88 ->
            X (N N_parse_val_longident)
        | 87 ->
            X (N N_pattern)
        | 86 ->
            X (N N_pattern_comma_list_pattern_)
        | 85 ->
            X (N N_pattern_comma_list_pattern_no_exn_)
        | 84 ->
            X (N N_pattern_gen)
        | 83 ->
            X (N N_pattern_no_exn)
        | 82 ->
            X (N N_pattern_var)
        | 81 ->
            X (N N_payload)
        | 80 ->
            X (N N_possibly_poly_core_type_)
        | 79 ->
            X (N N_possibly_poly_core_type_no_attr_)
        | 78 ->
            X (N N_post_item_attribute)
        | 77 ->
            X (N N_primitive_declaration)
        | 76 ->
            X (N N_private_flag)
        | 75 ->
            X (N N_private_virtual_flags)
        | 74 ->
            X (N N_rec_flag)
        | 73 ->
            X (N N_record_expr_content)
        | 72 ->
            X (N N_reversed_bar_llist_constructor_declaration_)
        | 71 ->
            X (N N_reversed_bar_llist_extension_constructor_)
        | 70 ->
            X (N N_reversed_bar_llist_extension_constructor_declaration_)
        | 69 ->
            X (N N_reversed_llist_preceded_CONSTRAINT_constrain__)
        | 68 ->
            X (N N_reversed_nonempty_llist_functor_arg_)
        | 67 ->
            X (N N_reversed_nonempty_llist_labeled_simple_expr_)
        | 66 ->
            X (N N_reversed_nonempty_llist_name_tag_)
        | 65 ->
            X (N N_reversed_nonempty_llist_typevar_)
        | 64 ->
            X (N N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_)
        | 63 ->
            X (N N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_)
        | 62 ->
            X (N N_reversed_separated_nonempty_llist_AND_with_constraint_)
        | 61 ->
            X (N N_reversed_separated_nonempty_llist_BAR_row_field_)
        | 60 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_core_type_)
        | 59 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_type_parameter_)
        | 58 ->
            X (N N_reversed_separated_nonempty_llist_STAR_atomic_type_)
        | 57 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_core_type_)
        | 56 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_expr_)
        | 55 ->
            X (N N_reversed_separated_nontrivial_llist_STAR_atomic_type_)
        | 54 ->
            X (N N_row_field)
        | 53 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_expr_)
        | 52 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_)
        | 51 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_pattern_)
        | 50 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_)
        | 49 ->
            X (N N_seq_expr)
        | 48 ->
            X (N N_sig_exception_declaration)
        | 47 ->
            X (N N_signature)
        | 46 ->
            X (N N_signature_item)
        | 45 ->
            X (N N_signed_constant)
        | 44 ->
            X (N N_simple_delimited_pattern)
        | 43 ->
            X (N N_simple_expr)
        | 42 ->
            X (N N_simple_pattern)
        | 41 ->
            X (N N_simple_pattern_not_ident)
        | 40 ->
            X (N N_single_attr_id)
        | 39 ->
            X (N N_str_exception_declaration)
        | 38 ->
            X (N N_strict_binding)
        | 37 ->
            X (N N_structure)
        | 36 ->
            X (N N_structure_item)
        | 35 ->
            X (N N_subtractive)
        | 34 ->
            X (N N_tag_field)
        | 33 ->
            X (N N_toplevel_directive)
        | 32 ->
            X (N N_toplevel_phrase)
        | 31 ->
            X (N N_tuple_type)
        | 30 ->
            X (N N_type_constraint)
        | 29 ->
            X (N N_type_kind)
        | 28 ->
            X (N N_type_longident)
        | 27 ->
            X (N N_type_parameter)
        | 26 ->
            X (N N_type_parameters)
        | 25 ->
            X (N N_type_variable)
        | 24 ->
            X (N N_type_variance)
        | 23 ->
            X (N N_use_file)
        | 22 ->
            X (N N_val_extra_ident)
        | 21 ->
            X (N N_val_ident)
        | 20 ->
            X (N N_val_longident)
        | 19 ->
            X (N N_value)
        | 18 ->
            X (N N_value_description)
        | 17 ->
            X (N N_virtual_flag)
        | 16 ->
            X (N N_virtual_with_mutable_flag)
        | 15 ->
            X (N N_virtual_with_private_flag)
        | 14 ->
            X (N N_with_constraint)
        | 13 ->
            X (N N_with_type_binder)
        | _ ->
            assert false
    
    and lr0_incoming =
      (16, "\000\000\000\006\000L\000\004\000\b\000\n\000\012\000\014\000\018\000\020\000\024\000\026\000\028\000 \000\"\000*\0002\000B\000N\000R\000T\000V\000X\000Z\000\\\000^\000f\000j\000n\000t\000\144\000\150\000\152\000\164\000\166\000\168\000\182\000\184\000\186\000\190\000\196\000\198\000\200\000\208\000\210\000\212\000\224\000\228\000\230\000\244\000\248\001\004\001\006\001\n\000Q\000\222\001\173\001\173\001{\000\136\001\173\000\b\001{\001-\000\018\000\022\001{\001-\000\024\001{\001-\000\026\000$\000:\000>\000D\000Z\001{\001-\000n\000\253\000\222\000\018\000n\001\003\001\005\001\161\001\171\001-\000l\000&\0000\000D\000n\000|\001\173\000\014\001{\001-\000l\000D\000F\000H\000J\000L\000N\000b\000d\000r\000x\000\154\000\156\000\158\000\160\000\162\000\170\000\180\000\202\000\216\000l\000.\000\220\001W\0000\000v\000\138\001W\0004\000v\000\142\001W\0006\000v\000\238\000\252\001\000\001\b\001\012\001\014\000\219\0000\000+\000\242\000\016\000\018\000<\000\018\000n\001[\000@\000n\000\242\000P\000l\000^\001{\001-\000\018\000*\001-\000\020\001{\001-\000J\000X\000d\000l\0001\000\016\000<\001[\0003\0007\000w\0000\000\234\0007\0005\000n\000\202\000\018\000B\000l\000n\000\242\000n\000x\000n\000\242\000<\001[\000~\000\254\000\215\000\128\0004\000\215\000\138\000\172\000\255\000l\000\255\0000\000\222\000\018\001\011\000\222\000n\001\r\001\145\000\254\001\002\001[\0009\000?\000`\000o\000&\001\r\001y\001\175\000\172\001\145\0009\000\197\000?\000`\001k\001\175\000&\001\175\001k\000E\000m\000{\0004\000\254\000m\000\231\000T\001\012\000\217\000\127\001\012\001k\001\181\001\006\000<\001[\001-\001\181\001-\001\129\001\171\001\181\000E\0004\000m\000\254\000{\0004\000{\0004\000{\0004\000\180\000\133\0004\000\231\000\231\000\131\000<\001[\000\222\001\181\000\159\001-\000.\001-\000\220\001\017\001\175\000.\001\017\001\181\000\180\001\017\000\180\000?\000`\001k\000\240\0000\000s\0000\000\172\001\145\0009\000\234\001\129\001\129\0000\000\234\001\129\000\138\0004\000\142\000\\\000\235\000n\000\242\000\159\001-\000.\001-\001M\0006\001O\001M\001Q\000\196\000\220\000\254\000\018\000l\000\138\001\139\000T\000\142\001M\0006\000u\000&\001\175\001\133\001\175\000\242\001\133\000`\001\175\001\175\001e\001-\001\141\000\145\000\254\001c\001a\001c\001\129\001\131\001\139\001e\001-\000\142\001M\0006\000\220\000\225\001\129\000\202\000B\000\142\001M\0006\000\220\001\131\000\142\001M\0006\000\220\001\131\001\131\000\238\000\225\000\139\000\134\001\173\000\020\001{\001-\000X\0005\000n\000;\000\139\000\230\001\129\000\202\001\129\000\157\001'\001'\0009\000F\000B\000\153\000\254\001\139\000\202\000l\000\240\0000\000\253\000\222\000l\000\240\0000\001\137\001-\001\141\000\143\001'\001c\001w\001a\001c\001u\001w\001\139\000\202\001\137\001-\0007\0005\000n\000;\000\139\001'\0009\000F\000\153\000\143\001'\000,\0008\000H\000J\000R\001\000\001{\001-\000\"\001-\000V\001{\001-\000l\000\016\000J\000\148\000\192\000d\000\148\000\192\000l\000J\000^\001{\001-\000\016\000\018\000\245\0000\000\242\000^\000\020\000T\001-\000l\000\014\001-\000b\000d\000h\001{\001-\000j\001{\001-\000n\000v\000p\001{\001-\0002\000\149\000\130\000\138\000\142\001\005\001\025\0006\001I\000\242\001\129\000\209\000\202\000\144\001{\001-\000\148\000\172\0009\000\192\000\246\000+\000-\000S\000U\000Y\000[\000\220\000[\001\143\000\231\000\253\000\222\000l\0000\000\200\001{\001-\000U\000\169\000\173\000\234\000\175\000\234\000\175\000\240\000\175\000\254\000\175\001\006\000+\001\171\000\231\000\175\001y\001\137\000\175\000\175\000\175\0000\000\138\0004\000g\0004\000\175\000.\000g\000Y\001\137\000\175\000\203\000.\000\016\000.\000\213\001\025\000\250\000g\000\250\000+\000\030\000l\000n\000\242\001\129\001K\0000\000n\000@\000l\001K\000\202\000r\000+\000P\000\016\000l\000\175\000\242\001\129\001=\000\201\0000\000n\000\165\000l\000\020\000n\000\229\000\229\0000\000\146\000U\000\202\000t\000R\001\000\001{\001-\000\182\001-\000l\0000\000\245\000\242\000l\000\182\001-\000\137\001i\001g\000`\000\237\000\241\000\004\000\020\0005\001I\000\202\000B\000\238\001\181\000\027\001\181\000\139\000^\000\253\000\202\000\255\000\222\000\238\000\255\000\029\000}\001\n\000\029\000`\000\241\001\171\000\255\000\222\000\018\001[\001\007\001[\001y\001i\000\241\0000\000\241\0000\001g\000`\000\195\000\247\000l\0000\000\247\0000\000\242\000\241\0000\000\195\001\171\000\253\001y\000\247\000\166\000\130\000\138\000\140\000n\000\202\000\142\000n\000\214\000\218\000\144\001{\001-\000\248\001{\001-\000\168\001{\001-\000\184\001{\001-\000\254\000\175\000\n\000\186\001{\001-\000l\000\020\000\229\0000\000`\000\188\001{\001-\000\175\000\166\000\190\001{\001-\000\175\000\202\001\000\000)\000+\000W\000\170\000W\000\172\000n\000\216\000l\001\004\001{\001-\000W\000\222\000l\000G\000W\000\030\000n\000@\000n\000P\000W\000\231\000\253\000\222\000l\0000\000H\000J\000^\001{\001-\000\247\000\242\000\241\0000\000b\000d\000r\000U\000\242\001\129\000\202\000c\000q\000\234\000\231\000W\001\001\001y\001\137\001\143\001\021\000\166\000c\001\023\001A\000\166\000c\001}\000&\001}\000F\001}\000H\001}\000J\001}\000L\001}\000N\001}\000b\001}\000d\001}\000x\001}\000\154\001}\000\156\001}\000\158\001}\000\160\001}\000\162\001}\000\180\001}\000\202\001}\000\234\001}\000\238\001}\000\240\001}\000\252\001}\001\012\001}\001\014\001}\001\171\001\137\000W\001\183\001}\000.\000L\001\173\000c\000c\001\n\001-\000S\000\242\001\129\000\202\000c\000\167\000\202\000c\000\234\000\175\000\240\000\175\000\254\000\175\001\006\000+\001\171\000\169\000\171\000\234\000\175\001C\001'\001\179\001\179\001}\000\167\000\202\000c\0019\000\166\000c\001\b\001C\001;\001\000\000c\0000\000\130\000\250\000k\000\250\001}\000.\000k\000\138\0004\000k\0004\000\140\000i\000\176\000\142\000W\000\004\000e\001I\000\236\001\129\000\242\001\129\000\236\001\129\000=\000\199\000\207\000.\000e\000e\000\147\0006\000\253\000\222\000n\000+\000\146\000W\000\216\000l\000k\0000\000v\001}\000\138\000k\0004\000v\001}\000\142\000k\0006\000v\001}\000\222\000l\000c\0000\000v\001}\000\138\000c\0004\000v\001}\000\142\001}\0006\000v\001}\000\253\000\216\000l\000k\0000\000v\001}\000\138\000k\0004\000v\001}\000\142\000k\0006\000v\001}\001I\000v\001}\000W\000\135\001G\001G\001}\000c\0000\000\138\000c\0004\000\142\001}\0006\000\253\000\216\000l\000k\0000\000\138\000k\0004\000\142\000k\0006\001I\000k\0000\000\138\000k\0004\000\142\000k\0006\000c\000\028\000\212\001\127\000c\000\228\000c\000\224\000c\000\228\000c\000\224\000\202\000c\001\127\000c\000\228\000c\000\224\000c\000l\000\020\000\229\0000\000\242\001\175\000`\000c\000U\001E\001m\001m\000d\000\175\0000\000\242\001\129\0000\001m\001E\001m\000c\000`\000c\000`\000\222\000c\001\019\000\129\000\254\001\019\001\019\000c\000 \001}\000\210\001}\000\208\000c\000\208\000W\001}\000\178\000W\000\147\0006\001}\000\207\000.\000i\000\176\000i\000\176\000k\0004\000\250\000k\000\250\000c\001{\001-\000\247\000\166\000c\000^\001{\001-\000\245\000\202\000\247\000\242\000\241\000\202\000\247\000\251\000\166\000c\001i\000\251\000\200\001{\001-\001\139\001e\001-\000\166\000c\001{\001-\000\149\001C\001'\000c\000=\000\202\000c\000M\001E\001o\001o\000M\000c\000\201\0000\000n\000\242\000\020\000\229\000\222\001\129\000\202\000c\000\131\000\222\001\129\000\202\000c\000=\000\202\000c\000M\001C\001'\001}\000c\000\004\000\129\000c\000\004\000\129\001}\0000\000\236\000\241\0000\000\242\000\241\0000\000\236\000\241\0000\000\247\000\241\0000\000\175\0000\000\242\001\129\0000\001\159\000\014\001\000\001-\000\235\000n\000\202\000c\000=\000\202\000c\000'\001'\001-\000\012\000\\\000\\\000\012\000!\000n\000\242\001\129\000\235\000n\000\202\000c\000=\000\202\000c\000f\001\000\001-\000\153\000n\000\242\000\020\000\229\000\222\001\129\000\202\000c\000\131\000\222\001\129\000\161\000\202\000c\001\129\000M\001\015\001'\001-\000\012\000B\000B\000\012\000\031\000n\000\242\000\161\000\153\000n\000\242\000\020\000\229\000\222\001\129\000\202\000c\000\161\000\202\000c\000M\000z\001\173\000@\000\175\000\n\000c\000^\000\020\001{\001-\001[\000\202\000\241\000\205\001'\001{\001-\0002\000\245\000\251\001'\001\n\001-\000\245\000\251\001'\0011\0011\000\245\000\251\001'\000\132\001\173\000\164\001{\001-\000\247\001'\000\198\001{\001-\000+\000\242\001\129\000\202\000$\000\227\000\227\001'\000\200\001{\001-\001\139\000\202\001\137\001-\001'\001e\001-\001'\000\242\000,\000R\001\000\001{\001-\000\255\001'\001{\001-\000\255\001'\000^\001{\001-\000\018\000\238\000\255\001'\0002\000\245\000\242\000\241\001'\001\n\001-\000\245\000\242\000\241\001'\001/\001/\000\245\000\202\000\253\001'\000\242\000\241\000\249\001'\001i\000\249\000\164\001{\001-\000\241\001'\000\200\001{\001-\001\139\000\244\000\020\001{\001-\000\012\000#\000\138\000w\0004\001q\000n\000\202\000V\001-\000l\001\129\0000\001\157\000\014\001-\000\012\000\\\000\\\000\012\000\233\000n\000\242\001\129\001'\000f\001-\000\012\000B\000B\000\012\000\151\000n\000\242\000\161\001'\000\152\001-\000t\000R\001\000\001-\000\253\000\166\000\138\000y\0004\001\145\000\234\001\129\001\129\001y\001\145\001\153\001\171\001-\000\253\000\166\001\153\001\153\001'\000\230\001-\001\129\000\202\001\129\001\135\001'\001!\000\208\001S\001'\001s\001\155\001!\001\153\001'\001\n\001-\000#\001q\000n\000\202\001\153\001'\0013\0013\001{\001-\000#\001q\000n\000\242\000n\000\242\000?\000`\000\138\001\129\000?\000`\000\197\000?\000`\001\r\001y\001\149\001\153\001\149\001\149\001\149\001'\001\n\001-\000#\001q\000n\000\242\001\149\001'\0015\0015\000%\000]\000a\000\155\000\221\000\239\000\243\001%\001S\001'\001]\001\n\001-\0005\000n\000;\000\139\001'\001+\001+\001_\001\n\001-\0005\000n\000\238\000\225\000\139\001'\001)\001)\001s\001\147\001%\000_\001%\001\129\000\244\001{\001-\000#\001q\000n\000\202\000V\001-\001\159\000\150\001-\000c\001'\000\152\001\000\001-\000l\000t\000L\001\173\001-\000\149\001C\001'\000R\001\000\001-\000\253\000\166\000\138\000y\0004\001\161\000\186\001-\001E\000`\001?\000\166\001y\001\151\000\135\001\161\001\169\001\171\001\179\001\169\001\163\001\163\001\169\001-\000\253\000\166\001\169\001-\000\149\001C\001'\001\169\0000\000\242\001\149\0000\001\169\001\006\000n\000\211\001'\001-\001\169\000\211\001'\000\230\001-\001\135\001'\001\031\000\208\001S\001'\001s\001\167\001\031\001\169\000\242\001\149\000\202\001\169\001E\001\165\001\165\001'\001\n\001-\000#\001q\000n\001\165\001'\0017\0017\000%\000I\000t\000O\000a\000\155\000\223\000\239\001\021\001#\001A\001S\001'\001]\001+\001s\001\147\000K\000c\001'\001#\000\163\0004\001\021\001#\001A\000\163\0004\001\031\000\208\000K\000\208\000\247\001'\001{\001-\000\247\001'\000c\001'\001#\001#\000\163\0004\001'\0009\000F\000\153\000\141\001'\001c\001a\001c\0005\000n\000\238\000\225\000\139\001'\0009\000F\000\153\000\141\001'\000_\000\208\000\241\0000\001\129\001'\000\163\0004\000W\000^\001{\001-\000\247\0000\000\242\000\241\0000\000c\0000\000=\0000\000c\000\004\000\129\000c\000\004\000\129\000\194\000c\000\194\000c\000c\000\228\000c\000\224\000\163\0004\001-\000c\000\228\000c\000\224\000K\000\206\001Y\000\000\000_\000\206\001U\000\000\000l\000\240\0000\000-\000\193\000\255\000\222\000l\000\240\0000\000-\001[\001\t\001[\001\141\001\177\000\206\000\000\000\191\001\137\000\206\000\000\000\189\001\129\000\206\000\000\000c\000\206\000\187\000\000\000\185\000\255\000\206\000\000\000\183\000\253\000\206\000\000\000\181\000\237\000\206\000\000\000\175\000\206\000\179\000\000\000)\000\206\000\177\000\253\000\222\000\000\000\172\001[\000\026\000$\000\148\000\196\000)\000\253\000\206\000A\000C\000,\000I\001\029\000c\001'\000,\001\029\000,\000\000\000,\000C\000I\001\027\001\027\000c\001'\001\027\001\027\000/\000c\001'\001\027\000\206\001\027\000\206")
    
    and rhs =
      ((16, "\001Y\001U\000\193\000\191\000\189\000\187\000\185\000\183\000\181\000\179\000\177\000A\000/\000J\000H\001k\001\181\001\006\000<\001[\001\n\001-\001C\001'\001\t\001\141\000l\001\129\0000\000l\000^\001{\001-\000\241\0000\000<\001[\000\016\0009\001\175\0009\000l\000s\0000\0009\000x\001\017\000\180\000x\000\180\000\172\001\145\001\175\000\172\001\145\000l\000s\0000\000\172\001\145\000\138\000E\0004\000\138\000\254\000{\0004\000\138\000m\000\254\000{\0004\000\128\000\215\000{\0004\000\128\0004\000~\000\215\000{\0004\000~\000\215\000{\000\180\000\133\0004\001y\000Q\000Q\000\222\001\173\000\136\001\173\000\163\0004\001\151\000\186\001-\001\163\001?\000\166\001\169\000t\000R\001-\000\253\000\166\001\169\000t\000R\001\000\001-\000\253\000\166\001\169\001\169\001\171\001\151\000\135\001y\000\152\001-\001\169\000\211\001'\000\152\001\000\001-\001\169\000\211\001'\000\014\000'\001'\000f\001\015\001'\000\230\001-\001\135\001'\000\150\001-\000c\001'\001S\001'\001s\000\202\001\169\000\242\001\149\000\202\001\169\001E\001\165\001E\000`\001\169\001E\001\163\001\005\000l\000\175\0000\000l\000\175\000\242\001\129\0000\000l\001\129\0000\000\152\001-\001\153\001'\000\014\001-\000\233\000n\000\242\001\129\001'\000f\001-\000\151\000n\000\242\000\161\001'\000\230\001-\001\135\001'\001S\001'\001s\001\145\000\138\000y\0004\001\145\001y\000V\001-\001\157\001!\000\208\001\153\001\171\000t\000R\001-\000\253\000\166\001\153\000t\000R\001\000\001-\000\253\000\166\001\153\000l\001\169\0000\001\161\000\138\000y\0004\001\161\000l\001\169\000\242\001\149\0000\000V\001-\001\159\001\031\000\208\001\153\000\197\000?\000`\001\149\000n\000\242\000?\000`\001\149\000?\000`\001\149\000\244\000\020\001{\001-\000#\001q\000n\000\202\001\153\001'\0013\001\r\000\148\000\246\000$\000\192\000\138\0004\000l\0000\000\196\000\026\000\018\000l\000\240\0000\001\141\000\253\000\253\000\222\000l\000\240\0000\000l\000\240\0000\001\141\001\129\000\202\001\129\001\175\000u\000&\001\175\000\142\001M\0006\000\254\000\145\001\181\001\129\001\171\000\028\000\212\001\021\000\166\000c\000h\001{\001-\000c\000\004\000\129\000\022\001{\001-\000c\000\022\001{\001-\000c\000\004\000\129\000\022\001{\001-\000c\000\194\000c\000\022\001{\001-\000c\000\004\000\129\000\194\000c\000\006\001{\001-\000c\000\228\000c\000\224\000\188\001{\001-\000\175\000\202\000c\001\127\000c\000\228\000c\000\224\000\188\001{\001-\000\175\000\166\000c\000\228\000c\000\224\000W\000t\000^\001{\001-\000\245\000\251\000\166\000c\000t\000\200\001{\001-\001\139\001e\001-\000\166\000c\000t\000R\001{\001-\000\247\000\166\000c\000t\000R\001\000\001{\001-\000\247\000\166\000c\000\184\001{\001-\000\129\000\186\001{\001-\001E\001m\000\186\001{\001-\000l\000\020\000\229\0000\001m\000j\001{\001-\000c\000\004\000\129\000\024\001{\001-\000c\000\004\000\129\000\168\001{\001-\000c\000 \001}\000\210\001}\000\168\001{\001-\000c\000 \001}\000\b\001{\001-\000c\000\228\000c\000\224\000\190\001{\001-\000\175\000\202\000c\001\127\000c\000\228\000c\000\224\001\004\001{\001-\000W\000\144\001{\001-\000W\000V\001{\001-\001\159\001\031\000\208\000W\000\135\000q\001\137\000W\000\231\000W\001}\000\162\001}\001}\000\160\001}\001}\000\158\001}\001}\000\156\001}\001}\000\154\001}\001}\000J\001}\001}\000H\001}\001}\000F\001}\001}\000d\001}\001}\000b\001}\001}\000&\001}\001}\000L\001}\001}\000\202\001}\001}\000x\001}\001}\000\180\001}\001}\000N\001}\001}\000\252\001}\001}\001\012\001}\001}\001\014\001}\001}\000\238\001}\000G\001}\001\183\001}\001A\000\166\000c\000r\0019\000\166\000c\001}\000\240\001}\000n\000v\001}\000W\000\222\001I\000v\001}\000W\000\222\000l\000c\0000\000v\001}\000W\000\222\000\138\000c\0004\000v\001}\000W\000\222\000\142\001}\0006\000v\001}\000W\000\216\000\138\000k\0004\000v\001}\000W\000\216\000l\000k\0000\000v\001}\000W\000\216\000\142\000k\0006\000v\001}\000W\000\222\000\253\000\216\000\138\000k\0004\000v\001}\000W\000\222\000\253\000\216\000l\000k\0000\000v\001}\000W\000\222\000\253\000\216\000\142\000k\0006\000v\001}\001}\001\171\000L\001\173\000|\001\173\000\163\0004\000:\000\254\001\139\000\202\001\137\001-\001\139\000\202\001\137\001-\000\132\001\173\000\163\0004\000\138\000w\0004\000M\000=\000\202\000c\000`\000c\000\242\001\175\000`\000c\001E\001m\000l\000\020\000\229\0000\001m\000?\000\197\000?\000`\001k\000n\000\242\000?\000`\001k\000?\000`\001k\000l\0000\000l\000\245\000\242\000\241\0000\000\137\000T\001\133\000\242\001\133\000`\001\175\000\242\001\175\000\254\001\139\001e\001-\001\139\001e\001-\000\020\001{\001-\0005\000n\000\238\000\225\000\139\001'\000\020\001{\001-\000X\0005\000n\000\238\000\225\000\139\001'\000\020\001{\001-\0005\000n\000;\000\139\001'\000\020\001{\001-\000X\0005\000n\000;\000\139\001'\000\018\000n\000K\000\206\000.\000\220\000_\000\206\000z\001\173\000\163\0004\0008\000\235\000n\000\242\000\159\001-\000\235\000n\000\242\000\159\001-\000.\001-\001Q\001O\001O\001M\000n\000n\000\242\001\129\001\005\000W\000\146\000W\000\030\000n\000@\000n\000P\000W\000@\000l\001K\000\201\0000\000@\000n\000P\000l\001=\000\201\0000\000P\000\165\000\030\000l\001K\0000\000\030\000n\000\146\000U\000U\000+\000M\000+\000=\000\202\000c\000+\000\242\000\131\000\222\001\129\000\202\000c\000+\000\242\000\020\000\229\000\222\001\129\000\202\000c\000\167\000\202\000c\000S\000\242\001\129\000\202\000c\000t\001{\001-\000\149\001C\001'\001A\001\179\000t\001-\000\149\001C\001'\000t\000L\001\173\001-\000\149\001C\001'\001?\001\179\000\175\000\175\000\242\001\129\000+\000M\000U\000\242\001\129\000\202\000c\000\167\000\202\000c\001;\0019\001\b\001C\001\n\001-\000#\001q\000n\001\165\001'\0017\001\n\001-\000#\001q\000n\000\242\001\149\001'\0015\001\n\001-\000#\001q\000n\000\202\001\153\001'\0013\001\n\001-\000\245\000\251\001'\0011\001\n\001-\000\245\000\242\000\241\001'\001/\001\171\001-\001\n\001-\0005\000n\000;\000\139\001'\001+\001\n\001-\0005\000n\000\238\000\225\000\139\001'\001)\000\157\001'\000,\001%\000]\001%\000,\001#\000,\000c\001'\001#\000I\001#\001\155\001!\001\167\001\031\000I\001\029\000,\001\027\000,\000c\001'\001\027\000I\001\027\000C\001\027\001I\000\209\000\203\001I\000\209\000\203\000.\001I\000\209\000\203\000.\000\016\000\213\001I\000\209\000\203\000.\001\025\000p\001{\001-\000\149\001C\001'\001\023\001\021\001\179\000\175\000`\000c\000\175\000\n\000c\000`\000c\000\175\000`\000\222\000n\000\242\000\159\001-\000.\001-\001\017\001\175\000.\001\017\000n\000\242\000\159\001-\000.\001-\001\175\000.\000n\000\242\000\159\001-\001\175\000\220\001-\000\031\000n\000\242\000\161\001-\000\153\000n\000M\001\000\001-\000\153\000n\000M\001-\000\153\000n\000\242\000\161\000\202\000c\001\000\001-\000\153\000n\000\242\000\161\000\202\000c\001-\000\153\000n\000\242\000\020\000\229\000\222\001\129\000\202\000c\001\000\001-\000\153\000n\000\242\000\020\000\229\000\222\001\129\000\202\000c\000n\000\255\000\222\000n\000\018\000\255\000\222\000\018\001[\000l\000\240\0000\000-\000\255\000\222\001[\000\255\000\222\000l\000\240\0000\000\255\000\222\000-\001[\000\255\000\222\001[\000n\000\253\000\222\000n\000\018\000\253\000\222\000\018\000+\000\253\000\222\000+\001\011\000\255\000l\000\255\0000\001\003\000\202\000\247\000\242\000\241\000\202\000\247\001i\000\251\000\242\000\241\001i\000\249\000\"\001-\000K\000\208\000\182\001-\001g\000`\000\247\000\195\000\247\001\171\000\253\000\247\000\195\000\247\000l\0000\001y\000\018\000\016\000^\001{\001-\000\018\000\238\000\255\001'\000*\001-\000_\000\208\000\182\001-\001g\000`\000\241\000^\000\020\000T\001-\000\247\000l\000\241\0000\000\241\001\171\000\237\000\241\000`\000\241\000\241\000\004\000}\001y\000^\000\020\001{\001-\001[\000\205\001'\001\007\000\\\000\\\000\012\000\\\000\012\000\012\000\\\001\002\001[\000n\000n\000\229\000$\000$\000\227\001\129\000B\001\129\001\131\000B\001\131\001\129\000\202\001\131\001\129\000\202\000B\001\131\000\220\000B\000\220\001\129\000\202\000\220\001\129\000\202\000B\000\220\000\142\001M\0006\000B\000\142\001M\0006\001\129\000\202\000\142\001M\0006\001\129\000\202\000B\000\142\001M\0006\000R\001{\001-\000\247\001'\000R\001\000\001{\001-\000\247\001'\000R\001{\001-\000\255\001'\000R\001\000\001{\001-\000\255\001'\000D\000r\001\b\000\216\000l\001W\0000\000\216\000l\001W\0000\000v\000\216\000\138\001W\0004\000\216\000\138\001W\0004\000v\000\216\000\142\001W\0006\000\216\000\142\001W\0006\000v\000\170\001\000\000\162\000\160\000\158\000\156\000\154\000J\000H\000F\000d\000b\000&\000L\000\202\000x\000\180\000N\000\252\001\012\001\014\000\238\001\012\000\254\000.\001\006\000n\000\242\001\129\000\202\001}\000\202\000\241\000\202\000\175\000\202\000c\000=\000P\000@\000n\000\242\000l\000\247\000\242\000\241\0000\000l\000\247\0000\000l\000\014\001-\001}\0000\000l\000\014\001-\001}\000\242\000\241\0000\000l\000\014\001-\001}\000\242\000\241\000\236\000\241\0000\000l\000\014\001-\001}\000\236\000\241\0000\001\177\000\206\001\137\000\206\001\129\000\206\000c\000\206\000\255\000\206\000\253\000\206\000\237\000\206\000\175\000\206\000)\000\206\000\175\000\240\000\175\000\175\001\171\000\169\000\175\001\006\000+\000\173\000\175\000\254\000\175\000\200\001{\001-\000\175\000\173\000\234\000\175\000\175\000\234\000\175\000\171\000\234\000\175\000\167\000\234\000\175\000U\001\137\000\175\000\231\000\175\000\144\001{\001-\000U\000\167\000\240\000\175\000\167\001\171\000\169\000\167\001\006\000+\000\171\000\167\000\254\000\175\000n\000\016\000K\000\242\000_\000\242\001\129\000@\000\175\000@\000\175\000\n\000c\001\129\000\131\000\222\001\129\001\181\000\131\000\222\001\181\000\134\001\173\000\163\0004\000\198\001{\001-\000+\000\242\001\129\000\202\000\227\001'\000B\000B\000\012\000B\000\012\000\012\000B\0002\000e\000W\000\004\000e\001a\001c\000\145\001c\001a\001u\001c\001w\000\143\001c\000\143\001w\001a\001c\000\141\001c\000\139\000\230\001\129\000\202\001\129\001i\000\137\001i\001G\000\135\001G\000\231\000\133\000\231\000<\001[\000\131\000<\001[\001\019\000\254\001\019\000\129\000\254\001\019\001\181\000\127\001\012\001\181\000\029\000}\001\n\000\029\000m\000{\000\254\000m\001\129\000y\000\234\001\129\0007\000w\000\234\0007\001\175\000u\000&\001\175\000s\000\234\001\129\001\129\000\234\001\129\000q\000\234\001}\001}\000\234\001}\000o\000&\001\175\001\175\000&\001\175\000E\001\129\001}\001}\000.\001}\000.\000k\000n\000\207\000n\000\207\000.\000n\000\207\000.\000i\000\175\000\175\000.\000\175\000.\000g\001I\000\199\000\207\001I\000\199\000\207\000.\001I\000\199\000\207\000.\000e\001}\001}\000.\001}\000.\000c\001}\000.\000L\001\173\000c\000\200\001{\001-\001\139\001e\001-\001'\001%\001S\001'\001s\000%\000\155\001]\001+\001_\001)\000\020\001{\001-\0005\0009\000F\000\153\000\141\001'\000\020\001{\001-\000X\0005\0009\000F\000\153\000\141\001'\000a\000^\001{\001-\000\245\000\249\001'\000^\001{\001-\000\245\000\202\000\253\001'\000\243\000^\001{\001-\0002\000\245\000\242\000\241\001'\001/\000\239\000\221\000\164\001{\001-\000\241\001'\000\244\001{\001-\000#\001q\000n\000\242\001\149\001'\0015\001\147\001\143\000d\000\148\000d\000\192\000J\000\148\000J\000\192\000\142\001\025\0006\000\138\000g\0004\000\130\000g\000\250\000\130\000\250\000\218\001}\000\178\000\214\000W\000l\000c\0000\000l\000c\000=\0000\000W\000\222\000l\000c\0000\000W\000\222\000\138\000c\0004\000W\000\216\000\138\000k\0004\000W\000\216\000l\000k\0000\000W\000\216\000\142\000k\0006\000W\000\222\000\253\000\216\000\138\000k\0004\000W\000\222\000\253\000\216\000l\000k\0000\000W\000\222\000\253\000\216\000\142\000k\0006\000W\000\222\000\142\001}\0006\000\248\001{\001-\000c\000\208\000\248\001{\001-\000\208\000Z\001{\001-\001\161\000l\000^\001{\001-\000\247\0000\000l\000^\001{\001-\000\247\000\242\000\241\0000\000)\001\143\001\137\000\231\000D\000W\001\000\000W\000\140\000i\000\176\000\140\000\176\000W\000\222\001I\000\253\000\222\000l\000c\0000\000\253\000\222\000\140\000i\000\176\000W\000\172\000n\000W\000\170\000W\001y\000>\000\253\000\222\000l\0000\000\142\000\147\0006\000\253\000\222\000\142\000\147\0006\000\130\000k\000\250\000\130\000\250\000\253\000\222\000\130\000k\000\250\000\253\000\222\000\130\000\250\000\138\000k\0004\000\253\000\222\000\138\000k\0004\000\253\000\222\000\138\0004\000\253\000\222\000l\000^\001{\001-\000\247\000\242\000\241\0000\000+\000S\000l\000\175\0000\000Y\000l\000^\001{\001-\000\245\0000\000l\000^\001{\001-\000\245\000\242\000\241\0000\000\016\000[\000[\000\220\000[\001\137\000\231\000\172\0009\000\253\000\222\000Y\000\253\000\222\000\138\0004\000\253\000\222\000l\0000\000\253\000\222\000l\000\175\0000\000l\000\175\000\242\001\129\0000\001y\000n\000\018\001\n\001\006\001\004\000\248\000\244\000\230\000\228\000\224\000\212\000\210\000\208\000\200\000\198\000\196\000\190\000\186\000\184\000\182\000\168\000\166\000\164\000\152\000\150\000\144\000t\000j\000f\000^\000\\\000Z\000X\000V\000T\000R\000N\000B\0002\000*\000\"\000 \000\028\000\026\000\024\000\020\000\014\000\012\000\n\000\b\000\004\000a\000\200\001{\001-\001\139\000\202\001\137\001-\001'\000\202\000c\001E\001o\000l\000\020\000\229\0000\001o\001#\000c\001'\001#\001\021\001A\001S\001'\001s\000\155\000%\001]\001+\000\020\001{\001-\0005\0009\000F\000\153\000\143\001'\000\020\001{\001-\000X\0005\0009\000F\000\153\000\143\001'\000O\000^\001{\001-\000\245\000\251\001'\000^\001{\001-\0002\000\245\000\251\001'\0011\000\239\000\223\000\244\001{\001-\000#\001q\000n\001\165\001'\0017\001\147\000\164\001{\001-\000\247\001'\000d\000b\000\231\000T\000\217\000\127\001-\000\231\001-\000\172\001[\000\172\001[\000$\000\172\001[\000\148\000\172\001[\000)\000\172\001[\000\253\000\172\001[\000\196\000\172\001[\000\026\000c\001'\000,\001\029\000,\000C\000,\000\206\001\175\000o\000\242\001\129\000\242\001\129\000\236\001\129\000\236\001\129\000\202\000\225\001\r\0001\0003\0007\000l\000w\0000\000<\001[\000\016\000J\000d\001\027\000\206\000c\001'\001\027\000\206\000l\000\219\0000\000n\000-\001\001\001-\000!\000n\000\242\001\129\001-\000\235\000n\000\202\000c\001\000\001-\000\235\000n\000\202\000c\001-\000\235\000n\000=\000\202\000c\001\000\001-\000\235\000n\000=\000\202\000c\000\014\001{\001-\000+\000\242\001\129\001'\000\012\000\012\000\\\000\012\000\012\000\\\000\012\000B\000\012\000\012\000B\000\020\0005\001I\000\027\001\181\000\139\000\020\0005\001I\000\238\001\181\000^\000\253\000\202\000\255\000^\000\253\000\238\000\255\000\202\000\202\000B"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\020\000\024\000\025\000\026\000\029\000#\000%\000&\000'\000)\000-\0000\0002\0004\0007\000<\000?\000C\000H\000L\000N\000R\000X\000Y\000Z\000]\000a\000b\000e\000h\000n\000u\000w\000y\000z\000\127\000\133\000\136\000\139\000\143\000\147\000\149\000\150\000\152\000\156\000\158\000\161\000\163\000\164\000\167\000\172\000\172\000\175\000\175\000\179\000\186\000\193\000\197\000\199\000\200\000\201\000\205\000\206\000\211\000\213\000\219\000\226\000\229\000\230\000\234\000\239\000\244\000\245\000\249\000\254\001\001\001\012\001\r\001\014\001\015\001\016\001\017\001\019\001\021\001\022\001\023\001\024\001\027\001\028\001\029\001\"\001%\001&\001)\001*\001-\0010\0011\0012\0013\0015\0016\0017\001:\001@\001D\001J\001P\001X\001_\001j\001s\001t\001|\001\133\001\140\001\148\001\152\001\157\001\165\001\171\001\177\001\185\001\191\001\198\001\209\001\213\001\217\001\223\001\225\001\226\001\228\001\230\001\233\001\236\001\239\001\242\001\245\001\248\001\251\001\254\002\001\002\004\002\007\002\n\002\r\002\016\002\019\002\022\002\025\002\028\002\031\002\"\002$\002&\002)\002-\0020\0023\0028\002?\002F\002M\002T\002[\002b\002k\002t\002}\002\127\002\127\002\129\002\133\002\134\002\139\002\143\002\147\002\147\002\150\002\151\002\154\002\156\002\160\002\162\002\167\002\168\002\172\002\177\002\180\002\182\002\187\002\188\002\188\002\190\002\194\002\196\002\200\002\203\002\212\002\222\002\230\002\239\002\240\002\241\002\243\002\243\002\245\002\247\002\251\002\252\003\001\003\b\003\t\003\n\003\012\003\r\003\016\003\017\003\018\003\020\003\022\003\024\003\026\003\031\003!\003&\003(\003,\003.\0030\0031\0033\0037\003>\003F\003I\003N\003T\003V\003[\003b\003d\003e\003h\003j\003o\003r\003s\003v\003v\003~\003~\003\135\003\135\003\144\003\144\003\150\003\150\003\157\003\157\003\159\003\159\003\167\003\167\003\176\003\176\003\178\003\178\003\180\003\182\003\182\003\184\003\188\003\190\003\190\003\192\003\192\003\194\003\194\003\196\003\196\003\198\003\202\003\204\003\206\003\209\003\213\003\219\003\224\003\230\003\231\003\233\003\236\003\241\003\244\003\251\003\254\004\004\004\006\004\n\004\011\004\012\004\017\004\021\004\026\004!\004)\0043\004>\004?\004B\004C\004F\004G\004J\004K\004N\004S\004V\004W\004Z\004[\004^\004_\004b\004c\004f\004g\004k\004l\004n\004r\004t\004v\004x\004|\004\129\004\130\004\132\004\133\004\135\004\138\004\139\004\140\004\141\004\148\004\152\004\157\004\162\004\165\004\167\004\168\004\171\004\174\004\175\004\182\004\183\004\183\004\184\004\184\004\185\004\186\004\188\004\190\004\192\004\193\004\195\004\196\004\198\004\199\004\201\004\202\004\204\004\207\004\211\004\212\004\214\004\217\004\221\004\224\004\228\004\233\004\239\004\244\004\250\004\255\005\005\005\006\005\007\005\b\005\012\005\017\005\021\005\026\005\030\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\005:\005:\005;\005;\005<\005<\005>\005>\005@\005@\005B\005B\005D\005D\005F\005F\005H\005H\005I\005J\005M\005R\005U\005Z\005a\005j\005q\005s\005u\005w\005y\005{\005}b\006\n\006\r\006\014\006\017\006\018\006\021\006\022\006\025\006\026\006\029\006\030\006!\006\"\006%\006(\006+\006.\0061\0064\0067\0068\0069\006:\006<\006?\006A\006D\006H\006I\006K\006N\006Q\006U\006Z\006[\006]\006`\006e\006l\006m\006o\006p\006q\006r\006t\006v\006\127\006\137\006\138\006\144\006\151\006\152\006\161\006\162\006\163\006\168\006\178\006\179\006\180\006\182\006\184\006\186\006\188\006\191\006\194\006\197\006\199\006\202\006\204\006\207\006\211\006\216\006\221\006\226\006\231\006\236\006\243\006\250\007\001\007\006\007\011\007\015\007\019\007\025\007!\007\"\007#\007$\007%\007'\007)\007,\007.\0071\0076\007;\007>\007A\007B\007C\007G\007J\007O\007R\007T\007Y\007]\007`\007e\007i\007s\007t\007u\007x\007y\007\127\007\135\007\136\007\137\007\140\007\141\007\142\007\144\007\147\007\151\007\155\007\160\007\165\007\166\007\167\007\168\007\169\007\170\007\171\007\172\007\173\007\174\007\175\007\176\007\177\007\178\007\179\007\180\007\181\007\182\007\183\007\184\007\185\007\186\007\187\007\188\007\189\007\190\007\191\007\192\007\193\007\194\007\195\007\196\007\197\007\198\007\199\007\200\007\201\007\202\007\203\007\204\007\205\007\206\007\207\007\208\007\209\007\210\007\211\007\212\007\213\007\214\007\215\007\216\007\217\007\218\007\226\007\228\007\230\007\235\007\236\007\239\007\240\007\241\007\243\007\244\007\245\007\246\007\248\b\001\b\011\b\012\b\018\b\026\b\027\b\028\b%\b&\b+\b,\b-\b2\b4\b6\b9\b<\b?\bB\bE\bH\bK\bM\bO\bP\bQ\bR\bT\bX\bZ\bZ\b\\\b]\b_\b_\b`\bc\be\bf\bf\bg\bh\bj\bn\bq\br\bs\bt\by\b~\b\132\b\138\b\145\b\152\b\152\b\153\b\154\b\156\b\158\b\159\b\161\b\163\b\169\b\174\b\178\b\182\b\183\b\185"))
    
    and lr0_core =
      (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000F\000G\000H\000I\000J\000K\000L\000M\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000]\000^\000_\000`\000a\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\t\001\n\001\011\001\012\001\r\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001 \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\001s\001t\001u\001v\001w\001x\001y\001z\001{\001|\001}\001~b\002\t\002\n\002\011\002\012\002\r\002\014\002\015\002\018\002\019\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002\031\002 \002\016\002\017\002\020\002\021\002\022\002\023\002!\002\"\002#\002$\002%\002&\002'\002(\002)\002*\002+\002,\002-\002.\002/\0020\0021\0022\0023\0024\0025\0026\0027\0028\0029\002:\002;\002<\002=\002>\002?\002@\002A\002B\002C\002D\002E\002F\002G\002H\002I\002J\002K\002L\002M\002N\002O\002P\002Q\002R\002S\002T\002U\002V\002W\002X\002Y\002Z\002[\002\\\002]\002^\002_\002`\002a\002b\002c\002d\002e\002f\002g\002h\002i\002j\002k\002l\002m\002n\002o\002p\002q\002r\002s\002t\002u\002v\002w\002x\002y\002z\002{\002|\002}\002~b\003\t\003\n\003\027\003\028\0035\0036\0037\0038\0039\003:\003;\003<\003=\003>\003\011\003\012\003\017\003\018\003\029\003\030\003\r\003\014\003\015\003\016\003\019\003\020\003\021\003\022\003\023\003\024\003\025\003\026\003\031\003 \003!\003\"\003-\003.\003#\003$\003%\003&\003'\003(\003/\0030\0031\0032\0033\0034\003)\003*\003+\003,\003?\003@\003A\003B\003C\003D\003E\003F\003G\003H\003I\003J\003K\003L\003M\003N\003O\003P\003Q\003R\003S\003T\003U\003V\003W\003X\003Y\003Z\003\201\003\202\003\203\003\204\003\205\003\206\003\207\003\208\003\209\003\210\003\211\003k\003l\003m`\003a\003b\003c\003d\003e\003f\003g\003h\003i\003j\003n\003o\003p\003q\003r\003s\003t\003u\003v\003w\003x\003y\003z\003{\003|\003}\003~\003\127\003\128\003\129\003\130\003\131\003\132\003\133\003\134\003\135\003\136\003\137\003\138\003\139\003\227\003\228\003\229\003\230\003\231\003\232\003\233\003\234\003\235\003\236\003\237\003\238\003\239\003\240\003\241\003\242\003\243\003\244\003\245\003\246\003\247\003\248\003\249\003\250\003\251\003\252\003\253\003\254\003\255\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\b\004\t\004\n\004\011\004\012\004\r\004\014\004\015\004\016\004\017\004\018\004\019\004\020\004\021\004\022\004\023\004\024\004\025\004\026\004\027\004\028\004\029\004\030\004\031\004 \004!\004\"\004#\004$\004%\004&\004'\004(\004)\004*\004+\004,\004-\004.\004/\0040\0041\0042\0043\0044\0045\0046\0047\0048\0049\004:\004;\004<\004=\004>\004?\004@\004A\004B\004C\004D\004E\004F\004G\004H\004I\004J\004K\004L\004M\004N\004O\004P\004Q\004R\004S\004T\004U\004V\004W\004X\004Y\004Z\004[\004\\\004]\004^\004_\004`\004a\004b\004c\004d\004e\004f\004g\004h\004i\004j\004k\004l\004m\004n\004o\004p\004q\004r\004s\004t\004u\004v\004w\004x\004y\004z\004{\004|\004}\004~\004\127\004\128\004\129\004\130\004\131\004\132\004\133\004\134\004\135\004\136\004\137\004\138\004\139\004\140\004\141\004\142\004\143\004\144\004\145\004\146\004\147\004\148\004\149\004\150\004\151\004\152\004\153\004\154\004\155\004\156\004\157\004\158\004\159\004\160\004\161\004\162\004\163\004\164\004\165\004\166\004\167\004\168\004\169\004\170\004\171\004\172\004\173\004\174\004\175\004\176\004\177\004\178\004\179\004\180\004\181\004\182\004\183\004\184\004\185\004\186\004\187\004\188\004\189\004\190\004\191\004\192\004\193\004\194\004\195\004\196\004\197\004\198\004\199\004\200\004\201\004\202\004\203\004\204\004\205\004\206\004\207\004\208\004\209\004\210\004\211\004\212\004\213\004\214\004\215\004\216\004\217\004\218\004\219\004\220\004\221\004\222\004\223\004\224\004\225\004\226\004\227\004\228\004\229\004\230\004\231\004\232\004\233\004\234\004\235\004\236\004\237\004\238\004\239\004\240\004\241\004\242\004\243\004\244\004\245\004\246\004\247\004\248\004\249\004\250\004\251\004\252\004\253\004\254\004\255\005\000\005\001\005\002\005\003\005\004\005\005\005\006\005\007\005\b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\005\030\005\031\005 \005!\005\"\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005o\005p\005q\005r\005s\005t\005u\005v\005w\005x\005y\005z\005{\005|\005}\005~b\006\t\006\n\006\011\006\012\006\r\006\014\006\015\006\016\006\017\006\018\006\019\006\020\006\021\006\022\006\023\006\024\006\025\006\026\006\027\006\028\006\029\006\030\006\031\006 \006!\006\"\006#\006$\006%\006&\006'\006(\006)\006*\006+\006,\006-\006.\006/\0060\0061\0062\0063\0064\0065\0066\0067\0068\0069\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006F\006G\006H\006I\006J\006K\006L\006M\006N\006O\006P\006Q\006R\006S\006T\006U\006V\006W\006X\006Y\006Z\006[\006\\\006]\006^\006_\006`\006a\006b\006c\006d\006e\006f\006g\006h\006i\006j\006k\006l\006m\006n\006o\006p\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~b\007\t\007\n\007\011\007\012\007\r\007\014\007\015\007\016\007\017\007\018\007\019\007\020\007\021\007\022")
    
    and lr0_items =
      ((32, "\000\000\000\000\000\001\244\001\000\002\236\001\000\0118\001\000\0114\001\000\0110\001\000\011,\001\000\011(\001\000\nt\001\000\011$\001\000\011 \001\000\011\028\001\000\011\024\001\000\011\020\001\000\011\016\001\000\011\012\001\000\011\b\001\000\011\004\001\000\011\000\001\000\n\252\001\000\n\248\001\000\n\244\001\000\n\240\001\000\n\236\001\000\n\232\001\000\n\228\001\000\n\224\001\000\n\220\001\000\np\001\000\n\216\001\000\n\212\001\000\n\208\001\000\n\204\001\000\n\200\001\000\n\196\001\000\n\192\001\000\n\188\001\000\n\184\001\000\n\180\001\000\n\176\001\000\n\172\001\000\n\168\001\000\n\164\001\000\n\160\001\000\n\156\001\000\n\152\001\000\n\148\001\000\n\144\001\000\n\140\001\000\n\136\001\000\n\132\001\000\n\128\001\000\n|\001\000\nx\001\000\000\164\001\000\000\160\001\000\000\164\002\000\000\164\003\000\002\236\002\000\001\244\002\000\000\168\001\000\000\168\002\000\0020\001\000\0020\002\000\0020\003\000\005L\001\000\001\240\001\000\001\236\001\000\001\232\001\000\001\228\001\000\001\240\002\000\001\236\002\000\001\232\002\000\001\228\002\000\001\240\003\000\001\236\003\000\001\232\003\000\001\228\003\000\002$\001\000\002$\002\000\002$\003\000\001\148\001\000\001\128\001\000\002\244\001\000\t\248\001\000\t\208\001\000\t\180\001\000\t\180\002\000\t\180\003\000\005D\001\000\005P\001\000\005H\001\000\005P\002\000\005H\002\000\005P\003\000\005H\003\000\005d\001\000\001\000\001\000\t\180\004\000\004P\001\000\004P\002\000\012$\001\000\t\188\001\000\t\184\001\000\t\132\001\000\t\128\001\000\001\172\001\000\001\140\001\000\006\160\001\000\001\140\002\000\t\208\001\000\006L\001\000\012(\001\000\002\240\001\000\002\240\002\000\012H\001\000\012H\002\000\012H\003\000\012$\001\000\006L\001\000\006\148\001\000\006\144\001\000\006\140\001\000\006\164\001\000\006\180\001\000\006\156\001\000\006\152\001\000\006P\001\000\006\172\001\000\006\136\001\000\006\132\001\000\006\128\001\000\006|\001\000\006x\001\000\006p\001\000\006\176\001\000\006\168\001\000\006l\001\000\006h\001\000\006d\001\000\006`\001\000\006\\\001\000\006X\001\000\006\\\002\000\006X\002\000\003x\001\000\003x\002\000\006\\\003\000\006X\003\000\006\\\004\000\006X\004\000\006\\\005\000\006d\002\000\006`\002\000\006d\003\000\006`\003\000\006d\004\000\006`\004\000\006d\005\000\006l\002\000\006h\002\000\006l\003\000\006h\003\000\006l\004\000\006h\004\000\006l\005\000\006\196\001\000\006\184\001\000\006t\001\000\006T\001\000\006\188\001\000\006\192\001\000\012$\002\000\012$\003\000\012H\004\000\012H\005\000\000\\\001\000\005\028\001\000\000X\001\000\003h\001\000\003l\001\000\000X\002\000\007\028\001\000\007\028\002\000\007\028\003\000\007\024\001\000\000|\001\000\000h\001\000\000T\001\000\000P\001\000\000T\002\000\000T\003\000\000T\004\000\005\028\001\000\003h\001\000\005\168\001\000\005\168\002\000\t(\001\000\t$\001\000\003d\001\000\003`\001\000\003\\\001\000\003X\001\000\t(\002\000\t$\002\000\003d\002\000\003`\002\000\003\\\002\000\003X\002\000\t(\003\000\t$\003\000\003d\003\000\003`\003\000\003\\\003\000\003X\003\000\012\020\001\000\t(\004\000\003d\004\000\003\\\004\000\012\024\001\000\012\004\001\000\011\248\001\000\012\012\001\000\012\b\001\000\012\b\002\000\011\248\002\000\b\148\001\000\012\004\002\000\b\152\001\000\012\004\003\000\b\152\002\000\b\152\003\000\t(\005\000\003d\005\000\003\\\005\000\005\020\001\000\003d\006\000\003\\\006\000\011\240\001\000\005\028\001\000\001\152\001\000\0060\001\000\006 \001\000\006\016\001\000\006\b\001\000\001\156\001\000\001\140\001\000\000|\001\000\000h\001\000\000T\001\000\000P\001\000\005\020\001\000\003,\001\000\003,\002\000\005\020\001\000\000p\001\000\000l\001\000\005\020\001\000\004\236\001\000\004\228\001\000\004\220\001\000\004\236\002\000\004\228\002\000\004\220\002\000\b`\001\000\000X\001\000\b`\002\000\000X\002\000\000\152\001\000\000\148\001\000\006\212\001\000\000\152\002\000\000\148\002\000\000\144\001\000\000\140\001\000\000\144\002\000\000\140\002\000\000\136\001\000\000\132\001\000\000\128\001\000\000t\001\000\005`\001\000\005 \001\000\005\024\001\000\005`\002\000\005`\003\000\005`\001\000\005 \001\000\005`\004\000\005 \002\000\005 \003\000\005\\\001\000\005 \002\000\005\024\002\000\005\024\003\000\001t\001\000\000t\002\000\000\132\002\000\005\240\001\000\005\240\002\000\000`\001\000\0030\001\000\003$\001\000\0030\002\000\011\220\001\000\b\180\001\000\b\180\002\000\011\244\001\000\000\156\001\000\b\180\003\000\000x\001\000\000d\001\000\000x\002\000\000x\003\000\000d\002\000\003(\001\000\003(\002\000\003(\003\000\003(\004\000\011\216\001\000\b\184\001\000\000x\001\000\000d\001\000\b\184\002\000\b\184\003\000\000x\001\000\000d\001\000\0030\003\000\b\188\001\000\b\132\001\000\b\136\001\000\000\132\003\000\000\132\004\000\b\136\002\000\b\136\003\000\011\168\001\000\011\164\001\000\011\164\002\000\006\200\001\000\011\164\003\000\011\164\004\000\bx\001\000\bx\002\000\000<\001\000\bx\003\000\000@\001\000\000@\002\000\000@\003\000\000@\004\000\011\164\005\000\bt\001\000\000@\001\000\011\168\002\000\b\192\001\000\001\208\001\000\001\208\002\000\001\204\001\000\000@\001\000\b\188\001\000\000\128\002\000\000\128\003\000\000\136\002\000\000\136\003\000\b\136\001\000\000\136\004\000\000\136\005\000\b\136\001\000\000\140\003\000\000\140\004\000\b\136\001\000\000\152\003\000\000\148\003\000\000\148\004\000\000\152\004\000\b\\\001\000\000\152\005\000\000\152\006\000\b\\\002\000\bX\001\000\bd\001\000\007\216\001\000\bd\002\000\bd\003\000\007\216\002\000\007\216\003\000\000@\001\000\004\236\003\000\004\228\003\000\004\220\003\000\004\236\004\000\004\228\004\000\004\220\004\000\004\228\005\000\004\220\005\000\004\228\006\000\004\220\006\000\004\244\001\000\004\220\007\000\004\240\001\000\004\232\001\000\004\224\001\000\000x\001\000\000d\001\000\004\232\002\000\004\224\002\000\004\224\003\000\007\212\001\000\000@\001\000\000p\002\000\000l\002\000\000l\003\000\003,\003\000\003,\004\000\003,\005\000\001\156\002\000\001\156\003\000\b\164\001\000\000|\002\000\000h\002\000\000|\003\000\000h\003\000\000|\004\000\000|\005\000\000h\004\000\b\164\002\000\b\164\003\000\001\208\001\000\b\168\001\000\001\208\001\000\000P\002\000\000P\003\000\b\168\002\000\bb\160\001\000\001\188\001\000\b\160\002\000\001\188\002\000\b\160\003\000\001\188\003\000\000x\001\000\000d\001\000\003D\002\000\b\156\001\000\001\184\001\000\000x\001\000\000d\001\000\003L\001\000\003H\001\000\003H\002\000\003H\003\000\003H\004\000\000x\001\000\000d\001\000\b\156\001\000\003L\002\000\001\184\001\000\000x\001\000\000d\001\000\003P\003\000\003P\004\000\001\160\001\000\b\024\001\000\001\200\001\000\003P\001\000\b\024\002\000\b\016\001\000\b\020\001\000\006\bb\000\bD\001\000\003\\\t\000\007\220\001\000\007\220\002\000\011x\001\000\011t\001\000\003d\001\000\003`\001\000\011x\002\000\011t\002\000\003d\002\000\003`\002\000\011x\003\000\011t\003\000\003d\003\000\003`\003\000\011x\004\000\003d\004\000\011x\005\000\003d\005\000\005\020\001\000\003d\006\000\003d\007\000\bD\001\000\003d\b\000\bD\002\000\bD\003\000\001\208\001\000\bD\004\000\bD\005\000\001\208\001\000\004h\001\000\004h\002\000\003d\t\000\011x\006\000\011x\007\000\007\232\001\000\011x\b\000\003P\001\000\002\248\001\000\003P\002\000\002\248\002\000\002\248\003\000\001\172\001\000\001\140\001\000\001\172\002\000\001\172\003\000\005P\001\000\001\168\001\000\001\164\001\000\005P\002\000\001\168\002\000\001\168\003\000\001\168\004\000\001\168\005\000\002\248\004\000\002\248\005\000\001\176\001\000\011x\t\000\b0\001\000\b,\001\000\011x\n\000\b,\002\000\b0\002\000\b\028\001\000\b$\001\000\b \001\000\b(\001\000\003T\001\000\002\252\001\000\002\252\002\000\002\252\003\000\002\252\004\000\012\000\001\000\011t\004\000\003`\004\000\005\020\001\000\003`\005\000\003`\006\000\bD\001\000\003`\007\000\003`\b\000\011t\005\000\011t\006\000\011t\007\000\011t\b\000\b0\001\000\b,\001\000\011t\t\000\004\128\001\000\004|\001\000\003\132\001\000\0008\001\000\0004\001\000\006@\001\000\006<\001\000\006@\002\000\006@\003\000\006@\004\000\005|\001\000\005|\002\000\002@\001\000\002@\002\000\002@\003\000\001\b\001\000\001\004\001\000\n@\001\000\td\001\000\t`\001\000\t`\002\000\td\002\000\t\\\001\000\tX\001\000\tX\002\000\t\\\002\000\012$\001\000\nh\001\000\n<\001\000\n8\001\000\n0\001\000\001\172\001\000\001\140\001\000\td\001\000\t`\001\000\006\140\001\000\n<\002\000\n8\002\000\n<\003\000\n8\003\000\n<\004\000\n8\004\000\005\160\001\000\005\156\001\000\n<\005\000\n8\005\000\n8\006\000\n<\006\000\005\176\001\000\005\176\002\000\005\176\003\000\005\176\004\000\0074\001\000\0070\001\000\007,\001\000\007(\001\000\007$\001\000\007 \001\000\0074\002\000\0070\002\000\007,\002\000\007(\002\000\0074\003\000\0070\003\000\007,\003\000\007(\003\000\011\160\001\000\011\156\001\000\001\224\001\000\001\224\002\000\001\224\003\000\002 \001\000\002 \002\000\002 \003\000\012(\001\000\002\184\001\000\002\184\002\000\004\196\001\000\004\196\002\000\004\196\003\000\b\004\001\000\004\196\004\000\tt\001\000\tp\001\000\tl\001\000\001\136\001\000\th\001\000\003\164\001\000\th\002\000\th\003\000\004\192\001\000\004\188\001\000\004\184\001\000\004\180\001\000\006\236\001\000\006\236\002\000\001\208\001\000\004\192\002\000\004\188\002\000\004\184\002\000\004\180\002\000\007\004\001\000\007\148\001\000\007\148\002\000\007\148\003\000\001x\001\000\nT\001\000\nT\002\000\001\132\001\000\001|\001\000\n(\001\000\012,\001\000\n,\001\000\007\148\004\000\n4\001\000\nH\001\000\nD\001\000\nH\002\000\nH\003\000\tT\001\000\nP\001\000\nd\001\000\n`\001\000\n\\\001\000\nX\001\000\005P\001\000\001\168\001\000\001\164\001\000\nd\002\000\n`\002\000\n\\\002\000\nX\002\000\005P\002\000\001\168\002\000\nd\003\000\n`\003\000\001\168\003\000\n`\004\000\007t\001\000\007t\002\000\007t\003\000\007\136\001\000\007d\001\000\007x\001\000\007l\001\000\007x\002\000\007|\001\000\007x\003\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007|\002\000\007|\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007\\\002\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\003\000\007\\\001\000\007p\002\000\007|\001\000\007p\003\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007h\002\000\007h\003\000\007`\002\000\nP\001\000\007\144\001\000\007\144\002\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\nl\001\000\nL\001\000\007\140\001\000\007\140\002\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007|\001\000\007t\004\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\nd\004\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\nd\005\000\n\\\003\000\tl\001\000\n\\\004\000\tl\002\000\tl\003\000\b\228\001\000\b\224\001\000\b\220\001\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\b\228\002\000\b\224\002\000\b\228\003\000\nX\003\000\nL\001\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007\004\002\000\004\192\003\000\004\188\003\000\004\184\003\000\004\180\003\000\004\192\004\000\004\188\004\000\004\184\004\000\004\188\005\000\006\220\001\000\004\188\006\000\004\192\005\000\tt\002\000\tp\002\000\tp\003\000\n(\001\000\003\232\001\000\003\228\001\000\003\224\001\000\003\220\001\000\003\208\001\000\003\204\001\000\003\204\002\000\003\160\001\000\003\156\001\000\003\160\002\000\003\160\003\000\001\208\001\000\003\204\003\000\003\204\004\000\003\208\002\000\003\192\001\000\003\188\001\000\003\188\002\000\003\188\003\000\007\012\001\000\002\176\001\000\n(\001\000\004\016\001\000\003\200\001\000\003\196\001\000\007\180\001\000\003\196\002\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\004\012\001\000\004\b\001\000\004\012\002\000\004\012\003\000\001\208\001\000\003\196\003\000\003\196\004\000\003\196\005\000\007\176\001\000\003\200\002\000\012$\001\000\011L\001\000\nh\001\000\n<\001\000\n8\001\000\n0\001\000\001\172\001\000\001\140\001\000\011L\002\000\005\248\001\000\005\244\001\000\005\248\002\000\011L\003\000\011L\004\000\003\212\001\000\003\212\002\000\011D\001\000\003\244\001\000\002\016\001\000\002\012\001\000\002\b\001\000\002\004\001\000\002\016\002\000\002\012\002\000\002\016\003\000\002\016\004\000\002\016\005\000\005\128\001\000\005\128\002\000\0038\001\000\0034\001\000\0034\002\000\0038\002\000\0038\003\000\005\180\001\000\005\172\001\000\005\172\002\000\bL\001\000\003<\001\000\bL\002\000\005\172\003\000\005\172\004\000\005\188\001\000\005\196\001\000\005\192\001\000\005\184\001\000\005\172\005\000\005\196\002\000\012p\001\000\012l\001\000\012p\002\000\012l\002\000\012p\003\000\012l\003\000\012\128\001\000\012|\001\000\012\128\002\000\012p\004\000\012p\005\000\000@\001\000\012l\004\000\012l\005\000\000@\001\000\012l\006\000\bD\001\000\012x\001\000\012t\001\000\012x\002\000\012t\002\000\005P\001\000\012t\003\000\012t\004\000\005`\001\000\005 \001\000\005P\002\000\012x\003\000\012x\004\000\005`\001\000\005 \001\000\b|\001\000\b\128\001\000\005\196\003\000\b\128\002\000\b\128\003\000\005\192\002\000\005\196\001\000\005\192\003\000\005\192\001\000\005\184\001\000\005\184\002\000\005`\001\000\005@\001\000\005 \001\000\005@\002\000\005 \002\000\005 \003\000\003h\001\000\005@\003\000\005\208\001\000\005<\001\000\005\200\001\000\bn\012\001\000\n\b\001\000\n\024\001\000\001\136\001\000\t\220\001\000\t\216\001\000\b\216\001\000\b\212\001\000\b\208\001\000\006\244\001\000\n\000\001\000\012(\001\000\005D\001\000\t|\001\000\tx\001\000\002<\001\000\002<\002\000\002<\003\000\t\176\001\000\t\172\001\000\t\176\002\000\t\172\002\000\t\176\003\000\t\172\003\000\002,\001\000\002(\001\000\002,\002\000\002(\002\000\002,\003\000\002(\003\000\002\020\001\000\002\020\002\000\002\020\003\000\bl\001\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\004\216\001\000\004\212\001\000\004\208\001\000\004\212\002\000\002\028\001\000\002\024\001\000\002\028\002\000\002\024\002\000\002\028\003\000\002\024\003\000\012$\001\000\nh\001\000\n<\001\000\n8\001\000\n0\001\000\002\028\004\000\001\172\001\000\001\140\001\000\002\028\005\000\002\028\006\000\002\028\007\000\003\020\001\000\001\252\001\000\001\248\001\000\001\252\002\000\001\248\002\000\001\252\003\000\001\248\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\001\252\004\000\001\248\004\000\001\252\005\000\0024\001\000\0024\002\000\0024\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\0024\004\000\0024\005\000\t\212\001\000\t\192\001\000\005T\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\212\002\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\t\240\002\000\t\240\003\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\t\236\002\000\t\236\003\000\t\152\002\000\t\148\002\000\t\144\002\000\t\148\003\000\0028\001\000\0028\002\000\0028\003\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\0028\004\000\t\224\002\000\t\168\002\000\t\164\002\000\t\160\002\000\t\156\002\000\t\140\002\000\t\136\002\000\t\136\003\000\002\164\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\002\224\001\000\002\220\001\000\002\216\001\000\002\212\001\000\002\208\001\000\002\204\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002D\001\000\002\000\001\000\003\176\001\000\003\176\002\000\003\180\001\000\003\180\002\000\003\184\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\003\184\002\000\t\204\001\000\n$\001\000\n \001\000\n\028\001\000\n\020\001\000\n\016\001\000\n\004\001\000\t\252\001\000\t\232\001\000\t\228\001\000\005X\001\000\005P\001\000\001\168\001\000\001\164\001\000\n$\002\000\n \002\000\n\028\002\000\n\020\002\000\n\016\002\000\n\004\002\000\t\252\002\000\t\232\002\000\t\228\002\000\005X\002\000\005P\002\000\001\168\002\000\012$\001\000\n$\003\000\t\252\003\000\t\228\003\000\001\168\003\000\t\252\004\000\006\144\001\000\0008\001\000\006\140\001\000\0004\001\000\n$\004\000\n$\005\000\n$\006\000\n$\007\000\005\148\001\000\005\144\001\000\005\136\001\000\n$\b\000\n$\t\000\005\196\001\000\005\192\001\000\005\184\001\000\n$\n\000\011\160\001\000\006\156\001\000\011\156\001\000\006\152\001\000\006P\001\000\002\176\001\000\007\136\001\000\004\020\001\000\004\020\002\000\004\020\003\000\001\208\001\000\004\020\004\000\004\020\005\000\b\172\001\000\002H\001\000\b\172\002\000\t\204\001\000\002P\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\002P\002\000\0120\001\000\t\244\001\000\t\200\001\000\t\196\001\000\004\204\001\000\001\220\001\000\001\220\002\000\001\220\003\000\004\200\001\000\003\248\001\000\002\172\001\000\002\172\002\000\002\172\003\000\t\000\001\000\b\252\001\000\b\248\001\000\b\244\001\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002|\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\003\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002p\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\003\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002l\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\003\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002h\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\003\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\128\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\003\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\144\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\003\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002x\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\003\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002t\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\003\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\136\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\003\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002d\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\003\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002`\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\003\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\\\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\003\000\002\\\001\000\002X\001\000\002T\001\000\002X\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\003\000\002X\001\000\002T\001\000\002T\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\003\000\002T\001\000\002\140\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\003\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\132\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\003\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\b\176\002\000\b\176\003\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\160\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\003\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\180\002\000\b\176\001\000\002\228\001\000\002\180\003\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\148\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\003\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\152\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\003\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\156\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\003\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002\228\002\000\t\200\001\000\002L\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\002L\002\000\002\168\001\000\b\176\001\000\002\228\001\000\002\180\001\000\002\168\002\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\000\002\000\b\252\002\000\b\248\002\000\t\000\003\000\t\000\004\000\t\000\005\000\b\252\003\000\000D\001\000\000D\002\000\n,\001\000\003\240\001\000\003\240\002\000\003\240\003\000\001\208\001\000\003\240\004\000\003\240\005\000\007\172\001\000\007\164\001\000\007\156\001\000\007\152\001\000\007\132\001\000\003\236\001\000\003\236\002\000\003\236\003\000\007\132\002\000\007\132\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007\152\002\000\007\152\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007\172\002\000\007\172\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007\164\002\000\007\164\003\000\007\156\002\000\007\160\001\000\007\168\001\000\007\128\001\000\007\128\002\000\007\128\003\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\000D\003\000\000D\004\000\003\248\002\000\004\204\002\000\b\176\001\000\b\172\003\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\007\172\001\000\007\164\001\000\007\156\001\000\007\152\001\000\007\132\001\000\004\024\001\000\004\024\002\000\004\024\003\000\004 \001\000\002\176\002\000\002\176\003\000\002\176\004\000\004 \002\000\004 \003\000\004\028\001\000\t\212\001\000\006t\001\000\t\228\004\000\t\228\005\000\n\020\003\000\n\016\003\000\n\020\004\000\n\016\004\000\n\016\005\000\b\204\001\000\b\200\001\000\b\196\001\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\b\204\002\000\b\200\002\000\b\204\003\000\n \003\000\n\028\003\000\n \004\000\n\028\004\000\n\028\005\000\t\232\003\000\t\232\004\000\t\232\005\000\n\004\003\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\b\012\001\000\b\012\002\000\b\012\003\000\b\240\001\000\b\236\001\000\b\232\001\000\011\232\001\000\011\232\002\000\001\208\001\000\011\228\001\000\011\224\001\000\011\228\002\000\011\224\002\000\001\208\001\000\011\228\003\000\011\228\004\000\001\208\001\000\007\020\001\000\b\240\002\000\b\236\002\000\b\232\002\000\b\240\003\000\b\236\003\000\b\232\003\000\b\240\004\000\b\236\004\000\b\240\005\000\b\b\001\000\n\004\004\000\n\004\005\000\n$\001\000\n \001\000\n\028\001\000\n\020\001\000\n\016\001\000\n\004\001\000\t\252\001\000\t\232\001\000\t\228\001\000\005X\001\000\005P\001\000\005H\001\000\001\168\001\000\001\164\001\000\n$\002\000\n \002\000\n\028\002\000\n\020\002\000\n\016\002\000\n\004\002\000\t\252\002\000\t\232\002\000\t\228\002\000\005X\002\000\005P\002\000\005H\002\000\001\168\002\000\012(\001\000\005H\003\000\005X\003\000\003\172\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\003\172\002\000\t\152\002\000\t\148\002\000\t\144\002\000\002\212\002\000\002\208\002\000\002\204\002\000\t\148\003\000\002\208\003\000\t\148\004\000\002\208\004\000\t\148\005\000\002\208\005\000\002\208\006\000\b\176\001\000\002\228\001\000\002\208\007\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\144\003\000\002\204\003\000\t\144\004\000\002\204\004\000\t\144\005\000\002\204\005\000\002\204\006\000\b\176\001\000\002\228\001\000\002\204\007\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\152\003\000\002\212\003\000\t\152\004\000\002\212\004\000\t\152\005\000\002\212\005\000\002\212\006\000\b\176\001\000\002\228\001\000\002\212\007\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\224\002\000\t\168\002\000\t\164\002\000\t\160\002\000\t\156\002\000\t\140\002\000\t\136\002\000\002\224\002\000\002\220\002\000\002\216\002\000\002\200\002\000\002\196\002\000\002\192\002\000\002\188\002\000\t\136\003\000\002\192\003\000\t\136\004\000\002\192\004\000\t\136\005\000\002\192\005\000\002\192\006\000\b\176\001\000\002\228\001\000\002\192\007\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\140\003\000\002\196\003\000\t\140\004\000\002\196\004\000\t\140\005\000\002\196\005\000\002\196\006\000\b\176\001\000\002\228\001\000\002\196\007\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\168\003\000\002\200\003\000\t\168\004\000\b\176\001\000\002\228\001\000\002\200\004\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\168\005\000\002\200\005\000\002\200\006\000\b\176\001\000\002\228\001\000\002\200\007\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\164\003\000\t\160\003\000\t\156\003\000\005P\001\000\005H\001\000\002\224\003\000\002\220\003\000\002\216\003\000\t\164\004\000\t\160\004\000\t\156\004\000\002\224\004\000\002\220\004\000\002\216\004\000\t\160\005\000\002\220\005\000\t\160\006\000\002\220\006\000\t\160\007\000\002\220\007\000\002\220\b\000\b\176\001\000\002\228\001\000\002\220\t\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\156\005\000\002\216\005\000\t\156\006\000\002\216\006\000\t\156\007\000\002\216\007\000\002\216\b\000\b\176\001\000\002\228\001\000\002\216\t\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\164\005\000\002\224\005\000\t\164\006\000\002\224\006\000\t\164\007\000\002\224\007\000\002\224\b\000\b\176\001\000\002\228\001\000\002\224\t\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\224\003\000\002\188\003\000\002\188\004\000\b\176\001\000\002\228\001\000\002\188\005\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\003\168\001\000\bT\001\000\002D\002\000\bT\002\000\bP\001\000\b\176\001\000\002\228\001\000\002\180\001\000\002\164\002\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\136\004\000\t\136\005\000\t\140\003\000\t\140\004\000\t\140\005\000\t\168\003\000\t\168\004\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\t\168\005\000\t\164\003\000\t\160\003\000\t\156\003\000\005P\001\000\005H\001\000\t\164\004\000\t\160\004\000\t\156\004\000\t\160\005\000\t\160\006\000\t\160\007\000\t\156\005\000\t\156\006\000\t\156\007\000\t\164\005\000\t\164\006\000\t\164\007\000\t\224\003\000\t\148\004\000\t\148\005\000\t\144\003\000\t\144\004\000\t\144\005\000\t\152\003\000\t\152\004\000\t\152\005\000\0024\006\000\001\212\001\000\001\216\001\000\0024\007\000\0024\b\000\0024\t\000\0024\n\000\0024\011\000\001\252\006\000\001\252\007\000\001\252\b\000\001\252\t\000\001\248\005\000\001\248\006\000\001\248\007\000\001\248\b\000\001\248\t\000\001\248\n\000\001\248\011\000\003\020\002\000\012$\001\000\nh\001\000\n<\001\000\n8\001\000\n0\001\000\003 \001\000\001\172\001\000\001\140\001\000\003 \002\000\003 \003\000\003 \004\000\003\024\001\000\003\024\002\000\000x\001\000\000d\001\000\003\024\003\000\003\024\004\000\003\216\001\000\003\028\001\000\003\028\002\000\003 \005\000\t\\\001\000\tX\001\000\006\152\001\000\nh\002\000\n0\002\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\n0\003\000\nh\003\000\nh\004\000\001\208\001\000\nh\005\000\002\028\b\000\002\024\004\000\002\024\005\000\004\212\003\000\004\212\004\000\004\212\005\000\004\216\002\000\004\208\002\000\004\216\003\000\004\208\003\000\bl\002\000\bp\001\000\002\020\004\000\bp\002\000\bp\003\000\bh\001\000\002,\004\000\002(\004\000\002,\005\000\002(\005\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002,\006\000\002(\006\000\002(\007\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002(\b\000\t\176\004\000\t\172\004\000\t\172\005\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\002<\004\000\tx\002\000\b\176\001\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\tx\003\000\t\240\001\000\t\236\001\000\t\224\001\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\t|\002\000\n\000\002\000\n\000\003\000\b\176\001\000\006\244\002\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\b\216\002\000\b\212\002\000\b\208\002\000\b\216\003\000\b\212\003\000\b\216\004\000\t\220\002\000\t\216\002\000\t\216\003\000\n\024\002\000\n\024\003\000\n\012\002\000\n\b\002\000\n\b\003\000\002\016\b\000\002\012\003\000\002\012\004\000\005\148\001\000\005\144\001\000\005\136\001\000\002\012\005\000\002\012\006\000\002\012\007\000\002\004\002\000\002\004\003\000\002\004\004\000\002\004\005\000\005h\001\000\005\148\001\000\005\144\001\000\005\136\001\000\005h\002\000\005l\001\000\005\196\001\000\005\192\001\000\005\184\001\000\005l\002\000\005l\003\000\005\148\001\000\005\144\001\000\005\136\001\000\005l\004\000\002\004\006\000\002\004\007\000\002\004\b\000\005p\001\000\005p\002\000\002\b\002\000\002\b\003\000\002\b\004\000\002\b\005\000\002\b\006\000\002\b\007\000\002\b\b\000\002\b\t\000\003\244\002\000\003\244\003\000\003\244\004\000\003\244\005\000\003\244\006\000\011D\002\000\003\016\001\000\003\016\002\000\003\016\003\000\003\012\001\000\011H\001\000\011H\002\000\011L\005\000\004\016\002\000\007\012\002\000\003\188\004\000\003\188\005\000\003\192\002\000\011\228\001\000\011\224\001\000\003\232\002\000\003\228\002\000\003\232\003\000\003\232\004\000\003\232\005\000\003\232\006\000\001\208\001\000\003\232\007\000\003\232\b\000\bd\001\000\003\228\003\000\003\228\004\000\003\228\005\000\001\208\001\000\003\228\006\000\003\228\007\000\003\224\002\000\003\224\003\000\003\224\004\000\003\220\002\000\004\196\005\000\004\196\006\000\b\176\001\000\002\228\001\000\002\184\003\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\002 \004\000\002 \005\000\bp\001\000\002 \006\000\001\224\004\000\001\224\005\000\bp\001\000\001\224\006\000\b\176\001\000\0074\004\000\0070\004\000\007,\004\000\007(\004\000\002\228\001\000\002\180\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002t\001\000\002p\001\000\002l\001\000\002h\001\000\002d\001\000\002`\001\000\002\\\001\000\002X\001\000\002T\001\000\007(\005\000\0074\005\000\0074\006\000\005\196\001\000\005\192\001\000\005\184\001\000\0074\007\000\0070\005\000\007,\005\000\0070\006\000\007,\006\000\005\196\001\000\005\192\001\000\005\184\001\000\007,\007\000\0070\007\000\0070\b\000\005\196\001\000\005\192\001\000\005\184\001\000\0070\t\000\005\176\005\000\005\148\001\000\005\144\001\000\005\136\001\000\n<\007\000\005\196\001\000\005\192\001\000\005\184\001\000\n<\b\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\001\b\002\000\001\004\002\000\001\004\003\000\001\b\003\000\001\208\001\000\001\b\004\000\001\b\005\000\002@\004\000\000\212\001\000\012D\001\000\012<\001\000\012D\002\000\012<\002\000\012D\003\000\012<\003\000\012D\004\000\012<\004\000\012<\005\000\012<\006\000\012D\005\000\012D\006\000\012D\007\000\000\212\002\000\000\212\003\000\012@\001\000\0128\001\000\0124\001\000\012\\\001\000\012T\001\000\012\\\002\000\012X\001\000\005\216\001\000\012X\002\000\0124\002\000\0124\003\000\0124\004\000\0124\005\000\001\208\001\000\012@\002\000\0128\002\000\012@\003\000\0128\003\000\0128\004\000\0128\005\000\012@\004\000\012@\005\000\012@\006\000\000\216\001\000\005\016\001\000\005\b\001\000\005\000\001\000\005\016\002\000\005\b\002\000\005\000\002\000\005\016\003\000\005\b\003\000\005\000\003\000\005\016\004\000\005\b\004\000\005\000\004\000\005\016\005\000\005\b\005\000\005\016\006\000\005\016\007\000\005\016\b\000\005\016\t\000\001\208\001\000\005\016\n\000\005\016\011\000\bd\001\000\007\208\001\000\007\208\002\000\007\208\003\000\001\208\001\000\005\b\006\000\005\b\007\000\005\b\b\000\007\204\001\000\001\208\001\000\005\000\005\000\000\216\002\000\000\216\003\000\005\012\001\000\005\004\001\000\004\252\001\000\004\248\001\000\012h\001\000\012`\001\000\012h\002\000\012d\001\000\007\232\001\000\012d\002\000\004\248\002\000\004\248\003\000\004\248\004\000\004\248\005\000\005\012\002\000\005\004\002\000\004\252\002\000\005\012\003\000\005\004\003\000\004\252\003\000\005\012\004\000\005\004\004\000\005\012\005\000\005\012\006\000\005\012\007\000\005\012\b\000\001\208\001\000\005\012\t\000\005\012\n\000\005\004\005\000\005\004\006\000\005\004\007\000\004\252\004\000\003\128\001\000\003\128\002\000\007\200\001\000\007\196\001\000\007\200\002\000\007\196\002\000\007|\001\000\007p\001\000\007h\001\000\007`\001\000\007\\\001\000\007\200\003\000\007\200\004\000\011\132\001\000\011\128\001\000\005\204\001\000\005\204\002\000\005\204\003\000\005\204\004\000\005\204\005\000\006\252\001\000\006\252\002\000\005\196\001\000\005\192\001\000\005\184\001\000\005\204\006\000\005\204\007\000\011\132\002\000\011\128\002\000\011\132\003\000\011\128\003\000\011\132\004\000\011\132\005\000\011\132\006\000\011\132\007\000\004@\001\000\004@\002\000\004@\003\000\004@\004\000\004@\005\000\004@\006\000\011\132\b\000\011\128\004\000\011\128\005\000\011\128\006\000\003\000\001\000\003\000\002\000\011\152\001\000\011\152\002\000\011\152\003\000\011\152\004\000\005\148\001\000\005\144\001\000\005\136\001\000\011\152\005\000\007\224\001\000\007\224\002\000\007\224\003\000\007\224\004\000\007\224\005\000\007\224\006\000\001\208\001\000\007\224\007\000\006\000\001\000\005\252\001\000\006\000\002\000\007\224\b\000\007\224\t\000\011@\001\000\t\004\001\000\011@\002\000\t\004\002\000\011@\003\000\t\004\003\000\011@\004\000\t\004\004\000\011@\005\000\011@\006\000\011@\007\000\011@\b\000\t\004\005\000\t\004\006\000\t\004\007\000\007\192\001\000\007\188\001\000\004p\001\000\006H\001\000\006D\001\000\006H\002\000\006H\003\000\006H\004\000\006H\005\000\005`\001\000\005 \001\000\006H\006\000\006D\002\000\006D\003\000\006D\004\000\005`\001\000\005 \001\000\006D\005\000\t<\001\000\t4\001\000\t0\001\000\005\204\001\000\005\164\001\000\t<\002\000\t4\002\000\t0\002\000\005\164\002\000\t<\003\000\t4\003\000\t0\003\000\005\164\003\000\005\164\004\000\005\156\001\000\005\164\005\000\005\164\006\000\005`\001\000\005 \001\000\005\164\007\000\t<\004\000\t<\005\000\t<\006\000\t<\007\000\005\196\001\000\005\192\001\000\005\184\001\000\t<\b\000\004H\001\000\004H\002\000\004H\003\000\004H\004\000\005\196\001\000\005\192\001\000\005\184\001\000\004H\005\000\004H\006\000\004H\007\000\t<\t\000\t4\004\000\t0\004\000\t4\005\000\t4\006\000\005P\001\000\t4\007\000\005t\001\000\005\196\001\000\005\192\001\000\005\184\001\000\005t\002\000\t0\005\000\t0\006\000\005x\001\000\005x\002\000\tH\001\000\tH\002\000\tH\003\000\tH\004\000\005\196\001\000\005\192\001\000\005\184\001\000\tH\005\000\t\004\001\000\t\004\002\000\t\004\003\000\t\004\004\000\tL\001\000\001p\001\000\001p\002\000\001p\003\000\001p\004\000\012P\001\000\001p\005\000\003\b\001\000\b\152\001\000\003\b\002\000\003\b\003\000\001p\006\000\001p\007\000\001p\bb\144\001\000\0014\002\000\0014\003\000\0014\004\000\b\144\002\000\b\144\003\000\001\208\001\000\b\140\001\000\001\208\001\000\0018\001\000\0010\001\000\001H\007\000\001@\001\000\001@\002\000\001D\003\000\005P\001\000\001D\004\000\001D\005\000\001D\006\000\001@\001\000\001@\001\000\001\024\003\000\001\024\004\000\001$\001\000\001$\002\000\001\208\001\000\001\180\001\000\001\180\002\000\001\208\001\000\001\180\003\000\001$\003\000\001$\004\000\001<\004\000\001<\005\000\001(\001\000\001(\002\000\001,\001\000\004\140\001\000\004\140\002\000\001p\t\000\001@\001\000\001p\n\000\0048\001\000\0048\002\000\0048\003\000\0048\004\000\0048\005\000\0048\006\000\0048\007\000\001@\001\000\0048\b\000\0048\t\000\001p\011\000\tL\002\000\tL\003\000\tL\004\000\tL\005\000\tL\006\000\tL\007\000\005\020\001\000\001h\001\000\001h\002\000\001h\003\000\001h\004\000\0014\001\000\000\136\001\000\000\132\001\000\000\128\001\000\b\192\001\000\b\140\001\000\001\208\001\000\001l\001\000\001l\002\000\001d\001\000\001d\002\000\001d\003\000\011\244\001\000\001t\001\000\0018\001\000\000\156\001\000\001d\004\000\001`\001\000\001@\001\000\001l\003\000\001h\005\000\tL\b\000\tL\t\000\0040\001\000\0040\002\000\0040\003\000\0040\004\000\0040\005\000\0040\006\000\0040\007\000\0040\b\000\0040\t\000\tL\n\000\t\020\001\000\004t\001\000\t,\001\000\t\024\001\000\tD\001\000\t@\001\000\t8\001\000\004t\002\000\t\012\001\000\t\012\002\000\t\028\001\000\004X\001\000\004X\002\000\004X\003\000\004X\004\000\004X\005\000\bD\001\000\004X\006\000\004X\007\000\004X\b\000\t\028\002\000\t \001\000\004`\001\000\004`\002\000\004`\003\000\004`\004\000\004`\005\000\004`\006\000\bD\001\000\004`\007\000\004`\b\000\004`\t\000\t \002\000\t\016\001\000\tP\001\000\004p\002\000\007\188\002\000\t\b\001\000\007\192\002\000\001\208\001\000\011\144\001\000\001p\001\000\011\144\002\000\011\144\003\000\011\144\004\000\011\144\005\000\011\144\006\000\000\236\001\000\001\\\001\000\001\\\002\000\001\\\003\000\000\224\001\000\000\224\002\000\000\224\003\000\000\224\004\000\000\208\001\000\000\204\001\000\000\208\002\000\000\208\003\000\001X\001\000\001L\001\000\004\000\001\000\003\252\001\000\000\188\001\000\000\184\001\000\004\000\002\000\004\000\003\000\004\000\004\000\004\000\005\000\004\000\006\000\004\000\007\000\000\188\002\000\000\184\002\000\000\188\003\000\000\188\004\000\005P\001\000\000\188\005\000\000\188\006\000\001T\001\000\b\144\001\000\001T\002\000\001T\003\000\001T\004\000\000\176\001\000\000\176\002\000\000\252\001\000\000\248\001\000\000\248\002\000\004\004\001\000\000\180\001\000\000\180\002\000\000\200\001\000\000\196\001\000\000\172\001\000\bb\000\004(\001\000\004(\002\000\004(\003\000\004(\004\000\004(\005\000\004(\006\000\004(\007\000\004(\b\000\011\144\t\000\011l\001\000\004\132\001\000\003\244\001\000\011|\001\000\011<\001\000\011h\001\000\011\140\001\000\011\136\001\000\011X\001\000\004\204\001\000\004\132\002\000\011\\\001\000\003\248\001\000\011`\001\000\011`\002\000\011p\001\000\011p\002\000\011d\001\000\011\148\001\000\007\184\001\000\011T\001\000\011T\002\000\011T\003\000\003\000\003\000\003\000\004\000\011X\001\000\004\204\001\000\001\220\001\000\011P\001\000\011\\\001\000\003\248\001\000\002\172\001\000\003\128\003\000\003\128\004\000\002@\005\000\002@\006\000\005|\003\000\005|\004\000\006@\005\000\005\148\001\000\005\144\001\000\005\136\001\000\006@\006\000\006<\002\000\006<\003\000\006<\004\000\005\148\001\000\005\144\001\000\005\136\001\000\006<\005\000\004\128\002\000\004\128\003\000\004\128\004\000\004|\002\000\007\220\003\000\007\220\004\000\003\\\n\000\t(\006\000\t(\007\000\t(\b\000\t(\t\000\b<\001\000\t(\n\000\b<\002\000\b4\001\000\b8\001\000\t$\004\000\003`\004\000\003X\004\000\005\020\001\000\003`\005\000\003X\005\000\003X\006\000\003X\007\000\bD\001\000\003X\b\000\003X\t\000\t$\005\000\t$\006\000\t$\007\000\t$\b\000\b<\001\000\t$\t\000\005\168\003\000\005\168\004\000\005\196\001\000\005\192\001\000\005\184\001\000\000T\005\000\000T\006\000\012H\006\000\001\208\001\000\012H\007\000\002\240\003\000\002\240\004\000\t\240\001\000\t\236\001\000\t\224\001\000\t\208\002\000\t\168\001\000\t\164\001\000\t\160\001\000\t\156\001\000\t\152\001\000\t\148\001\000\t\144\001\000\t\140\001\000\t\136\001\000\t\188\002\000\t\184\002\000\t\188\003\000\t\184\003\000\t\188\004\000\t\184\004\000\t\188\005\000\t\184\005\000\005\148\001\000\005\144\001\000\005\136\001\000\t\184\006\000\t\188\006\000\t\188\007\000\005\196\001\000\005\192\001\000\005\184\001\000\t\188\b\000\t\132\002\000\t\128\002\000\t\128\003\000\t\132\003\000\t\132\004\000\002$\004\000\002$\005\000\bp\001\000\002$\006\000\001\240\004\000\001\236\004\000\001\232\004\000\001\228\004\000\001\240\005\000\001\232\005\000\bp\001\000\001\240\006\000\001\232\006\000\001\240\007\000\001\240\b\000\001\236\005\000\001\236\006\000\0020\004\000\0020\005\000\0020\006\000\0020\007\000\000\168\003\000\000\168\004\000\001\244\003\000\001\244\004\000\001\244\005\000\001\244\006\000\001\244\007\000\003p\001\000\003p\002\000\000\000\001\000\000\004\000\000\003|\001\000\003|\002\000\000\004\001\000\000\b\000\000\012$\001\000\005(\001\000\001\140\001\000\005(\002\000\005(\003\000\005,\001\000\000\b\001\000\005`\001\000\0058\001\000\0054\001\000\0050\001\000\005 \001\000\0058\002\000\0054\002\000\0050\002\000\005 \002\000\012$\001\000\0054\003\000\0054\004\000\0054\005\000\0058\003\000\0050\003\000\000H\001\000\005$\001\000\000L\001\000\0078\001\000\0078\002\000\000\012\000\000\000\012\001\000\007<\001\000\007<\002\000\000\016\000\000\000\016\001\000\007@\001\000\001\208\001\000\007@\002\000\000\020\000\000\007D\001\000\007D\002\000\000\020\001\000\000\024\000\000\000\024\001\000\007H\001\000\005`\001\000\005 \001\000\007H\002\000\000\028\000\000\000\028\001\000\007L\001\000\005P\001\000\007L\002\000\000 \000\000\000 \001\000\007P\001\000\007P\002\000\000$\000\000\007|\001\000\007p\001\000\007h\001\000\007`b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000F\000J\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000\\\000^\000_\000`\000a\000b\000c\000d\000e\000l\000m\000n\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\n\001\012\001\014\001\015\001\017\001\019\001\020\001\021\001\024\001\025\001\028\001\029\001 \001!\001\"\001#\001$\001&\001'\001(\001)\001*\001+\001,\001-\001/\0010\0012\0013\0014\0015\0018\0019\001:\001;\001<\001=\001>\001?\001C\001D\001G\001H\001I\001J\001L\001M\001N\001O\001Q\001R\001S\001T\001V\001W\001X\001Z\001[\001\\\001]\001^\001`\001a\001c\001d\001f\001h\001i\001j\001k\001m\001n\001p\001q\001t\001u\001v\001x\001y\001z\001{\001}\001~r\002\019\002\022\002\023\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002\031\002 \002!\002\"\002#\002%\002&\002'\002+\002/\0023\0025\0027\0029\002:\002<\002=\002?\002@\002B\002C\002D\002E\002F\002G\002H\002I\002K\002M\002N\002P\002Q\002R\002U\002W\002X\002Y\002Z\002[\002\\\002]\002`\002a\002b\002c\002d\002e\002f\002g\002i\002j\002k\002l\002m\002o\002q\002r\002t\002u\002v\002w\002x\002{\002|\002~b\003\t\003\n\003\011\003\r\003\014\003\020\003\021\003\027\003\028\003\"\003#\003)\003*\003+\003,\003.\0034\0035\0037\003=\003C\003I\003J\003L\003M\003N\003O\003W\003Y\003Z\003[\003\\\003b\003f\003i\003j\003k\003l\003m\003n\003o\003p\003u\003w\003x\003z\003{\003}\003~n\004\011\004\012\004\r\004\014\004\018\004\025\004\026\004\031\004 \004!\004%\004&\004'\004(\004*\004+\004/\0040\0042\0044\0046\0049\004:\004;\004=\004>\004?\004@\004A\004B\004D\004F\004H\004J\004L\004N\004O\004P\004Q\004R\004Z\004[\004]\004_\004a\004i\004j\004k\004l\004m\004o\004q\004s\004z\004{\004|\004}\004~\004\132\004\133\004\134\004\135\004\136\004\149\004\150\004\163\004\164\004\165\004\168\004\169\004\170\004\171\004\172\004\185\004\192\004\193\004\194\004\218\004\219\004\220\004\221\004\222\004\223\004\236\004\237\004\250\005\006\005\011\005\012\005\014\005\016\005\017\005\018\005\019\005\023\005\024\005\028\005\029\005\031\005!\005#\005%\005&\005(\005)\005*\005,\005-\005/\005<\005=\005>\005?\005@\005B\005C\005D\005E\005G\005H\005I\005d\005e\005}\005~\005\150\005\151\005\175\005\176\005\200\005\201\005\225\005\226\005\250\005\251\006\019\006\020\006,\006-\006E\006F\006^\006_\006w\006x\006\144\006\145\006\169\006\170\006\194\006\195\006\219\006\220\006\244\006\245\007\r\007\014\007&\007'\007?\007@\007X\007Y\007q\007r\007\138\007\139\007\141\007\154\007\155\007\179\007\182\007\183\007\184\007\185\007\186\007\187\007\188\007\190\007\191\007\193\007\194\007\195\007\201\007\202\007\203\007\204\007\210\007\211\007\217\007\218\007\224\007\225\007\226\007\227\007\228\007\230\007\231\007\237\007\238\007\239\007\240\007\241\b\t\b\015\b\016\b\017\b\019\b\020\b\021\b\022\b\023\b\024\b\026\b\027\b\028\b\030\b\031\b \b!\b;\b=\b>\b@\bA\bB\bC\bD\bE\bF\bG\bT\bU\bV\bY\bZ\b\\\b^\ba\bb\bd\be\bh\bk\bm\bn\bo\bp\bq\b\127\b\140\b\142\b\143\b\144\b\157\b\163\b\165\b\167\b\169\b\170\b\194\b\196\b\198\b\200\b\201\b\225\b\227\b\229\b\231\b\232\t\000\t\014\t\016\t\018\t\020\t\021\t-\t/\t1\t3\t4\tL\tN\tg\ti\tj\t\130\t\138\t\144\t\146\t\148\t\150\t\151\t\175\t\177\t\179\t\181\t\182\t\206\t\208\t\210\t\212\t\213\t\237\t\239\t\240\n\b\n\021\n\023\n\024\n\025\n1\n2\n3\n4\n5\n6\n7\nO\nP\nU\nX\nY\nZ\n[\n\\\n]\n^\n_\n`\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n{\n|\n}\n~\n\134\n\135\n\136\n\137\n\138\n\141\n\142\n\143\n\144\n\145\n\146\n\147\n\150\n\157\n\158\n\159\n\161\n\162\n\163\n\164\n\165\n\166\n\167\n\168\n\170\n\171\n\172\n\173\n\175\n\176\n\177\n\178\n\180\n\182\n\207\n\208\n\232\n\233\n\234\n\235\n\248\011\016\011\017\011\030\011\031\011 \0118\011;\011=\011>\011?\011@\011A\011B\011C\011D\011E\011F\011G\011H\011I\011M\011N\011O\011P\011Q\011R\011S\011T\011X\011Y\011]\011^\011b\011c\011d\011e\011f\011g\011h\011i\011j\011k\011l\011m\011n\011o\011p\011q\011r\011s\011t\011u\011v\011w\011x\011y\011z\011{\011|\011}\011~\011\127\011\128\011\129\011\133\011\134\011\135\011\136\011\138\011\139\011\140\011\142\011\143\011\145\011\146\011\147\011\148\011\149\011\150\011\151\011\152\011\153\011\177\011\178\011\179\011\181\011\182\011\183\011\185\011\212\011\213\011\214\011\218\011\219\011\221\011\226\011\227\011\228\011\232\011\233\011\237\011\241\011\242\011\249\011\250\011\251\011\253\011\254\011\255\012\000\012\002\012\004\012\006\012\b\012\t\012\n\012\011\012\012\012\r\012\014\012\015\012\018\012\020\012\021\012\023\012\024\012\025\012\026\012\027\012\029\012\031\012!\012\"\012#\012$\012%\012&\012'\012*\012-\0120\0123\0125\0126\0127\0128\012:\012;\012<\012>\012?\012A\012B\012C\012D\012F\012G\012H\012I\012M\012O\012P\012R\012S\012T\012U\012V\012W\012Z\012]\012_\012`\012a\012b\012d\012e\012f\012g\012h\012i\012j\012k\012l\012n\012u\012v\012w\012z\012{\012|\012}\012~r\001\r\002\r\003\r\004\r\005\r\006\r\007\r\b\r\012\r\r\r\014\r\015\r\016\r\017\r\019\r\020\r\021\r\022\r\023\r\024\r\025\r\027\r\028\r\029\r\030\r\031\r \r!\r\"\r$\r%\r&\r'\r(\r*\r+\r-\r.\r/\r0\r1\r3\r4\r5\r6\r8\r9\r;\r<\r=\r>\r?\r@\rA\rB\rC\rE\rG\rH\rI\rK\rL\rM\rO\rP\rQ\rR\rT\rV\rW\rX\rZ\r[\r\\\r^\r_\ra\rc\rd\re\rf\rh\ri\rk\rl\rm\rn\ro\rp\rq\rr\rs\rt\rv\rw\rx\ry\rz\r{\r|\r}\r\127\r\128\r\129\r\130\r\131\r\132\r\133\r\134\r\135\r\136\r\138\r\139\r\140\r\141\r\145\r\148\r\149\r\150\r\151\r\152\r\153\r\155\r\157\r\158\r\160\r\161\r\162\r\163\r\164\r\165\r\166\r\167\r\168\r\169\r\170\r\171\r\172\r\173\r\174\r\175\r\176\r\177\r\178\r\179\r\180\r\181\r\182\r\183\r\184\r\185\r\186\r\187\r\188\r\189\r\190\r\192\r\193\r\194\r\195\r\196\r\197\r\198\r\199\r\200\r\201\r\202\r\204\r\205\r\206\r\207\r\208\r\209\r\210\r\211\r\212\r\214\r\216\r\217\r\218\r\219\r\220\r\221\r\222\r\223\r\224\r\225\r\226\r\227\r\228\r\229\r\231\r\232\r\233\r\235\r\239\r\240\r\241\r\242\r\243\r\244\r\245\r\247\r\248\r\249\r\251\r\252\r\253\r\255\014\000\014\001\014\002\014\003\014\005\014\006\014\b\014\t\014\n\014\012\014\014\014\015\014\017\014\018\014\019\014\021\014\022\014\023\014\025\014\026\014\028\014\029\014\031\014 \014!\014\"\014#\014&\014'\014(\014)\014*\014,\014-\014.\014/\0140\0141\0143\0144\0145\0146\0147\0148\0149\014:\014;\014<\014=\014>\014?\014@\014B\014C\014D\014E\014G\014H\014I\014J\014K\014L\014M\014N\014O\014P\014Q\014R\014S\014T\014U\014V\014W\014X\014Y\014Z\014[\014\\\014^\014_\014a\014b\014c\014d\014e\014f\014g\014h\014i\014j\014k\014l\014m\014p\014q\014t\014u\014v\014w\014x\014y\014z\014~r\015\014\015\015\015\016\015\017\015\018\015\019\015\020\015\021\015\022\015\023\015\024\015\025\015\026\015\027\015\028\015\030\015\031\015 \015!\015\"\015#\015$\015%\015(\015)\015*\015+\015-\015.\015/\0150\0151\0152\0153\0159\015:\015;\015<\015=\015>\015?\015A\015C\015D\015K\015R\015S\015T\015U\015V\015W\015Z\015[\015\\\015]\015^\015_\015`\015a\015b\015c\015d\015e\015f\015h\015i\015j\015k\015l\015m\015n\015o\015p\015q\015r\015s\015t\015u\015v\015w"))
    
    and nullable =
      "\000\000@\164\004\001\000\000\0048@\000\031\248\012\000\000\007\255\240\000\016 \132\000\003\000\000"
    
    and first =
      (135, "2\248D\026X\170\223\204\207@T\031r(\000q\192e\240\1364\177U\191\153\158\128\168>\228P\000\227\128\002\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\012B\000@@\0020$Z\000 \n\128\000\001\004\000\b\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\\ \005,\020o\226G\160\b\015\160\020\000\024\224\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000\001\016\000\000\000\000\b\000\016\000\000\000\128\000\000\000\000\002 \000\000\000\000\024\000 \000\000\001\000\000\000\000\000\018\000 \128\004\016\000B\000\002\000\001\144\000\002\000\003/\132A\165\138\173\252\204\244\005\001\247\"\128\007\028\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\016\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000 \016\000\128\000\000\000\000\000\000\b\000\b\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\025|\"\r,Uo\230g\160*\015\185\020\0008\224\000\000\000\000\b\000@\000\000\000\000\000\000\000\000\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\016 \001\016\000\000\000\000\000\000\000\000\000\000\b\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\192\000\006\000\000\003\011\132\000\002\000\000\000\000\000\0002\248D\026X\170\223\204\207@T\031r(\000q\192\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000$\000\001\000\b \020\132\000\004\000\003\000\000\004\000\006_\b\131K\021[\249\153\232\n\003\238\005\000\0148\000b\144\002B@\017\129\"\176\001\000R\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000^\221\136\128\130\254*@\0010p:q\193`Ph\003\016\128\016\016\000\136\t\020\128\b\002\128\000\000A\000\006!\000  \001\024\018)\000\016\005\000\000\000\130\000\004B\000R\000@0$r\000\000\n\001@\001\140\000\000\000\000\000\000\000\000\b\160\000\000\000\000\000\000\000\000\000\b\000\001\000\b\000\000\b\000\000 \000\000\004\000\000\144\000\004\000 \128\002\016\000\016\000\012\000\000\016\000\001 \002\b\000A\000\004 \000 \000\024\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000ap\128\020\176Q\191\137\030\128 >\128P\000c\128\002\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\012B\000@@\0020$Z\000 \n\128\000\001\004\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000`\000\003@@\001\133\194\000\001\000\000\000\000\000 \000\192\000\006\000\000\003\011\132\000\002\000\000\000\000\000\0000\184@\nX(\223\196\143@\016\031@(\0001\192\003\000\000\026\002\000\012.\016\000\b\000\000\000\000\000\000\006\000\0000\000\000\024\\ \000\016\000\000\000\000\000\000\b\000\000 @\002\000\000\000\000\000\000\000\000\000\000\000\024\000\000\208\016\000ap\128\000@\000\000\000\000\000\0000\000\001\160 \000\194\225\000\000\128\000\000\000\000\016\000\016\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\192\000\006\128\128\003\011\132\000\002\000\000\000\000\000\000\001\136@\b\b\000F\004\139@\004\001P\000\000\"\128\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\004R\000Z\b@0$v\000\000\n\001@\001\140\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\"\000\000\000\000\001\000\002\000\000\000\016\000\000\000\128\000D\000\000\000\000\002\000\004\000\000\000 \000\000\001\000\000\136\000\000\000\000\004\000\b\000\000\000@\000\000\002\000\001\016\128\020\128\016\012\t\028\128\000\002\128P\000c\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\192\000\006\128\128\003\011\132\000\002\000\000\000\000\000\000\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000e\240\1366\177U\191\153\158\128\160>\224P\001\227\128\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\012B\000@@\0020$Z\000 \n\000\000\001\004\000\024\132\000\128\128\004`H\180\000@\020\000\000\002\b\0001\b\001\001\000\b\192\145h\000\128(\000\000\004\016\000b\016\002\002\000\017\129\"\208\001\000T\000\000\b \000\196 \004\004\000#\002E\160\002\000\168\000\000\016@\000\128\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\003\016\128\016\016\000\140\t\022\128\b\002\160\000\000A\000\002\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\023\b\001K\005\027\248\145\232\002\003\232\005\000\0068\000`\000\003@@\001\133\194\000\001\000\000\000\000\000\000\000D\000\000\000\000\002\000\004\000\000\000 \000\000\000\000\000\136\000\000\000\000\006\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\004\000\015\192\024\018\000\001\241\b\001\002\000@\162\192\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\001\136\000\r\129\000\006\023\n\000\004\000@\004\000\002\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000@\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\128\b\b\000\002\006\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000@\000\000  \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\128\000\000\000\000\001\000\000\016\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\002\000\000\000@\000\001\000\b\000\000\000\000\000\000\000\128\001\128\000\012\000\000\006\023\b\000\004\000\000\004\000\000\000\003\016\128\016\016\000\140\t\022\128\b\002\160\000\000A\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000H\000\130\000\016@)\b\000\b\128\006\000\000\b\000\000\144\000\004\000 \128R\016\000\016\000\012\000\000\016\000\001\000\000\b\000\000\016\004 \024\000\000\000\000\016\000\000\002\000\000\016\000\000 \b@\016\000\000\000\000 \000\000\004\128\b \001\004\002\144\128\000\128\000`\000\000\128\000\t\000\016@\002\b\000!\000\001\000\000\192\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\024\132\000\128\128\004`H\180\000@\020\000\000\002\b\0001\b\001\001\000\b\192\145h\000\128(\000\000\004\016\000b\016\002\002\000\017\129\"\208\001\000T\000\000\b \000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\016\128\016\016\000\140\t\022\128\b\002\128\000\000A\000\006)\000$$\001\024\018+\000\016\005\000\000\000\130\000\004R\000Z\b@0$v\000\000\n\001@\001\140\000\b\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\016\000\000\000\000\000\000\000\000\000\t\000\016@\002\b\000!\000\001\000\000\200\000\001\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\003/\132A\165\138\173\252\204\244\005\001\247\"\128\007\028\000\016\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000\004\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\0000\000\001\160 \000\194\225\000\000\128\000\000\000\000\000\000b\144\002B@Q\129\"\176\001\000P\000\000( \000\197 \004\132\128#\002E`\002\000\164\000\002P@\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\002 \000\000\000\000\016\000 \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\128\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\012.\016\002\150\n7\241#\208\004\007\208\n\000\012p\000\002\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\001\128\000\r\001\000\006\023\b\000\004\000\000\000\000\000\000\001\016\000\000\000\000\b\000\016\000\000\000\128\000\000\004\000\006\000\0000\000\000\024\\(\000\016\000\000\000\000\000\000\012\000\000h\b\0000\184@\000 \000\000\000\000\000\000\b\128\000\000\000\000@\000\128\000\000\004\000\000\000\000\000\017\000\000\000\000\000\128\001\000\000\000\b\000\000\000\000\000\002\000\000\000\000\001\000\002\000\000\000\016\000\000\000\000\000\000 \000\000\000\000\000\000 \000\000\128\000\000\016\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\006\000\0004\004\128\025\\ \000\016\000\000\000\000\000\000\004\000\000\000\001\0000\000@\000\000\000\000\000\000\000\000\b\000\000\128\002\000$@\128\000\000\000\000\000\000\000\000@\000\002\000\000\004\001\b\002\000\000\000\000\004\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\003\020\128\018\018\000\140\t\021\128\b\002\128\000\000A\000\006)\000$$\001\024\018+\000\016\005 \000\002\130\000\016\000\000\128\000\001\000B\001\128\000\000\000\001\000\000\000\b\000\000\128\002\000d@\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\023\183b  \191\138\144\000L\028\014\156pX\020\026\000\192\000\006\000\000\003\011\132\000\002\000\000\000\000\000\000\000\136\000\000\000\000\006\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\006\000\0004\004\000\024\\ \000\016\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000")
    
  end) (ET) (TI)
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1798 lexer lexbuf) : (Parsetree.toplevel_phrase list))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1778 lexer lexbuf) : (Parsetree.toplevel_phrase))

and parse_val_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1772 lexer lexbuf) : (Longident.t))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1768 lexer lexbuf) : (Parsetree.pattern))

and parse_mty_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1764 lexer lexbuf) : (Longident.t))

and parse_mod_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1760 lexer lexbuf) : (Longident.t))

and parse_mod_ext_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1756 lexer lexbuf) : (Longident.t))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1752 lexer lexbuf) : (Parsetree.expression))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1748 lexer lexbuf) : (Parsetree.core_type))

and parse_constr_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1744 lexer lexbuf) : (Longident.t))

and parse_any_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1726 lexer lexbuf) : (Longident.t))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1722 lexer lexbuf) : (Parsetree.signature))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (Parsetree.structure))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1798 initial_position) : (Parsetree.toplevel_phrase list) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1778 initial_position) : (Parsetree.toplevel_phrase) MenhirInterpreter.checkpoint)
  
  and parse_val_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1772 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1768 initial_position) : (Parsetree.pattern) MenhirInterpreter.checkpoint)
  
  and parse_mty_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1764 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1760 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_ext_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1756 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1752 initial_position) : (Parsetree.expression) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1748 initial_position) : (Parsetree.core_type) MenhirInterpreter.checkpoint)
  
  and parse_constr_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1744 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_any_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1726 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1722 initial_position) : (Parsetree.signature) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (Parsetree.structure) MenhirInterpreter.checkpoint)
  
end

# 3999 "src/ocaml/preprocess/parser_raw.mly"
  

# 44961 "src/ocaml/preprocess/parser_raw.ml"

# 269 "<standard.mly>"
  

# 44966 "src/ocaml/preprocess/parser_raw.ml"
